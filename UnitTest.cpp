#include "pch.h"
#include "CppUnitTest.h"
#include "SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

#define CHEAT_GEAR_CHECK_OFFSET(targetClass, varName, expectedOffset) \
	Assert::AreEqual(uint32_t(expectedOffset), uint32_t(offsetof(targetClass, varName)), L#targetClass" -> "#varName".")

#define CHEAT_GEAR_CHECK_SIZE(targetClass, expectedSize) \
	Assert::AreEqual(uint32_t(expectedSize), uint32_t(sizeof(targetClass)), L#targetClass" Has a wrong size.")

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// class UVCollisionEffectComponent : public UActorComponent
		TEST_METHOD(Class__Vankrupt__VCollisionEffectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCollisionEffectComponent, UnknownData_TDTF, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCollisionEffectComponent, PrevHitLocation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCollisionEffectComponent, bCanSpawnEffect, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCollisionEffectComponent, UnknownData_A3N5, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCollisionEffectComponent, VFX, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCollisionEffectComponent, SFX, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCollisionEffectComponent, LinearVelocityThreashold, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCollisionEffectComponent, AngularVelocityThreashold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCollisionEffectComponent, Cooldown, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCollisionEffectComponent, bDebug, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVCollisionEffectComponent, UnknownData_Z1QW, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVCollisionEffectComponent, 0x0128);
		}

		// class AVDecalBSPProxy : public AInfo
		TEST_METHOD(Class__Vankrupt__VDecalBSPProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVDecalBSPProxy, bUpdate, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVDecalBSPProxy, UnknownData_R4YQ, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVDecalBSPProxy, Triangles, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVDecalBSPProxy, 0x0340);
		}

		// class UVDecalComponent : public UProceduralMeshComponent
		TEST_METHOD(Class__Vankrupt__VDecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVDecalComponent, UnknownData_JHAJ, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVDecalComponent, DecalSize, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVDecalComponent, bAsync, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVDecalComponent, bDebug, 0x0605);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVDecalComponent, UnknownData_JBOD, 0x0606);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVDecalComponent, Material, 0x0608);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVDecalComponent, 0x0610);
		}

		// class UVGameInstance : public UGameInstance
		TEST_METHOD(Class__Vankrupt__VGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVGameInstance, UnknownData_X00X, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVGameInstance, 0x00B8);
		}

		// class UVGameOptions : public UDataAsset
		TEST_METHOD(Class__Vankrupt__VGameOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVGameOptions, Label, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVGameOptions, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVGameOptions, ThumbnailOverlay, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVGameOptions, Type, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVGameOptions, Mode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVGameOptions, MaxPlayers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVGameOptions, UnknownData_LI18, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVGameOptions, Maps, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVGameOptions, 0x0090);
		}

		// class UVankruptGlobalStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Vankrupt__VankruptGlobalStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVankruptGlobalStyle, GlobalStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVankruptGlobalStyle, 0x06A0);
		}

		// class UVHealthComponent : public UActorComponent
		TEST_METHOD(Class__Vankrupt__VHealthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, KillData, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, UnknownData_BVH7, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, Hitboxes, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, DamageMultiplier, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, KillImpulseMul, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, KillImpulseMulCurve, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, DeadLifeSpan, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, bUseKillData, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, UnknownData_OLXV, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, MaxHealth, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, Health, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, bDead, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, UnknownData_RP9M, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, DefaultHitboxInfo, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, HitboxInfoTable, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, LowHealthThreshold, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, UnknownData_R88F, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, OnKill, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, OnRevive, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, OnHitEffect, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVHealthComponent, OnLowHealth, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVHealthComponent, 0x0228);
		}

		// class UVHealthInterface : public UInterface
		TEST_METHOD(Class__Vankrupt__VHealthInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVHealthInterface, 0x0028);
		}

		// class AVMenu : public AActor
		TEST_METHOD(Class__Vankrupt__VMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVMenu, UnknownData_A7GV, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVMenu, GlobalStyle, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVMenu, OnPopupCommit, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVMenu, UnknownData_0VXD, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVMenu, 0x0380);
		}

		// class AVLobby : public AVMenu
		TEST_METHOD(Class__Vankrupt__VLobby)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVLobby, UnknownData_WYK7, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVLobby, LobbyStyle, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVLobby, Title, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVLobby, AvailableOptions, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVLobby, Mode, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVLobby, UnknownData_9Q4J, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVLobby, Settings, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVLobby, UnknownData_JXYN, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVLobby, 0x0418);
		}

		// class AVLobbyGameMode : public AGameMode
		TEST_METHOD(Class__Vankrupt__VLobbyGameMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVLobbyGameMode, 0x0410);
		}

		// class UVankruptLobbyStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Vankrupt__VankruptLobbyStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVankruptLobbyStyle, LobbyStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVankruptLobbyStyle, 0x1030);
		}

		// class UVMap : public UDataAsset
		TEST_METHOD(Class__Vankrupt__VMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVMap, Title, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVMap, Name, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVMap, AbsolutePath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVMap, Thumbnail, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVMap, 0x0070);
		}

		// class UVSpawnManagerComponent : public UActorComponent
		TEST_METHOD(Class__Vankrupt__VSpawnManagerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVSpawnManagerComponent, SpawnPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVSpawnManagerComponent, Distances, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVSpawnManagerComponent, LastSpawnTransform, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVSpawnManagerComponent, ReferenceLocation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVSpawnManagerComponent, ClosestThreashold, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVSpawnManagerComponent, SpawnPointCooldown, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVSpawnManagerComponent, UnknownData_WBJL, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVSpawnManagerComponent, 0x0160);
		}

		// class AVSpawnPoint : public AActor
		TEST_METHOD(Class__Vankrupt__VSpawnPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVSpawnPoint, Collision, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVSpawnPoint, Icon, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVSpawnPoint, Arrow, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVSpawnPoint, LastSpawnAtSeconds, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVSpawnPoint, UnknownData_5CHX, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVSpawnPoint, 0x0348);
		}

		// class UVStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Vankrupt__VStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVStatics, 0x0028);
		}

		// class UCohtmlAssetReferencer : public UObject
		TEST_METHOD(Class__CohtmlPlugin__CohtmlAssetReferencer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCohtmlAssetReferencer, 0x0028);
		}

		// class UCohtmlAtlasContainedTextures : public UObject
		TEST_METHOD(Class__CohtmlPlugin__CohtmlAtlasContainedTextures)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlAtlasContainedTextures, Textures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCohtmlAtlasContainedTextures, 0x0078);
		}

		// class UCohtmlTextureAtlasDetails : public UObject
		TEST_METHOD(Class__CohtmlPlugin__CohtmlTextureAtlasDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlTextureAtlasDetails, AtlasPath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlTextureAtlasDetails, Width, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlTextureAtlasDetails, Height, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlTextureAtlasDetails, PixelFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlTextureAtlasDetails, MaxAtlasWidth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlTextureAtlasDetails, MaxAtlasHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlTextureAtlasDetails, MaxTextureWidth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlTextureAtlasDetails, MaxTextureHeight, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCohtmlTextureAtlasDetails, 0x0060);
		}

		// class UCohtmlAudioWrapper : public UObject
		TEST_METHOD(Class__CohtmlPlugin__CohtmlAudioWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlAudioWrapper, Owner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlAudioWrapper, Sounds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlAudioWrapper, UnknownData_TTPG, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCohtmlAudioWrapper, 0x0330);
		}

		// class UCohtmlBaseComponent : public UActorComponent
		TEST_METHOD(Class__CohtmlPlugin__CohtmlBaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlBaseComponent, ReadyForBindings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlBaseComponent, BindingsReleased, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlBaseComponent, ScriptingReady, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlBaseComponent, PreloadedTextures, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlBaseComponent, bEnableComplexCSSSupport, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlBaseComponent, UnknownData_K41V, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlBaseComponent, Texture, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlBaseComponent, Filter, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlBaseComponent, bReceiveInput, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlBaseComponent, bDelayedUpdate, 0x0142);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlBaseComponent, bUseWideColorTextures, 0x0143);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlBaseComponent, UnknownData_5U2H, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlBaseComponent, AudioWrapper, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlBaseComponent, UnknownData_XI8R, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCohtmlBaseComponent, 0x01C0);
		}

		// class UCohtmlBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__CohtmlPlugin__CohtmlBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCohtmlBlueprintFunctionLibrary, 0x0028);
		}

		// class UCohtmlComponent : public UCohtmlBaseComponent
		TEST_METHOD(Class__CohtmlPlugin__CohtmlComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlComponent, URL, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlComponent, Width, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlComponent, Height, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlComponent, ManualTexture, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlComponent, UnknownData_IA5G, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlComponent, PrimitiveName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlComponent, UnknownData_DHG9, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCohtmlComponent, 0x01F8);
		}

		// class UCohtmlEventHelpers : public UObject
		TEST_METHOD(Class__CohtmlPlugin__CohtmlEventHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCohtmlEventHelpers, 0x0028);
		}

		// class ACohtmlGameHUD : public AHUD
		TEST_METHOD(Class__CohtmlPlugin__CohtmlGameHUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACohtmlGameHUD, CohtmlHUD, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACohtmlGameHUD, CohtmlHUDInternal, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACohtmlGameHUD, UnknownData_MNKI, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACohtmlGameHUD, 0x04C0);
		}

		// class UCohtmlHUD : public UCohtmlBaseComponent
		TEST_METHOD(Class__CohtmlPlugin__CohtmlHUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlHUD, HUDMaterialName, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlHUD, HUDMaterial, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlHUD, HUDMaterialInstance, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlHUD, UnknownData_IXJ5, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCohtmlHUD, 0x01F0);
		}

		// class ACohtmlInputActor : public AActor
		TEST_METHOD(Class__CohtmlPlugin__CohtmlInputActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACohtmlInputActor, OnCohtmlInputActorMouseButtonDown, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACohtmlInputActor, OnCohtmlInputActorMouseButtonUp, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACohtmlInputActor, OnCohtmlInputActorKeyDown, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACohtmlInputActor, OnCohtmlInputActorKeyUp, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACohtmlInputActor, UnknownData_VNOY, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACohtmlInputActor, 0x0380);
		}

		// class UCohtmlJSEvent : public UObject
		TEST_METHOD(Class__CohtmlPlugin__CohtmlJSEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlJSEvent, UnknownData_VJSU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlJSEvent, StructTypes, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCohtmlJSEvent, 0x00B8);
		}

		// class UCohtmlSettings : public UObject
		TEST_METHOD(Class__CohtmlPlugin__CohtmlSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, EnableLiveReload, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, UnknownData_GBNW, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, DevToolsPort, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, EnableLocalization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, EnableBreakIterator, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, HandleInputOnHTMLBody, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, UnknownData_DOFW, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, InputTransparentCssClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, ScrollDelta, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, ShowWarningsOnScreen, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, LogSeverity, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, bRespectTitleSafeZone, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, bRespectLetterboxing, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, TickWhileGameIsPaused, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, bUseLowerCaseNamesForAutoExposedProperties, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, MSAA, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, UnknownData_QSAT, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, FallbacksForAllFormats, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, DefaultStyleFontFamily, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, AsynchronousResourceRequestCalls, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, bUseInputPreprocessor, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlSettings, UnknownData_CVO3, 0x007A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCohtmlSettings, 0x0080);
		}

		// class ACohtmlSystem : public AActor
		TEST_METHOD(Class__CohtmlPlugin__CohtmlSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACohtmlSystem, UnknownData_P6PL, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACohtmlSystem, 0x0368);
		}

		// class UCohtmlWidget : public UWidget
		TEST_METHOD(Class__CohtmlPlugin__CohtmlWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, UnknownData_F0TD, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, Owner, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, ReadyForBindings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, BindingsReleased, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, ScriptingReady, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, bEnableComplexCSSSupport, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, Filter, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, bReceiveInput, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, InputPropagationBehaviour, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, bGammaCorrectedMaterial, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, bUseWideColorTextures, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, UnknownData_2S7L, 0x0156);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, TickPeriodInMinimizedGame, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, UnknownData_HYW9, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, PreloadedTextures, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, AudioWrapper, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, UnknownData_0XZF, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohtmlWidget, URL, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCohtmlWidget, 0x0200);
		}

		// class UHummingbirdBaseComponent : public UCohtmlBaseComponent
		TEST_METHOD(Class__CohtmlPlugin__HummingbirdBaseComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHummingbirdBaseComponent, 0x01C0);
		}

		// class UHummingbirdComponent : public UCohtmlComponent
		TEST_METHOD(Class__CohtmlPlugin__HummingbirdComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHummingbirdComponent, 0x01F8);
		}

		// class AHummingbirdGameHUD : public ACohtmlGameHUD
		TEST_METHOD(Class__CohtmlPlugin__HummingbirdGameHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHummingbirdGameHUD, 0x04C0);
		}

		// class UHummingbirdHUD : public UCohtmlHUD
		TEST_METHOD(Class__CohtmlPlugin__HummingbirdHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHummingbirdHUD, 0x01F0);
		}

		// class AHummingbirdInputActor : public ACohtmlInputActor
		TEST_METHOD(Class__CohtmlPlugin__HummingbirdInputActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHummingbirdInputActor, 0x0380);
		}

		// class AHummingbirdSystem : public ACohtmlSystem
		TEST_METHOD(Class__CohtmlPlugin__HummingbirdSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHummingbirdSystem, 0x0368);
		}

		// class UMovieSceneSignedObject : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_5IB0, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x0050);
		}

		// class UMovieSceneSection : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_I6GX, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, SectionRange, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollFrames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollFrames, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_1BX9, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, StartTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PrerollTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostrollTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_873R, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, bSupportsInfiniteRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_YIKJ, 0x00CB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x00E0);
		}

		// class UMovieSceneTrack : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_F0TY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0058);
		}

		// class UMovieSceneNameableTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x0058);
		}

		// class UMovieSceneSequence : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, PrecompiledEvaluationTemplate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, DefaultCompletionMode, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_430Y, 0x0342);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0348);
		}

		// class UMovieSceneSequencePlayer : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_L8D8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_D1J4, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_KLIM, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Sequence, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, StartTime, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationFrames, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_YHQE, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, RootTemplateInstance, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_4A2T, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x07C8);
		}

		// class UMovieScene : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, TickResolution, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, DisplayRate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EvaluationType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ClockSource, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_A4BT, 0x00CA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x00D0);
		}

		// class UMovieSceneBindingOverrides : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_DJJQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_G6N5, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0098);
		}

		// class UMovieSceneBindingOverridesInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverridesInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverridesInterface, 0x0028);
		}

		// class UMovieSceneBindingOwnerInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0028);
		}

		// class UMovieSceneBuiltInEasingFunction : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_YS5F, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_MX8L, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0038);
		}

		// class UMovieSceneEasingExternalCurve : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_S8S3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, Curve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0038);
		}

		// class UMovieSceneEasingFunction : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0028);
		}

		// class UMovieSceneFolder : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_MQH2, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0070);
		}

		// class UMovieSceneKeyProxy : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneKeyProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneKeyProxy, 0x0028);
		}

		// class UMovieSceneSubSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSubSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, Parameters, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PrerollTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_SA7Q, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_DJHC, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0150);
		}

		// class UMovieSceneSubTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x0068);
		}

		// class UTestMovieSceneTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, bHighPassFilter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_P1AX, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, SectionArray, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneTrack, 0x0070);
		}

		// class UTestMovieSceneSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSection, 0x00E0);
		}

		// class UTestMovieSceneSequence : public UMovieSceneSequence
		TEST_METHOD(Class__MovieScene__TestMovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSequence, MovieScene, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSequence, 0x0350);
		}

		// class USoldierSkin_German_C : public USoldierSkin
		TEST_METHOD(BlueprintGeneratedClass__SoldierSkin_German__SoldierSkin_German_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoldierSkin_German_C, 0x0198);
		}

		// class UWmfMediaSettings : public UObject
		TEST_METHOD(Class__WmfMediaFactory__WmfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, AllowNonStandardCodecs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, LowLatency, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, NativeAudioOut, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, UnknownData_N4GK, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWmfMediaSettings, 0x0030);
		}

		// class UMaterialShaderQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0078);
		}

		// class UShaderPlatformQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_V3FI, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0050);
		}

		// class UGameplayTask : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_2JQG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, InstanceName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_1ULG, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ResourceOverlapPolicy, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_YGRJ, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ChildTask, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask, 0x0068);
		}

		// class UGameplayTask_ClaimResource : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_ClaimResource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_ClaimResource, 0x0068);
		}

		// class UGameplayTask_SpawnActor : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_SpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, Success, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, DidNotSpawn, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, UnknownData_3K7V, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, ClassToSpawn, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_SpawnActor, 0x00A8);
		}

		// class UGameplayTask_TimeLimitedExecution : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_TimeLimitedExecution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnFinished, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnTimeExpired, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, UnknownData_85CO, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_TimeLimitedExecution, 0x0098);
		}

		// class UGameplayTask_WaitDelay : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_WaitDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, OnFinish, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, UnknownData_UR9O, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_WaitDelay, 0x0080);
		}

		// class UGameplayTaskOwnerInterface : public UInterface
		TEST_METHOD(Class__GameplayTasks__GameplayTaskOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskOwnerInterface, 0x0028);
		}

		// class UGameplayTaskResource : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTaskResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, ManualResourceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, AutoResourceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_5LEU, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_3B0Y, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskResource, 0x0038);
		}

		// class UGameplayTasksComponent : public UActorComponent
		TEST_METHOD(Class__GameplayTasks__GameplayTasksComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_KUD6, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_4FYD, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, SimulatedTasks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TaskPriorityQueue, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_31WM, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TickingTasks, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, KnownTasks, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, OnClaimedResourcesChange, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTasksComponent, 0x0160);
		}

		// class ASkullWound_Top_C : public ASkullWound_Base_C
		TEST_METHOD(BlueprintGeneratedClass__SkullWound_Top__SkullWound_Top_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkullWound_Top_C, 0x03C8);
		}

		// class ABP_FlyingHelmet_NT_C : public ABP_FlyingHelmet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlyingHelmet_NT__BP_FlyingHelmet_NT_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FlyingHelmet_NT_C, 0x0348);
		}

		// class UNamedInterfaces : public UObject
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_XBHT, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0060);
		}

		// class UTurnBasedMatchInterface : public UInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0028);
		}

		// class UAIDamageComponent : public UActorComponent
		TEST_METHOD(Class__Z__AIDamageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDamageComponent, OnApplyDamage, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDamageComponent, OnActiveStateChange, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDamageComponent, bCanTakeDamage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDamageComponent, UnknownData_HP31, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDamageComponent, 0x0118);
		}

		// class UAIDamageComponentInterface : public UInterface
		TEST_METHOD(Class__Z__AIDamageComponentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDamageComponentInterface, 0x0028);
		}

		// class AAIDirector : public AActor
		TEST_METHOD(Class__Z__AIDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, NeighborAreaRadius, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, PopulateNeighborGroupsFrequency, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, NeighborGroups, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, FlockingWeight, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, UnknownData_G4TY, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, PopulateNeightborListTimerHandle, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, DynamicNavPointUpdateTime, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, PoolingLocationOffset, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, NumberOfAIToSpawn, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, bIsEnabled, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, bPoolOnBeginPlay, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, bUseEQSSpawning, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, UnknownData_FQM3, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, ResetableObjectList, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, bSpawnActive, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, UnknownData_LKJ8, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, AISpawnCharacter, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, UnknownData_I3YR, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, OnAIKilled, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, UnknownData_9IM4, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, RespawnTime, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, RespawnTimeDeviation, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, NumberOfDynamicNavPoints, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, UnknownData_0918, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, DynamicNavMeshClass, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, DynamicNavPointUpdate, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIDirector, UnknownData_ALBI, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIDirector, 0x0428);
		}

		// class UAISlotManager : public UActorComponent
		TEST_METHOD(Class__Z__AISlotManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISlotManager, UnknownData_577V, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISlotManager, NumberOfAISlots, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISlotManager, UnknownData_KU0R, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISlotManager, AISlots, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISlotManager, bIsValidTarget, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISlotManager, UnknownData_SHFR, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISlotManager, MaxDistanceTarget, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISlotManager, DistanceOffset, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISlotManager, EQSTargetWeight, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISlotManager, 0x0128);
		}

		// class ABaseAICharacter : public ACharacter
		TEST_METHOD(Class__Z__BaseAICharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseAICharacter, UnknownData_LT7S, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseAICharacter, 0x0740);
		}

		// class ABaseAIController : public AAIController
		TEST_METHOD(Class__Z__BaseAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseAIController, 0x0438);
		}

		// class ABaseDestructibleActor : public AActor
		TEST_METHOD(Class__Z__BaseDestructibleActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseDestructibleActor, UnknownData_42ZR, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseDestructibleActor, DamageComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseDestructibleActor, SlotManagerComponent, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseDestructibleActor, 0x0348);
		}

		// class UBTTask_AssignToSlot : public UBTTask_BlackboardBase
		TEST_METHOD(Class__Z__BTTask_AssignToSlot)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_AssignToSlot, 0x0098);
		}

		// class UBTTask_AttackTarget : public UBTTask_BlackboardBase
		TEST_METHOD(Class__Z__BTTask_AttackTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_AttackTarget, AttackTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_AttackTarget, AttackRange, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_AttackTarget, DamageComponentDamage, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_AttackTarget, PlayerDamage, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_AttackTarget, AttackMontage, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_AttackTarget, 0x00B0);
		}

		// class UBTTask_FindSpawnZone : public UBTTask_BlackboardBase
		TEST_METHOD(Class__Z__BTTask_FindSpawnZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FindSpawnZone, BlackboardKeyRotation, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FindSpawnZone, 0x00C0);
		}

		// class UBTTask_FindTarget : public UBTTaskNode
		TEST_METHOD(Class__Z__BTTask_FindTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FindTarget, 0x0070);
		}

		// class UBTTask_RespawnAI : public UBTTaskNode
		TEST_METHOD(Class__Z__BTTask_RespawnAI)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RespawnAI, 0x0070);
		}

		// class UBTTask_RespawnDelay : public UBTTaskNode
		TEST_METHOD(Class__Z__BTTask_RespawnDelay)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RespawnDelay, 0x0070);
		}

		// class UBTTask_SetAIState : public UBTTaskNode
		TEST_METHOD(Class__Z__BTTask_SetAIState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetAIState, StateToChangeTo, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetAIState, UnknownData_4WQO, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetAIState, 0x0078);
		}

		// class UBTTask_SetPawnLocation : public UBTTask_BlackboardBase
		TEST_METHOD(Class__Z__BTTask_SetPawnLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetPawnLocation, ZOffset, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetPawnLocation, UnknownData_7KW2, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetPawnLocation, BlackboardKeyRotation, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetPawnLocation, 0x00C8);
		}

		// class UBTTask_ZCheckAndSetAttackState : public UBTTask_BlackboardBase
		TEST_METHOD(Class__Z__BTTask_ZCheckAndSetAttackState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ZCheckAndSetAttackState, StartPreparingForAttackDistance, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ZCheckAndSetAttackState, StartAttackingDistance, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_ZCheckAndSetAttackState, 0x00A0);
		}

		// class UBTTask_ZMoveTo : public UBTTask_BlackboardBase
		TEST_METHOD(Class__Z__BTTask_ZMoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ZMoveTo, ObservedBlackboardValueTolerance, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ZMoveTo, UnknownData_4JQR, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ZMoveTo, AcceptanceRadius, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ZMoveTo, StuckMaxTime, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_ZMoveTo, 0x00A8);
		}

		// class ADynamivNavArea : public AActor
		TEST_METHOD(Class__Z__DynamivNavArea)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADynamivNavArea, 0x0328);
		}

		// class UEnvQueryGenerator_ByComponent : public UEnvQueryGenerator
		TEST_METHOD(Class__Z__EnvQueryGenerator_ByComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ByComponent, ComponentToSearchFor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ByComponent, GenerateOnlyActorsInRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ByComponent, SearchRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ByComponent, SearchCenter, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ByComponent, 0x00C0);
		}

		// class UEnvQueryGenerator_ByInterface : public UEnvQueryGenerator
		TEST_METHOD(Class__Z__EnvQueryGenerator_ByInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ByInterface, SearchedInterfaceClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ByInterface, GenerateOnlyActorsInRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ByInterface, SearchRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ByInterface, SearchCenter, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ByInterface, 0x00C0);
		}

		// class UEnvQueryTest_CheckSlots : public UEnvQueryTest
		TEST_METHOD(Class__Z__EnvQueryTest_CheckSlots)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_CheckSlots, 0x01C0);
		}

		// class UEnvQueryTest_DamageableActors : public UEnvQueryTest
		TEST_METHOD(Class__Z__EnvQueryTest_DamageableActors)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_DamageableActors, 0x01C0);
		}

		// class UEnvQueryTest_ValidTarget : public UEnvQueryTest
		TEST_METHOD(Class__Z__EnvQueryTest_ValidTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_ValidTarget, 0x01C0);
		}

		// class ALootCrate : public AActor
		TEST_METHOD(Class__Z__LootCrate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALootCrate, 0x0328);
		}

		// class UNavArea_Climb : public UNavArea
		TEST_METHOD(Class__Z__NavArea_Climb)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Climb, 0x0048);
		}

		// class UNavArea_DynamicObstacle : public UNavArea
		TEST_METHOD(Class__Z__NavArea_DynamicObstacle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_DynamicObstacle, 0x0048);
		}

		// class UNavArea_Jump : public UNavArea
		TEST_METHOD(Class__Z__NavArea_Jump)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Jump, 0x0048);
		}

		// class UNavArea_NoSprinting : public UNavArea
		TEST_METHOD(Class__Z__NavArea_NoSprinting)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_NoSprinting, 0x0048);
		}

		// class AProxyPlayerCharacter : public ACharacter
		TEST_METHOD(Class__Z__ProxyPlayerCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProxyPlayerCharacter, UnknownData_V9RJ, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProxyPlayerCharacter, SpringArm, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProxyPlayerCharacter, CameraComp, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProxyPlayerCharacter, bDead, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProxyPlayerCharacter, UnknownData_ZFH9, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProxyPlayerCharacter, Health, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProxyPlayerCharacter, AISlotManager, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProxyPlayerCharacter, 0x0760);
		}

		// class UQueryContext_BaseZ : public UEnvQueryContext
		TEST_METHOD(Class__Z__QueryContext_BaseZ)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQueryContext_BaseZ, 0x0028);
		}

		// class UQueryContext_AllPlayers : public UQueryContext_BaseZ
		TEST_METHOD(Class__Z__QueryContext_AllPlayers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQueryContext_AllPlayers, 0x0028);
		}

		// class UQueryContext_PlayerContext : public UQueryContext_BaseZ
		TEST_METHOD(Class__Z__QueryContext_PlayerContext)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQueryContext_PlayerContext, 0x0028);
		}

		// class URoundInterface : public UInterface
		TEST_METHOD(Class__Z__RoundInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URoundInterface, 0x0028);
		}

		// class USlotSystemInterface : public UInterface
		TEST_METHOD(Class__Z__SlotSystemInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlotSystemInterface, 0x0028);
		}

		// class AZAICharacter : public ABaseAICharacter
		TEST_METHOD(Class__Z__ZAICharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, CosmeticId, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, UnknownData_VGRG, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, Properties, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, OnKnockBack, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, KnockBackDelay, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, UnknownData_GKMD, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, VehicleClass, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, bIsDead, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, UnknownData_2DZ6, 0x07A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, KnockBackState, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, UnknownData_M1X9, 0x07B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, LandedDelayTime, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, bDelayedAirCollisions, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, UnknownData_T5N0, 0x07CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, AIControllerState, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, UnknownData_8DJV, 0x07D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, AITarget, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, AttackingState, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, UnknownData_GUKA, 0x07E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, PoolAttackDelay, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, ClimbingState, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, UnknownData_JFZ1, 0x0805);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, RandomSprintDelayCheckTime, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, RandomSprintChance, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, bIsSprinting, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, UnknownData_XSA6, 0x0811);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, StopSprintingDistance, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, AttackRange, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, CapsuleWidth, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, CapsuleLength, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, DamageToPlayer, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, DamageToObjects, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAICharacter, UnknownData_S9WL, 0x082C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZAICharacter, 0x0830);
		}

		// class AZAIController : public ABaseAIController
		TEST_METHOD(Class__Z__ZAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, OnTargetSelected, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, OnAIStateChanged, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, OnAIJumpTo, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, ClaimedNavLinks, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, UnknownData_AK6R, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, SelectedTarget, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, AIPlayState, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, UnknownData_3P5L, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, TargetPlayerSelectionQuery, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, BlackboardDataAsset, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, BehaviorTreeAsset, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, TargetSelectionQueryRequest, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, AcceptanceRadius, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, bIsClimbing, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, UnknownData_ZE2R, 0x0515);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, MinClimbDistanceCheck, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, CompairedMoveClimbDistanceCheck, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, BlackboardTargetKey, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, BlackboardUseEQSKey, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, BlackboardUsePoolOnDeath, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, BlackboardStateKey, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, UnknownData_9JJJ, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, MaxStuckTime, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, StuckSpeed, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, UnknownData_ROXN, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, StartJumpAnimationTimer, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, EndJumpAnimationTimer, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAIController, UnknownData_F9ZI, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZAIController, 0x05C0);
		}

		// class UZAIDataProvide_AIManager : public UAIDataProvider_QueryParams
		TEST_METHOD(Class__Z__ZAIDataProvide_AIManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZAIDataProvide_AIManager, 0x0040);
		}

		// class AZAISpawnZone : public AActor
		TEST_METHOD(Class__Z__ZAISpawnZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAISpawnZone, UnknownData_1VED, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAISpawnZone, MidPoint, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAISpawnZone, UnknownData_BP5N, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAISpawnZone, SpawnBoxExtent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZAISpawnZone, UnknownData_5CD5, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZAISpawnZone, 0x0380);
		}

		// class UZAnimInstance : public UAnimInstance
		TEST_METHOD(Class__Z__ZAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, UnknownData_MNHM, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, ForwardTime, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, SavedRotation, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, UnknownData_1MHL, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, SprintAnimations, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, ReferenceSpeed, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, MaxLeaningAngle, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, MaxLeanAngleDelta, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, LeaningExp, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, UnleaningStrength, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, AttackBlendExp, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, bMoving, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, bFalling, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, bRaging, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, bSprinting, 0x039B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, UnknownData_13F7, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, SprintAnimation, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, MoveRatioX, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, MoveRatioY, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, MoveRatio, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, SprintRootRotation, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, bShouldLookAt, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, UnknownData_7N52, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, LookAtTarget, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, AttackState, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, ClimbingState, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, UnknownData_6VOJ, 0x03D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, AttackAlpha, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, LeaningRatio, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZAnimInstance, UnknownData_EFKK, 0x03DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZAnimInstance, 0x03E0);
		}

		// class UZAnimNotify_Attack : public UAnimNotify
		TEST_METHOD(Class__Z__ZAnimNotify_Attack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZAnimNotify_Attack, 0x0038);
		}

		// class UZAnimNotify_FootStep : public UAnimNotify
		TEST_METHOD(Class__Z__ZAnimNotify_FootStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZAnimNotify_FootStep, 0x0038);
		}

		// class UZAnimNotify_VO : public UAnimNotify_PlaySound
		TEST_METHOD(Class__Z__ZAnimNotify_VO)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZAnimNotify_VO, 0x0058);
		}

		// class UZBaseDamageType : public UDamageType
		TEST_METHOD(Class__Z__ZBaseDamageType)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZBaseDamageType, 0x0040);
		}

		// class UZCharacterMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__Z__ZCharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZCharacterMovementComponent, UnknownData_4A25, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZCharacterMovementComponent, JumpLandingTimerDelay, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZCharacterMovementComponent, SprintAccelerationMultiplier, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZCharacterMovementComponent, SprintMaxSpeedMultiplier, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZCharacterMovementComponent, UnknownData_8IER, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZCharacterMovementComponent, OnLanded, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZCharacterMovementComponent, bCanSprint, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZCharacterMovementComponent, UnknownData_5IXI, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZCharacterMovementComponent, ClimbingTargetScale, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZCharacterMovementComponent, BaseBreakingFactor, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZCharacterMovementComponent, UnknownData_SW7T, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZCharacterMovementComponent, TimeTransitionScale, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZCharacterMovementComponent, UnknownData_JU9F, 0x0774);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZCharacterMovementComponent, 0x0780);
		}

		// class UZCheatManager : public UCheatManager
		TEST_METHOD(Class__Z__ZCheatManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZCheatManager, 0x0078);
		}

		// class UZNavLineBatchComponent : public ULineBatchComponent
		TEST_METHOD(Class__Z__ZNavLineBatchComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZNavLineBatchComponent, 0x05A0);
		}

		// class UZNavLinkComponent : public UNavLinkCustomComponent
		TEST_METHOD(Class__Z__ZNavLinkComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZNavLinkComponent, 0x01C8);
		}

		// class AZNavLinkProxy : public ANavLinkProxy
		TEST_METHOD(Class__Z__ZNavLinkProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy, ClaimedBy, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy, UnknownData_QRVG, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy, ClaimReleaseDelay, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy, UnknownData_J60H, 0x038C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZNavLinkProxy, 0x0390);
		}

		// class AZNavLinkProxy_Climb : public AZNavLinkProxy
		TEST_METHOD(Class__Z__ZNavLinkProxy_Climb)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy_Climb, LedgeAlignmentComponent, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZNavLinkProxy_Climb, 0x0398);
		}

		// class AZNavLinkProxy_Destructible : public AZNavLinkProxy
		TEST_METHOD(Class__Z__ZNavLinkProxy_Destructible)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy_Destructible, UnknownData_R8DP, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy_Destructible, AIDamageComponent, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy_Destructible, bDefaultState, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy_Destructible, UnknownData_K40H, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy_Destructible, SlotManager, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZNavLinkProxy_Destructible, 0x03B8);
		}

		// class AZNavLinkProxy_Jump : public AZNavLinkProxy
		TEST_METHOD(Class__Z__ZNavLinkProxy_Jump)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy_Jump, JumpArc, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy_Jump, bTracedPath, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy_Jump, bTraceHit, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy_Jump, UnknownData_0T9Y, 0x0396);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy_Jump, TraceStartPoint, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy_Jump, TraceApex, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy_Jump, TraceEndPoint, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZNavLinkProxy_Jump, UnknownData_FFMT, 0x03EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZNavLinkProxy_Jump, 0x03F0);
		}

		// class UZombieDamageType : public UZBaseDamageType
		TEST_METHOD(Class__Z__ZombieDamageType)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZombieDamageType, 0x0040);
		}

		// class AZombieRecastNavMesh : public ARecastNavMesh
		TEST_METHOD(Class__Z__ZombieRecastNavMesh)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZombieRecastNavMesh, 0x05A0);
		}

		// class UZPathFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__Z__ZPathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, UnknownData_L5M4, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, OwningZController, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, TargetSlotManager, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, ArcLineScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, SlowDistance, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, TotalFlockingScale, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, UnknownData_XA50, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, PursueDistanceOffset, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, PursueMinimumAlpha, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, PursueModifier, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, SeekRandomCircleRadius, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, SeekRandomCircleDistance, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, SeekRandomAngleRange, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, SeekTargetScale, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, UnknownData_6OXZ, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, RandomSeekScale, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, RandomSeekTimeMax, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, UnknownData_AL5F, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, RandomSeekChance, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, SeekRandomDistance, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, AvoidanceScale, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, MovementTraceSettings, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, MaxSprintingRotation, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZPathFollowingComponent, MaxJockeyRotation, 0x03A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZPathFollowingComponent, 0x03A8);
		}

		// class AZPlayerTestingController : public APlayerController
		TEST_METHOD(Class__Z__ZPlayerTestingController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZPlayerTestingController, 0x0688);
		}

		// class UZSpawn : public UActorComponent
		TEST_METHOD(Class__Z__ZSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, AIDirector, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, ZBodies, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, AutoSpawnTimerHandle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, AutoZSettings, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, ZAmountToSpawn, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, ZAlive, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, AIDirectorClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, MaxZBodies, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, CashPerZKill, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, ZSpawnQuery, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, LootCrateTable, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, LootCrateEQS, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, LootCrateToSpawn, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, OnZKilled, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZSpawn, OnAutoSpawnFinished, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZSpawn, 0x0178);
		}

		// class USteamVRInputDeviceFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SteamVRInputDevice__SteamVRInputDeviceFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamVRInputDeviceFunctionLibrary, 0x0028);
		}

		// class USteamVRTrackingReferences : public UActorComponent
		TEST_METHOD(Class__SteamVRInputDevice__SteamVRTrackingReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamVRTrackingReferences, OnTrackedDeviceActivated, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamVRTrackingReferences, OnTrackedDeviceDeactivated, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamVRTrackingReferences, ActiveDevicePollFrequency, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamVRTrackingReferences, TrackingReferenceScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamVRTrackingReferences, TrackingReferences, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamVRTrackingReferences, UnknownData_1IDP, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamVRTrackingReferences, 0x0148);
		}

		// class UAndroidPermissionCallbackProxy : public UObject
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, OnPermissionsGrantedDynamicDelegate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, UnknownData_KU95, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionCallbackProxy, 0x0048);
		}

		// class UAndroidPermissionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionFunctionLibrary, 0x0028);
		}

		// class UZFemale_AnimBlueprint_C : public UZAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ZFemale_AnimBlueprint__ZFemale_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, UberGraphFrame, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_Root_C359B65F4A0F945C31183AA39B7FCAF8, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_LocalToComponentSpace_7A77D78D4532F9F9BA697BA8CBB0CC79, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, UnknownData_VLQ9, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_LookAt_1C667E2346D81098AFBD02A71779ACC8, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_ComponentToLocalSpace_123C58F8481491F7369B87BC19A5C68F, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_Slot_87CEAF3048F319555A2E82BB1ABE298F, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_TransitionResult_7F31DA48452FF6E13F5D9B8D9B3565B0, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_TransitionResult_CE22FEEE408B21EFB55DAD8B65A700C6, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_TransitionResult_91507B9E46B816BAD1F4E4AEAC2A6164, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_TransitionResult_CE611AA24338A0BCAA79699E395855FB, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_SequencePlayer_32776FE74AB9FF523B52BA869B8474F1, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_StateResult_90EBCE8343E7AFAB91520B8EC2C2ECC8, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_SequencePlayer_9C123A974C39AE0D16942C986AB20CF5, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_StateResult_E6725443427D1569780B699AAD3D2B01, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_RandomPlayer_730B5CFF4353AB2A534ADC963D0145E4, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_StateResult_5BA49BE44C7C2F33EE4D8D86C97F2105, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_StateMachine_65658EB443510E5F40058E9736A63897, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_EE8A701F4ED19E2BBE7551AF913A47D6, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_TransitionResult_1A16FA374E3D69FFC14A7AA7CD3AF837, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_TransitionResult_F46A1E6B489103907CA4C5BA5FE385CD, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_TransitionResult_D0B963454CB36EFDB818689B8C34C8F0, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_TransitionResult_A13A0B1B41BEC9BF1BD73DA991BAD622, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_SequencePlayer_73E765714C5825622195BFBDAA088CA2, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_ModifyBone_AC76B0D94784A5763135EAB6673D0CF2, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_ComponentToLocalSpace_50E72FC246BEAEDCC8D0AF96FC6D3923, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_LocalToComponentSpace_C78AF2254C3D671209DF229AA31DCBC7, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_StateResult_BE6398614638C8226C5B51AE51CF873E, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_ComponentToLocalSpace_71F332F740F474386645F8A07904835A, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_ModifyBone_5B8ADB0045D8D131C4507EB44AD73558, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_LocalToComponentSpace_6D208AB54F948B662C4A8EB1F6AF454C, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_F864CF6345846ACBA9CF2281F0DF3BAC, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_StateResult_0073695A478AF15120AE39A706CF9A98, 0x1338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_ComponentToLocalSpace_51543EB64A65E3BE63977DAA47A5AD86, 0x1378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_ModifyBone_2B0FD4B8461A1788E26CE69317998E0C, 0x13B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_LocalToComponentSpace_29D7365D422207D1F658F3B8B324E786, 0x14F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_SequencePlayer_F2E961D64DFD7D27731CDC86C21DB7E9, 0x1530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_StateResult_F2DBECD04CEB572799C3AE99AFB34C3B, 0x15D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_StateMachine_498AB7CC4FB1BBF482DE1BB048D4E8EF, 0x1610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_StateResult_86DDA9644FD591F9E83111A2237DD45B, 0x16F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_StateResult_A4C4B43A4DD966E4601450886E85188A, 0x1730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZFemale_AnimBlueprint_C, AnimGraphNode_StateMachine_9066098943F26D55C9E1D5B3F9249141, 0x1770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZFemale_AnimBlueprint_C, 0x1850);
		}

		// class UBuildPatchManifest : public UObject
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_CP2D, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0120);
		}

		// class UEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__EyeTracker__EyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeTrackerFunctionLibrary, 0x0028);
		}

		// class USoldierSkin_NT_C : public USoldierSkin
		TEST_METHOD(BlueprintGeneratedClass__SoldierSkin_NT__SoldierSkin_NT_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoldierSkin_NT_C, 0x0198);
		}

		// class UZMale_AnimBlueprint_C : public UZAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ZMale_AnimBlueprint__ZMale_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, UberGraphFrame, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_Root_E28A294B46A3B9CAD9009F8ABA7E698E, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_F731BE2042AFF45C7E98E0A5D06BF44F, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_586F142544E9C55F1D658E9C7A7B9006, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_A48B4FA2419CCDE96A5F399DFB86BABC, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_FBAF2A3C40CAE46158CB2ABA4297A96A, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_SequencePlayer_9D739B3D4990E1277AA9E9BCEB6AEC5F, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_StateResult_4D9C9F304FE53BE07402ED98BC535983, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_SequencePlayer_EFAD8D8C406583DC0283679E184FA2AF, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_StateResult_ACE4181E4AF06396836100B0A7F1DA88, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_RandomPlayer_42284971416E760633588DAEADB7B065, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_StateResult_E81B36204285D4BA92BBFEA0B193A5C4, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_StateMachine_8D83DF114D650ED8A3DCA1A08A192095, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_LayeredBoneBlend_281BB2A740748B2BF47B7FA6612ADB20, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_0561D86D4A8C712F9895F48ABF165F2B, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_B10D62604456A41D6E915AA679579F08, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_13F2CC6D47F83641D21F0DA3C8BCB2C2, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_TransitionResult_6556509D46818C027ADBC4B726438DC0, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_SequencePlayer_D2A8B3A245476B4D300EF09DDB1C118F, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_ModifyBone_EC41A89E40B2D680AD40818910E43E55, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_ComponentToLocalSpace_538CD15E4930380E328A128FF825C70F, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_LocalToComponentSpace_8C1AB63C4E4D244483A614A6F2B1A495, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_StateResult_DE9AB98E495D75F9896A83B5841A5AE5, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_ComponentToLocalSpace_F43BAFE54F0991F676D3D5B8FF4A674E, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_ModifyBone_1FD6C45C46C27E56E4375E954F8862C9, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_LocalToComponentSpace_F3BD94B747D342A693221488DBAE8A26, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_B10E744A4089DC67E21481BD286FAA53, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_StateResult_05C517C849A2E6840CDFAD88F5943948, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_ComponentToLocalSpace_DC996096424B5578B5E3A7A6ADE93858, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_ModifyBone_CFC8C8934062F6EF9B2801BCBB2AAE93, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_LocalToComponentSpace_C84DF48B40D9DA490BA04DB3C0701775, 0x11E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_SequencePlayer_9E71223A406526519CD197B2B1CD65B6, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_StateResult_D2BF39C5489FFFEB23F4E1ADEB0FD306, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_StateMachine_AE9DCA0249BE246BF5D27D83F361807F, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_StateResult_A7009FAE42F9A7238A68CD87CA251A90, 0x13E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_StateResult_EA44B7254E888D14047D91AA5B9210D2, 0x1420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_StateMachine_C3756A51484A3EE6A59F948BF23D7455, 0x1460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_LocalToComponentSpace_2215866B478ACFB218257F92699753BD, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_LookAt_97BBFD45428F419C257A458C0B024E09, 0x1580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_ComponentToLocalSpace_DA6CC4FA4133AF48943E8A932850230A, 0x17A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZMale_AnimBlueprint_C, AnimGraphNode_Slot_531824A54BE3B2E347915A8374056831, 0x17E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZMale_AnimBlueprint_C, 0x1848);
		}

		// class UObject
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0028);
		}

		// class UInterface : public UObject
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0028);
		}

		// class UGCObjectReferencer : public UObject
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_GIGN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0060);
		}

		// class UTextBuffer : public UObject
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_KMZE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0050);
		}

		// class UField : public UObject
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0030);
		}

		// class UStruct : public UField
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptObjectReferences, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x0088);
		}

		// class UScriptStruct : public UStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_OCLH, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x0098);
		}

		// class UPackage : public UObject
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_7LFJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x0090);
		}

		// class UClass : public UStruct
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_BYJ1, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0208);
		}

		// class UFunction : public UStruct
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RepOffset, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_OHDK3BWMVN, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_VKME4QPOQ9, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00B8);
		}

		// class UDelegateFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00B8);
		}

		// class UDynamicClass : public UClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_7376, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x0270);
		}

		// class UPackageMap : public UObject
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_MIUS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E0);
		}

		// class UEnum : public UField
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_KYJM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0060);
		}

		// class UProperty : public UField
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_MKVI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0070);
		}

		// class UEnumProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_10HO, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0080);
		}

		// class ULinkerPlaceholderClass : public UClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_XVAO, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x03C0);
		}

		// class ULinkerPlaceholderExportObject : public UObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_1DOY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00F0);
		}

		// class ULinkerPlaceholderFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_J8IR, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x0270);
		}

		// class UMetaData : public UObject
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_N9EI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x00C8);
		}

		// class UObjectRedirector : public UObject
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_ZJ4F, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0030);
		}

		// class UArrayProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_LO42, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0078);
		}

		// class UObjectPropertyBase : public UProperty
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_4DZ2, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0078);
		}

		// class UBoolProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_UFHG, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0078);
		}

		// class UNumericProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0070);
		}

		// class UByteProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_8BLL, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0078);
		}

		// class UObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0078);
		}

		// class UClassProperty : public UObjectProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_2TEI, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0080);
		}

		// class UDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDelegateProperty, UnknownData_46JL, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0078);
		}

		// class UDoubleProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0070);
		}

		// class UFloatProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0070);
		}

		// class UIntProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0070);
		}

		// class UInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0070);
		}

		// class UInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0070);
		}

		// class UInt8Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0070);
		}

		// class UInterfaceProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_Q19M, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0078);
		}

		// class ULazyObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0078);
		}

		// class UMapProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_GMTS, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x00A8);
		}

		// class UMulticastDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_6BDJ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0078);
		}

		// class UNameProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0070);
		}

		// class USetProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_1ITX, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x0098);
		}

		// class USoftObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0078);
		}

		// class USoftClassProperty : public USoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_NVDD, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0080);
		}

		// class UStrProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0070);
		}

		// class UStructProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_1BSL, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0078);
		}

		// class UUInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0070);
		}

		// class UUInt32Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0070);
		}

		// class UUInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0070);
		}

		// class UWeakObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0078);
		}

		// class UTextProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0070);
		}

		// class UVRAsyncLoader : public UActorComponent
		TEST_METHOD(Class__VRFramework__VRAsyncLoader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAsyncLoader, UnknownData_YCVK, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAsyncLoader, LoadedObjects, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRAsyncLoader, 0x01D8);
		}

		// class UVRAvatarAnimInstance : public UAnimInstance
		TEST_METHOD(Class__VRFramework__VRAvatarAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, UnknownData_LCB5, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, SpeedX, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, SpeedY, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, bMoving, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, bFlying, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, bFalling, 0x0366);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, bCrouched, 0x0367);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, SmoothJointExp, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, LeftHandLocation, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, LeftHandLocationOffset, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, LeftHandRotation, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, LeftHandRotationOffset, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, LeftHandJoint, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, LeftHandJointSmooth, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, RightHandLocation, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, RightHandLocationOffset, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, RightHandRotation, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, RightHandRotationOffset, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, RightHandJoint, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, RightHandJointSmooth, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, HeadLocation, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, HeadRotation, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, HeadRotationYawOnly, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, LookAtLocation, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, LookAtDistance, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, LookAtHeightOffset, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, bDebugLookAt, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, UnknownData_AK7T, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, PelvisHeight, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, PelvisHeightOffset, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, MinPelvisHeight, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, EyeLookAtLocation, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, EyeLookAtAlpha, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, UnknownData_RMA8, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, EyeLookAtTarget, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, ChangeTargetInterval, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, EyeLidRatio, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, EyeLidCurve, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, JawRatio, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, UnknownData_591R, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, JawOsilationCurve, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, EyeLidSequence, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarAnimInstance, UnknownData_F8XR, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRAvatarAnimInstance, 0x04A0);
		}

		// class UVRAvatarComponent : public USkeletalMeshComponent
		TEST_METHOD(Class__VRFramework__VRAvatarComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarComponent, Pawn, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarComponent, LastLocation, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarComponent, LastRotation, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarComponent, UnknownData_5U5H, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarComponent, YawOffset, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarComponent, FrontalOffset, 0x0B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarComponent, InterpSpeed, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarComponent, InterpRotationSpeed, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarComponent, Velocity, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRAvatarComponent, LastDistanceCheckTime, 0x0B6C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRAvatarComponent, 0x0B70);
		}

		// class UVRBulletDamageType : public UDamageType
		TEST_METHOD(Class__VRFramework__VRBulletDamageType)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRBulletDamageType, 0x0040);
		}

		// class AVRBullet : public AActor
		TEST_METHOD(Class__VRFramework__VRBullet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, DummyFX, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, UnknownData_MPDL, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, ImpactPrimitive, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, UnknownData_DKQK, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, OnBulletHit, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, SpawnLocation, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, HitLocation, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, Shooter, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, bImpacted, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, UnknownData_XDBT, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, GunClass, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, Collision, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, BuzzingVolume, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, ProjectileMovement, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, bPenetrated, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, bSuppressed, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, UnknownData_KT5H, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, Damage, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, VehicleDamage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, BlockDamagePercentage, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, bPassiveDamage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, UnknownData_4EH2, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, Penetration, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, Falloff, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, Drag, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, bPenetratesThinSurfaces, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, bShouldSlow, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, UnknownData_6964, 0x03E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, EffectScale, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, ImpactForce, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, MaxLifeSpan, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, bDeferImpactForce, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, UnknownData_40ZG, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, BuzzingSound, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, BuzzingPenetrationSound, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, PenetrationSound, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, DefaultImpactFX, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, HeadshotImpactFX, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, FleshImpactFX, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, GlassImpactFX, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, MetalImpactFX, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, WoodImpactFX, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, ConcreteImpactFX, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, CarpetImpactFX, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, FabricImpactFX, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, WaterImpactFX, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRBullet, DirtImpactFX, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRBullet, 0x04C0);
		}

		// class AVRBulletManager : public AInfo
		TEST_METHOD(Class__VRFramework__VRBulletManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRBulletManager, 0x0328);
		}

		// class UVRBulletPenetrationInterface : public UInterface
		TEST_METHOD(Class__VRFramework__VRBulletPenetrationInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRBulletPenetrationInterface, 0x0028);
		}

		// class UVRCameraComponent : public UCameraComponent
		TEST_METHOD(Class__VRFramework__VRCameraComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRCameraComponent, 0x0790);
		}

		// class AVRController : public AActor
		TEST_METHOD(Class__VRFramework__VRController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, Mesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, MotionController, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, GrabVolume, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, GrabConstraint, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, TeleportMesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, TeleportLineMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, Stick, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, UnknownData_18ZS, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, SmoothVelocity, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, Velocity, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, LastLocation, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, ThrowVelocity, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, TouchPosition, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, UnknownData_HTOS, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, bTeleportEnabled, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, Mode, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, bCustomTriggerRatio, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, bDisableGrab, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, bTeleportMode, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, UnknownData_O7HH, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, TeleportLocation, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, TeleportRotation, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, bValidTeleportLocation, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, UnknownData_G58B, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, PlayArea, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, Grabbed, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, bGripHoldMode, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, UnknownData_OZZT, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, TriggerRatio, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, GripRatio, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, GripForceRatio, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, bGripped, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, bTriggered, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, HandType, 0x040A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, UnknownData_H167, 0x040B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, Handle, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, bPlayAreaTeleportOnly, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, UnknownData_GJ47, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, ParabolaOriginOffset, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, ParabolaAngle, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, ParabolaIterations, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, ParabolaSides, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, ParabolaRadius, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, ParabolaDistance, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, ParabolaLag, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, ThrowOffset, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, UnknownData_EEA0, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, HapticLeft, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, HapticRight, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, MenuClass, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, MenuSpawnDistance, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, MenuSpawnHeight, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, HolsterSound, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, UnHolsterSound, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, bGenerateQuadrantEvents, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, UnknownData_0XBS, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, Button1Haptic, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, Button2Haptic, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, InteractBeginHaptic, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, InteractEndHaptic, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, SlowPulseHaptic, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, GenericHapticEffect, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, AvatarHandOffset, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, AvatarHandRotationOffset, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, OnGripChanged, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, OnTriggerChanged, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, OnQuadrantPressed, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, OnControllerModeChanged, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, bInputReady, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, UnknownData_0WPZ, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, ClicksPerSecond, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, ClickResetTime, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRController, UnknownData_QPBT, 0x051C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRController, 0x0520);
		}

		// class UVRControllerAnimInstance : public UAnimInstance
		TEST_METHOD(Class__VRFramework__VRControllerAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, UnknownData_BV95, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, Sequence, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, SequenceOverride, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, SequenceRatio, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, TriggerRatio, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, GripRatio, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, bGripped, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, bRightHand, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, UnknownData_LF9M, 0x037E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, HeadLocation, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, ShoulderLocation, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, JointLocation, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, Scale, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, DefaultSequence, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, ShoulderOffset, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRControllerAnimInstance, JointOffset, 0x03C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRControllerAnimInstance, 0x03D0);
		}

		// class UVRDynamicHelperComponent : public UActorComponent
		TEST_METHOD(Class__VRFramework__VRDynamicHelperComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRDynamicHelperComponent, UnknownData_TMAD, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRDynamicHelperComponent, DynamicMesh, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRDynamicHelperComponent, Component, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRDynamicHelperComponent, ComponentName, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRDynamicHelperComponent, bReplaceMesh, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRDynamicHelperComponent, bUseReplaceByLocation, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRDynamicHelperComponent, bUseReplaceByRotation, 0x013A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRDynamicHelperComponent, UnknownData_LPMB, 0x013B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRDynamicHelperComponent, ReplaceLocationThreashold, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRDynamicHelperComponent, ReplaceRotationThereashold, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRDynamicHelperComponent, UnknownData_SQNM, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRDynamicHelperComponent, 0x0150);
		}

		// class AVRGameMode : public AGameMode
		TEST_METHOD(Class__VRFramework__VRGameMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRGameMode, 0x0410);
		}

		// class UVRGrabComponent : public UActorComponent
		TEST_METHOD(Class__VRFramework__VRGrabComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGrabComponent, bSoftConstraint, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGrabComponent, UnknownData_NT9K, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRGrabComponent, 0x00F8);
		}

		// class UVRGrabInterface : public UInterface
		TEST_METHOD(Class__VRFramework__VRGrabInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRGrabInterface, 0x0028);
		}

		// class AVRItem : public AActor
		TEST_METHOD(Class__VRFramework__VRItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, UnknownData_MSLT, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, PickComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, UnknownData_IFFP, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, LastReceviedParent, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, LastReceviedParentSlot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, UnknownData_9ZV3, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, LastReceviedController, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, UnknownData_2GEA, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, Controller, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, Parent, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, ParentSlot, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, UnknownData_CAT4, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, ItemState, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, SelectionComponent, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bPhysicsAwake, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bInventoryDisabled, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bMutePickSound, 0x03EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bPickDisabled, 0x03EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, BlockDuration, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bCanBePocketed, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bAllowGrabByGrip, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bAllowPickByTrigger, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bAllowPickByGrip, 0x03F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, UnknownData_43N7, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, PickSound, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bAutoPickOffset, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, UnknownData_72YO, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, PickSpaceComponent, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, DropImpulseMul, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bFlipRollPick, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bFlipYawPick, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bFlipYAxisPick, 0x0416);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, UnknownData_8TKG, 0x0417);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, PickOffset, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, PickRotationOffset, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, Sequence, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, SelfDestroyDelay, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bNerverDestroyForInactivity, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bCanHideInInventory, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bDestroyChildren, 0x043E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, UnknownData_W66X, 0x043F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, AvatarHandOffset, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, AvatarHandRotationOffset, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, bSkipSnapshot, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, UnknownData_76VL, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, InventoryOffset, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, ForceSlot, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, UnknownData_E5RO, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, CustomInventoryOffsets, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, UnknownData_4OIC, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, OnPicked, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItem, OnDropped, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRItem, 0x04D0);
		}

		// class AVRGun : public AVRItem
		TEST_METHOD(Class__VRFramework__VRGun)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bInvertRollRecoil, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_K69W, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, RecoilRatio, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ReloadCooldown, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_WSF0, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, BasisBlendAlpha, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, DynamicRecoil, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, DynamicRecoilSaved, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, CounterRecoilTimer, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, DynamicPivotRecoil, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, DynamicPivotRecoilSaved, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, CounterPivotRecoilTimer, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bChargingLocked, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_I32B, 0x053D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, BoltReleaseTimer, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_5OG8, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, BurstCount, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, BurstDelayTimer, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_1S5U, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, StateProxy, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_XBDL, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, MuzzleFlashComp, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_P1SO, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, State, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, PreviousOwner, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ChargingHandle, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, FireRateTimer, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, Recoil, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, SlideTimer, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bBoltLocked, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bTriggered, 0x0605);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bTriggerSnapped, 0x0606);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_3Y1U, 0x0607);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, SnapTrigger, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, SnapTriggerSmooth, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, Magazine, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, MagGrabRateMax, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bBulletInChamber, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bHammerReady, 0x061D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_Z1LR, 0x061E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, HammerRatio, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, GenericVector1, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, GenericVector2, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, GenericScalar1, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, GenericScalar2, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bGenericFlag1, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bGenericFlag2, 0x0645);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bGenericFlag3, 0x0646);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_KO7A, 0x0647);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bDisableCocking, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bBoltLockedTillAmmo, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bBoltLockManual, 0x064A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bChamberOnMagazine, 0x064B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_0WX0, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, StateClass, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, MuzzleSocket, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, MuzzleZeroBias, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_HZ48, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, NormalizedRecoilCurve, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, RecoilCurveScale, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, RecoilAngleMul, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, RecoilAngleLateralMul, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, RecoilTraslationMul, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bUsePivotedRecoil, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_JCFL, 0x0681);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, RecoilPivotOffset, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, PivotRecoilMul, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, PivotRecoilLateralMul, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, CounterPivotRecoilDuration, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_4XMM, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, CounterPivotRecoilCurve, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, CokingThreashold, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ReChamberThreashold, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, FireThreashold, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, FireRate, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, FireMode, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_RQ0X, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, HandlingSound, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bOpenBolt, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_K0Q8, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, SlideReleaseTime, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bSkipFirstCock, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_WWVO, 0x06D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, FireDelay, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, AdditionalFireModes, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, BurstDelay, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bLockBolt, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bUngrabBoltOnDrop, 0x06ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_SQEI, 0x06EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, BoltReleaseCooldown, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bStaticSlider, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_OPXX, 0x06F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ChargingHandleAttachName, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, BulletClass, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, BulletSpray, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, BulletSpraySpread, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bUseEvenSpread, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_CVTK, 0x0711);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, EvenSpread, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, LimitedBulletSpraySpreadMul, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, RecoilLimitThreadshold, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, BulletSprayRecoilCurve, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, RecoilPerBullet, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, RecoilNormalizationRate, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, RecoilMul, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_5APR, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, RecoilCurve, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, RecoilPatternCurve, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, MagazineClass, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bManualMagazineRelease, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_MNZ2, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ManualReloadCooldown, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bNoMagazine, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bReloadChamberByMagazine, 0x0759);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bComplexTrigger, 0x075A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_49AX, 0x075B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ComplexTriggerDuration, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ComplexTriggerCurve, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bAutoUnchamber, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bTakeBulletOnQuickReload, 0x0769);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_AAOB, 0x076A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, BasisLerpRate, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bDynamicRecoil, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_VHT8, 0x0771);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, CounterRecoilDuration, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, bApplyRecoilPullback, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_DLS5, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, PullbackLerpExp, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, CounterRecoilPullback, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_0FDB, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, CounterRecoilCurve, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, CounterRecoilThreashold, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, CounterRecoilLimits, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, SmoothCounterRecoilLimitsExp, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, OptimizeSKTickInterval, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ShotSound, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ShotTailSound, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, SuppressedShotSound, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, SuppressedShotTailSound, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ShotSoundLQ, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ShotSoundLQ2D, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, SuppressedShotSoundLQ, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, SupressedShotSoundLQ2D, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ShotSourceBus, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, SuppressedShotSourceBus, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, LowAmmoThreashold, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_LLJ6, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, LowAmmoSound, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, TriggerSound, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ReleaseTriggerSound, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, BoltReleaseSound, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, BoltLockSound, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, CockSound, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ReloadSound, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, EjectMagazineSound, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, CycleFireModeSound, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, MuzzleFlashDuration, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, MuzzleFlashScale, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, MuzzleFlashOffset, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, UnknownData_EIUY, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, MuzzleFlash, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, MuzzleFlashLQ, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, MuzzleFlashSuppressed, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, MuzzleFlashSuppressedLQ, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, ShotHapticEffect, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRGun, LazyLoadedObjects, 0x0920);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRGun, 0x0930);
		}

		// class UVRGunAnimInstance : public UVRControllerAnimInstance
		TEST_METHOD(Class__VRFramework__VRGunAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, UnknownData_S4NG, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, bLoaded, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, FireMode, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, bBoltLocked, 0x03D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, UnknownData_WFT5, 0x03D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, RecoilTime, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, UnknownData_JXA4, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, RecoilFilterCurve, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, SlideTime, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, UnknownData_ZJ5Y, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, SlideFilterCurve, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, SlideBackDuration, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, bHideIronSight, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, bHideCompensator, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, UnknownData_DJC1, 0x03FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, ChargingHandleTime, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, HammerTime, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, SnapTrigger, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, SnapTriggerSmooth, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, ChamberState, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, UnknownData_JEKH, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, ActiveChamber, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, GenericVector1, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, GenericVector2, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, GenericScalar1, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, GenericScalar2, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, bGenericFlag1, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, bGenericFlag2, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, bGenericFlag3, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunAnimInstance, UnknownData_9X4L, 0x043B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRGunAnimInstance, 0x0440);
		}

		// class UVRGunState : public UActorComponent
		TEST_METHOD(Class__VRFramework__VRGunState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, Chambers, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, Bullets, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, ActiveChamber, 0x0102);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, bDirty, 0x0103);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, ChamberNum, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, bAutoIncrementChamber, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, bAutoEmptyChamber, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, bAutoChambering, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, UnknownData_4OUO, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, OnChamberStateChanged, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, OnDetonation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, OnBulletTaken, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, OnBulletPut, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, OnClientUpdate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, bReceivedData, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRGunState, UnknownData_RRMD, 0x0161);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRGunState, 0x0168);
		}

		// class AVRHand : public AVRController
		TEST_METHOD(Class__VRFramework__VRHand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRHand, FingerJoints, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRHand, LeftHandMesh, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRHand, LeftHandAnimBlueprint, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRHand, LeftHandRotation, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRHand, UnknownData_Q3B3, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRHand, RightHandMesh, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRHand, RightHandAnimBlueprint, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRHand, RightHandRotation, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRHand, HandPitch, 0x056C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRHand, 0x0570);
		}

		// class UVRHandAnimInstance : public UVRControllerAnimInstance
		TEST_METHOD(Class__VRFramework__VRHandAnimInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRHandAnimInstance, 0x03D0);
		}

		// class UVRHandleComponent : public UBoxComponent
		TEST_METHOD(Class__VRFramework__VRHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, UnknownData_KCPP, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, GrabbedBy, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, UnknownData_Q35N, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, SequenceRefComp, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, LinearRange, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, MinInput, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, MaxInput, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, bUseVectorInput, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, bUseRotation, 0x05E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, bInheritSocketRotation, 0x05E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, bApplyOffsetRelative, 0x05E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, bGrabByTrigger, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, bGripToggle, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, RotationType, 0x05EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, UnknownData_7NXR, 0x05EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, GrabSound, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, GrabSoundThreashold, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, UnknownData_0DYV, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, UngrabSound, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, UngrabSoundThreashold, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, bHapticEnabled, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, HapticMode, 0x060D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, UnknownData_M2H9, 0x060E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, HapticPulseDuration, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, HapticPulseStep, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, HapticInputReference, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, MinHapticAmp, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, MaxHapticAmp, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, UnknownData_JQNB, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, SequenceRefCompName, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, SequenceRefBone, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, SequenceRightHand, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, SequenceLeftHand, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, OnInputReceived, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, OnVectorInputReceived, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, OnRotationInputReceived, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, OnHandleGrab, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRHandleComponent, OnHandleUngrab, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRHandleComponent, 0x06D0);
		}

		// class AVRInventory : public AActor
		TEST_METHOD(Class__VRFramework__VRInventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, Pivot, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, Mesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, HeadPivot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, UnknownData_TA7N, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, QuickSlotVolumes, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, VestVolume, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, bRotating, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, UnknownData_J0R6, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, RotationExp, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, RotationAngleThreashold, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, Offset, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, RotationDelay, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, UnknownData_5YH3, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, GetSuccessSound, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, GetFailureSound, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, GetHaptic, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, PutSuccessSound, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, PutFailureSound, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, PutHaptic, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, VestActionSuccessSound, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, VestActionFailureSound, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, VestHaptic, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, LeanCurve, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, CrouchCurve, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, SlotFilters, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, DefaultSlotFilter, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventory, FilteredOutSound, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRInventory, 0x0448);
		}

		// class AVRInventoryLogic : public AVRItem
		TEST_METHOD(Class__VRFramework__VRInventoryLogic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventoryLogic, Slots, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRInventoryLogic, UnknownData_1PK2, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRInventoryLogic, 0x04F0);
		}

		// class UVRInventoryPivot : public USceneComponent
		TEST_METHOD(Class__VRFramework__VRInventoryPivot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRInventoryPivot, UnknownData_W3R6, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRInventoryPivot, 0x0240);
		}

		// class AVRItemController : public AVRController
		TEST_METHOD(Class__VRFramework__VRItemController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItemController, UnknownData_ILG1, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItemController, bPickupLerp, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItemController, bAllowItemUse, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItemController, UnknownData_VVCC, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItemController, SavedOldState, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItemController, UnknownData_324F, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItemController, State, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItemController, Pickup, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItemController, DropHoldDuration, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItemController, bHideMesh, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItemController, bSnapMesh, 0x066D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRItemController, UnknownData_X1ZY, 0x066E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRItemController, 0x0670);
		}

		// class AVRLadder : public AActor
		TEST_METHOD(Class__VRFramework__VRLadder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRLadder, ClimbSpeed, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRLadder, UnknownData_YGR4, 0x032C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRLadder, 0x0330);
		}

		// class AVRMagazine : public AVRItem
		TEST_METHOD(Class__VRFramework__VRMagazine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, InsertResetTimerHandle, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, MagSlideInterface, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, MagSlideInfo, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, MagazineAlpha, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, HapticAlpha, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, SlideMode, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, UnknownData_0ZUH, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, HandRelativeStartLocation, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, LastRootQuat, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, MagAngularVelocity, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, HandVelocity, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, StripperClip, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, bPlayedHalfSlideSound, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, UnknownData_VOSA, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, MagazineSkinClass, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, bJustEjected, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, UnknownData_ISCO, 0x0591);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, Bullets, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, Gun, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, bRecentlyReleased, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, bObliterated, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, UnknownData_2FTT, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, MaxBullets, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, InitialBullets, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, bForceFullMerge, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, bMergeAmmoCount, 0x05AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, UnknownData_WSHL, 0x05AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, NoInsertDelay, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, AmmoType, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, bFlipReleaseAlpha, 0x05B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, UnknownData_FPHO, 0x05B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, MagEjectMultiplier, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, InsertTime, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, MagSlideTime, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, bAllowMagSlap, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, UnknownData_R60A, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, SlapVelocityThreshold, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, SlapForwardThreshold, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, SlapReinsertTime, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, UnknownData_4JWS, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, StartMagSlideSound, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, MagSlideHalfSound, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, MagHalfSlideSoundThreshold, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, UnknownData_SLJA, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, MagSlideSequence, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, bEasyMagSlide, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, UnknownData_DTHQ, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, StripperClipMesh, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, StripperClipClass, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, EasySlideCurve, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, SlideHaptics, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, bMerging, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMagazine, UnknownData_D8KX, 0x0621);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRMagazine, 0x0630);
		}

		// class UVRMagazineSlotComponent : public UBoxComponent
		TEST_METHOD(Class__VRFramework__VRMagazineSlotComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, UnknownData_RHXD, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, MaxSlideDistance, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, HandExploitThreshold, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, Gun, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, bAllowRefill, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, bCockEnabled, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, bEmptyChamberOnly, 0x059A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, bPreventExtraInChamber, 0x059B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, UnknownData_B1D6, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, RefillSound, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, bMagSlideInsert, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, UnknownData_FYCP, 0x05A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, SlideStartSocket, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, SlideEndSocket, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, MagSlideAxis, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, bSlidePositive, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, UnknownData_CN8E, 0x05C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, ReloadSpeedMultiplier, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, SlideGoalThreshold, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, MagSlideBounds, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, MagGoalRotOffset, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMagazineSlotComponent, UnknownData_PERV, 0x05E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRMagazineSlotComponent, 0x05F0);
		}

		// class UVRMagSlideInterface : public UInterface
		TEST_METHOD(Class__VRFramework__VRMagSlideInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRMagSlideInterface, 0x0028);
		}

		// class AVRMenu : public AActor
		TEST_METHOD(Class__VRFramework__VRMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMenu, Pivot, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMenu, Widget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMenu, Controller, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMenu, Damage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRMenu, UnknownData_30KG, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRMenu, 0x0348);
		}

		// class UVRMotionControllerComponent : public UMotionControllerComponent
		TEST_METHOD(Class__VRFramework__VRMotionControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMotionControllerComponent, OculusRotationOffset, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMotionControllerComponent, UnknownData_HRZB, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMotionControllerComponent, Controller, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRMotionControllerComponent, UnknownData_2SEV, 0x0628);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRMotionControllerComponent, 0x0630);
		}

		// class UVRMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__VRFramework__VRMovementComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRMovementComponent, 0x0720);
		}

		// class AVROBBProxy : public AActor
		TEST_METHOD(Class__VRFramework__VROBBProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVROBBProxy, HeadCamera, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVROBBProxy, 0x0330);
		}

		// class AVRPawn : public ACharacter
		TEST_METHOD(Class__VRFramework__VRPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, Pivot, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, HeadCamera, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, UnknownData_43WQ, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, LatestSnapshot, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, UnknownData_PN2J, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, NetUpdateTimer, 0x09A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, UnknownData_ZKXK, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, SavedMaterials, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, OBBProxyInstance, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, UnknownData_VIQG, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, AvatarComp, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, LastPosition, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, UnknownData_ULTG, 0x09F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, InventoryLogic, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, Inventory, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, Ladder, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, VRControllerClass, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, bAdjustElevation, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, UnknownData_EJWU, 0x0A29);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, TeleportFadeDuration, 0x0A2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, bOOBEnabled, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, bReCenterRoomScale, 0x0A31);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, UnknownData_2SBP, 0x0A32);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, HeightOffsetScale, 0x0A34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, CenterOffset, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, bCameraClip, 0x0A44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, bTeleporting, 0x0A45);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, UnknownData_RK1L, 0x0A46);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, LeftController, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, RightController, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, BodyRotationLerpExp, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, UnknownData_8AH9, 0x0A5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, TouchpadInputCurve, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, bSkipTransformUpdate, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, bUseInventory, 0x0A69);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, UnknownData_N4QR, 0x0A6A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, InventoryClass, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, InventoryLogicClass, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, OBBSnapInterval, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, UnknownData_YAAW, 0x0A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, OBBMaterial, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, NetLerpExp, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, NetLerpAngularExp, 0x0A94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, NetUpdateInterval, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, UnknownData_MPTI, 0x0A9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, OnMenuPressed, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, OnTriggerPressed, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, OnGripPressed, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, OnTrackpadPressed, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, FakePlayerBehavior, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPawn, UnknownData_WGLG, 0x0AE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRPawn, 0x0AF0);
		}

		// class AVRPlayArea : public AActor
		TEST_METHOD(Class__VRFramework__VRPlayArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRPlayArea, Volume, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRPlayArea, 0x0330);
		}

		// class UVRPlayerEmulatorComponent : public UActorComponent
		TEST_METHOD(Class__VRFramework__VRPlayerEmulatorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, AimDeviation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, AimDeviationTarget, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, AimDeviationUpdateTimer, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, UnknownData_QI96, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, Pawn, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, UnknownData_JQI4, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, Pose, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, DesiredPose, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, bAim, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, UnknownData_EJJK, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, RotationSpeed, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, Accuracy, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, RotationMode, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, UnknownData_433R, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, FocusPoint, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, AimRotation, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, Rotation, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPlayerEmulatorComponent, RotationTarget, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRPlayerEmulatorComponent, 0x02C0);
		}

		// class UVRPocketComponent : public UStaticMeshComponent
		TEST_METHOD(Class__VRFramework__VRPocketComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPocketComponent, UUID, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPocketComponent, Pawn, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPocketComponent, bEnabled, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRPocketComponent, UnknownData_M2HT, 0x05F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRPocketComponent, 0x0600);
		}

		// class UVRSelectionComponent : public UActorComponent
		TEST_METHOD(Class__VRFramework__VRSelectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSelectionComponent, ProxyMeshes, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSelectionComponent, ProxyMeshMaterial, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSelectionComponent, bRecursive, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSelectionComponent, UnknownData_V38N, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSelectionComponent, MeshFilter, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSelectionComponent, bMeshFilterExclusive, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSelectionComponent, UnknownData_I9KP, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSelectionComponent, ForcedMasterPoseComponent, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRSelectionComponent, 0x0130);
		}

		// class UVRSkinInterface : public UInterface
		TEST_METHOD(Class__VRFramework__VRSkinInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRSkinInterface, 0x0028);
		}

		// class UVRSpectatorComponent : public UActorComponent
		TEST_METHOD(Class__VRFramework__VRSpectatorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSpectatorComponent, UnknownData_YDGY, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSpectatorComponent, LC, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSpectatorComponent, RC, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSpectatorComponent, bTwoPointGrab, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSpectatorComponent, UnknownData_WIJ9, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSpectatorComponent, Scale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSpectatorComponent, Yaw, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSpectatorComponent, MaxScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSpectatorComponent, ScaleExp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSpectatorComponent, UnknownData_H3SX, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSpectatorComponent, OnSpectatorScale, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRSpectatorComponent, OnSpectatorYaw, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRSpectatorComponent, 0x0150);
		}

		// class UVRStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__VRFramework__VRStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRStatics, 0x0028);
		}

		// class UVRStickComponent : public UWidgetInteractionComponent
		TEST_METHOD(Class__VRFramework__VRStickComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRStickComponent, Pointer, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRStickComponent, Line, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRStickComponent, PointerMesh, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRStickComponent, LineMesh, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRStickComponent, PointerScale, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRStickComponent, LineScale, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRStickComponent, Channel, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRStickComponent, UnknownData_GU7V, 0x0451);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRStickComponent, 0x0460);
		}

		// class AVRStripperClipCosmetic : public AActor
		TEST_METHOD(Class__VRFramework__VRStripperClipCosmetic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRStripperClipCosmetic, StripperClipMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRStripperClipCosmetic, EjectMultiplier, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVRStripperClipCosmetic, RandomDirMultiplier, 0x0334);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVRStripperClipCosmetic, 0x0338);
		}

		// class UMovieSceneCaptureProtocolBase : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_F4X1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, State, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, bFrameRequested, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_M9PP, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolBase, 0x0058);
		}

		// class UMovieSceneAudioCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneAudioCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioCaptureProtocolBase, 0x0058);
		}

		// class UNullAudioCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__NullAudioCaptureProtocol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullAudioCaptureProtocol, 0x0058);
		}

		// class UMasterAudioSubmixCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MasterAudioSubmixCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, Filename, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, UnknownData_AB4F, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterAudioSubmixCaptureProtocol, 0x0090);
		}

		// class UMovieSceneImageCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneImageCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneImageCaptureProtocolBase, 0x0058);
		}

		// class UCompositionGraphCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, IncludeRenderPasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bCaptureFramesInHDR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_2J8Y, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, HDRCompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, CaptureGamut, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_HJZD, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bDisableScreenPercentage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_I4IE, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterialPtr, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_VKIP, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureProtocol, 0x00C0);
		}

		// class UFrameGrabberProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocol, UnknownData_DCL4, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocol, 0x0068);
		}

		// class UImageSequenceProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol, UnknownData_ZQSG, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol, 0x00D8);
		}

		// class UCompressedImageSequenceProtocol : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompressedImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, CompressionQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, UnknownData_DVZU, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompressedImageSequenceProtocol, 0x00E0);
		}

		// class UImageSequenceProtocol_BMP : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_BMP)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_BMP, 0x00D8);
		}

		// class UImageSequenceProtocol_PNG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_PNG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_PNG, 0x00E0);
		}

		// class UImageSequenceProtocol_JPG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_JPG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_JPG, 0x00E0);
		}

		// class UImageSequenceProtocol_EXR : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_EXR)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, bCompressed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, CaptureGamut, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, UnknownData_4Y4W, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_EXR, 0x00E8);
		}

		// class UMovieSceneCaptureInterface : public UInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0028);
		}

		// class UMovieSceneCapture : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_94FP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocolType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocolType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocol, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_ZCMA, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_35JG, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x01F0);
		}

		// class ULevelCapture : public UMovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, bAutoStartCapture, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_FB9F, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_HLCK, 0x020C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0210);
		}

		// class UMovieSceneCaptureEnvironment : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0028);
		}

		// class UUserDefinedCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, UnknownData_OVQ6, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedCaptureProtocol, 0x00E0);
		}

		// class UUserDefinedImageCaptureProtocol : public UUserDefinedCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedImageCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, Format, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, bEnableCompression, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, UnknownData_QLRI, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, CompressionQuality, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedImageCaptureProtocol, 0x00E8);
		}

		// class UVideoCaptureProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, bUseCompression, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_AH13, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, CompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, VideoCodec, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_KK57, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureProtocol, 0x0090);
		}

		// class UFoliageInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, UnknownData_MJU1, 0x0788);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x0790);
		}

		// class UFoliageStatistics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0028);
		}

		// class UFoliageType : public UObject
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_8DFN, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_92H7, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_2S91, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_H2KK, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_MEGH, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_LKCP, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_NR1G, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_0QM3, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_WV13, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightmapType, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_78CY, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_Z1U0, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightingChannels, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_FGY7, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_S3DQ, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_0K1L, 0x02BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_V0TF, 0x034E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x0350);
		}

		// class UFoliageType_InstancedStaticMesh : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x0370);
		}

		// class AInstancedFoliageActor : public AActor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_HQZW, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x0378);
		}

		// class AInteractiveFoliageActor : public AStaticMeshActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_JV13, 0x0394);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x0398);
		}

		// class UInteractiveFoliageComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_9ZON, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x05F0);
		}

		// class AProceduralFoliageBlockingVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageBlockingVolume, 0x0368);
		}

		// class UProceduralFoliageComponent : public UActorComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_QLYD, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x0118);
		}

		// class UProceduralFoliageSpawner : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, RandomSeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_4RCD, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, bNeedsSimulation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_V319, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0070);
		}

		// class UProceduralFoliageTile : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_HUPF, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_4JK8, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0158);
		}

		// class AProceduralFoliageVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageVolume, ProceduralComponent, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageVolume, 0x0368);
		}

		// class UOculusFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OculusHMD__OculusFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusFunctionLibrary, 0x0028);
		}

		// class UOculusHMDRuntimeSettings : public UObject
		TEST_METHOD(Class__OculusHMD__OculusHMDRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, bAutoEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, UnknownData_B7VW, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, SplashDescs, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusHMDRuntimeSettings, 0x0040);
		}

		// class UOculusSceneCaptureCubemap : public UObject
		TEST_METHOD(Class__OculusHMD__OculusSceneCaptureCubemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusSceneCaptureCubemap, UnknownData_U0XJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusSceneCaptureCubemap, CaptureComponents, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusSceneCaptureCubemap, UnknownData_ZL0Y, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusSceneCaptureCubemap, 0x0090);
		}

		// class UMediaSource : public UObject
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_O6O4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0030);
		}

		// class UBaseMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, PlayerName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0038);
		}

		// class UFileMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_MFGU, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x0060);
		}

		// class UMediaBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0028);
		}

		// class UMediaPlayer : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_IOUA, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_EGBN, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_WQ9W, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, TimeDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, ViewRotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_60PR, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_LE5B, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0138);
		}

		// class UMediaPlaylist : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, Items, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0038);
		}

		// class UMediaSoundComponent : public USynthComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_RZSF, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, DynamicRateAdjustment, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_XZWF, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentFactor, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentRange, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_0K5S, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_KHD0, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x0660);
		}

		// class UMediaTexture : public UTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_K3VC, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_L3VF, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_4W3K, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x0140);
		}

		// class UPlatformMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0038);
		}

		// class UStreamMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x0048);
		}

		// class UTimeSynchronizableMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__TimeSynchronizableMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, bUseTimeSynchronization, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, UnknownData_YKKF, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizableMediaSource, 0x0040);
		}

		// class ABP_FlyingHelmet_German_C : public ABP_FlyingHelmet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlyingHelmet_German__BP_FlyingHelmet_German_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FlyingHelmet_German_C, 0x0348);
		}

		// class UAudioCurveSourceComponent : public UAudioComponent
		TEST_METHOD(Class__FacialAnimation__AudioCurveSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSourceBindingName, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSyncOffset, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_I8PN, 0x065C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCurveSourceComponent, 0x0690);
		}

		// class UTTTSkin_Detective_C : public USoldierSkin
		TEST_METHOD(BlueprintGeneratedClass__TTTSkin_Detective__TTTSkin_Detective_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTTTSkin_Detective_C, 0x0198);
		}

		// class ABP_FlyingHelmet_Svt_C : public ABP_FlyingHelmet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlyingHelmet_Svt__BP_FlyingHelmet_Svt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FlyingHelmet_Svt_C, 0x0348);
		}

		// class ABP_NavObject_C : public ADynamivNavArea
		TEST_METHOD(BlueprintGeneratedClass__BP_NavObject__BP_NavObject_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NavObject_C, Sphere, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_NavObject_C, DefaultSceneRoot, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_NavObject_C, 0x0338);
		}

		// class ABP_ZAIC_C : public AZAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_ZAIC__BP_ZAIC_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ZAIC_C, 0x05C0);
		}

		// class AKOTHObjectiveProxy : public AActor
		TEST_METHOD(Class__PavlovProxy__KOTHObjectiveProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjectiveProxy, HillRoot, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjectiveProxy, HillMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjectiveProxy, MaxPointsToAward, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjectiveProxy, MaxSecondsActive, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjectiveProxy, bCanSpawnLootCrate, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjectiveProxy, UnknownData_S5U0, 0x0341);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKOTHObjectiveProxy, 0x0348);
		}

		// class AKOTHSettingsProxy : public AActor
		TEST_METHOD(Class__PavlovProxy__KOTHSettingsProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHSettingsProxy, ScoreToWin, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHSettingsProxy, LimitedAmmoType, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHSettingsProxy, bUseRandomOrder, 0x032D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHSettingsProxy, UnknownData_FUKC, 0x032E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKOTHSettingsProxy, 0x0330);
		}

		// class UPavlov_AudioInterface : public UInterface
		TEST_METHOD(Class__PavlovProxy__Pavlov_AudioInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlov_AudioInterface, 0x0028);
		}

		// class APavlov_AudioVolume : public AVolume
		TEST_METHOD(Class__PavlovProxy__Pavlov_AudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_AudioVolume, ReverbSubmixes, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_AudioVolume, bForceOutdoor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_AudioVolume, ReverbType, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_AudioVolume, UnknownData_ROVP, 0x03B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlov_AudioVolume, 0x03B8);
		}

		// class APavlov_BombSpot : public AActor
		TEST_METHOD(Class__PavlovProxy__Pavlov_BombSpot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_BombSpot, bIsB, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_BombSpot, UnknownData_5GSP, 0x0329);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlov_BombSpot, 0x0330);
		}

		// class APavlov_CustomItem : public AActor
		TEST_METHOD(Class__PavlovProxy__Pavlov_CustomItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, UnknownData_1IOD, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, HoldingAnim, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, bFlipRollPick, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, bFlipYawPick, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, bFlipYAxisPick, 0x036B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, PickOffset, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, PickRotationOffset, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, UnknownData_OY7R, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, InventoryOffset, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, bNeverDestroyInactive, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, UnknownData_YES7, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, SelfDestroyDelay, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, bInventoryDisabled, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, UnknownData_E8C2, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, ExcludeSlots, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, PickSound, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_CustomItem, UnknownData_Y38D, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlov_CustomItem, 0x03F0);
		}

		// class APavlov_GameLogic : public AInfo
		TEST_METHOD(Class__PavlovProxy__Pavlov_GameLogic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_GameLogic, definition, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_GameLogic, GlobalInfoClass, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_GameLogic, PlayerInfoClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_GameLogic, PlayerProxyClass, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlov_GameLogic, 0x0348);
		}

		// class UPavlov_GlobalInfo : public UActorComponent
		TEST_METHOD(Class__PavlovProxy__Pavlov_GlobalInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_GlobalInfo, UnknownData_ST5B, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_GlobalInfo, PlayerSkinTable, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_GlobalInfo, CustomItemTable, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_GlobalInfo, LimitedAmmoType, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_GlobalInfo, UnknownData_5NPL, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_GlobalInfo, ItemList, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_GlobalInfo, bDisableAttachmentMode, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_GlobalInfo, bDisableVoting, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_GlobalInfo, bDisableKillfeedBeep, 0x015A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_GlobalInfo, bCanReviveEnemies, 0x015B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_GlobalInfo, bCustomServer, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_GlobalInfo, UnknownData_ZBTG, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_GlobalInfo, GameLogic, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlov_GlobalInfo, 0x0168);
		}

		// class UPavlov_HandProxy : public USphereComponent
		TEST_METHOD(Class__PavlovProxy__Pavlov_HandProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlov_HandProxy, 0x0580);
		}

		// class UPavlov_InteractBox : public UBoxComponent
		TEST_METHOD(Class__PavlovProxy__Pavlov_InteractBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_InteractBox, UnknownData_MQA6, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_InteractBox, OnInteractBoxClient, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_InteractBox, OnInteractBoxServer, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_InteractBox, UnknownData_9I3I, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlov_InteractBox, 0x05B0);
		}

		// class UPavlov_InteractInterface : public UInterface
		TEST_METHOD(Class__PavlovProxy__Pavlov_InteractInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlov_InteractInterface, 0x0028);
		}

		// class UPavlov_InteractSkeletalMesh : public USkeletalMeshComponent
		TEST_METHOD(Class__PavlovProxy__Pavlov_InteractSkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_InteractSkeletalMesh, UnknownData_5TMS, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_InteractSkeletalMesh, OnInteractSKClient, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_InteractSkeletalMesh, OnInteractSKServer, 0x0B40);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlov_InteractSkeletalMesh, 0x0B50);
		}

		// class UPavlov_InteractStaticMesh : public UStaticMeshComponent
		TEST_METHOD(Class__PavlovProxy__Pavlov_InteractStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_InteractStaticMesh, UnknownData_3CQY, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_InteractStaticMesh, OnInteractSMClient, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_InteractStaticMesh, OnInteractSMServer, 0x0600);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlov_InteractStaticMesh, 0x0610);
		}

		// class APavlov_KillVolume : public ATriggerVolume
		TEST_METHOD(Class__PavlovProxy__Pavlov_KillVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlov_KillVolume, 0x0360);
		}

		// class APavlov_Ladder : public AActor
		TEST_METHOD(Class__PavlovProxy__Pavlov_Ladder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_Ladder, Volume, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_Ladder, ClimbSpeed, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_Ladder, UnknownData_XNFS, 0x0334);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlov_Ladder, 0x0338);
		}

		// class UPavlov_Library : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PavlovProxy__Pavlov_Library)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlov_Library, 0x0028);
		}

		// class UPavlov_Map : public UDataAsset
		TEST_METHOD(Class__PavlovProxy__Pavlov_Map)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, UniqueID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, Label, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, Version, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, UnknownData_CKV9, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, Thumbnail, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, Map, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, QuestMap, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, bHidden, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, UnknownData_D586, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, Compatibility, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, bCustomGameMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, UnknownData_ZQQP, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, CustomGameModeLabel, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, MapURL, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, bCustom, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_Map, UnknownData_J3NE, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlov_Map, 0x00F0);
		}

		// class UPavlov_MsgHandler : public UActorComponent
		TEST_METHOD(Class__PavlovProxy__Pavlov_MsgHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_MsgHandler, Messages, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_MsgHandler, MaxMessages, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_MsgHandler, UnknownData_GIXO, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_MsgHandler, OnMessageReceived, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlov_MsgHandler, 0x0118);
		}

		// class APavlov_OutOfBoundsVolume : public AVolume
		TEST_METHOD(Class__PavlovProxy__Pavlov_OutOfBoundsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_OutOfBoundsVolume, AllowedTeamId, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_OutOfBoundsVolume, DamageMultiplier, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_OutOfBoundsVolume, bOnlyUsedInPush, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_OutOfBoundsVolume, UnknownData_SI3L, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_OutOfBoundsVolume, ObjectiveId, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlov_OutOfBoundsVolume, 0x0370);
		}

		// class UPavlov_PHTaunts : public UDataAsset
		TEST_METHOD(Class__PavlovProxy__Pavlov_PHTaunts)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_PHTaunts, Taunts, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlov_PHTaunts, 0x0040);
		}

		// class UPavlov_PlayerInfo : public UActorComponent
		TEST_METHOD(Class__PavlovProxy__Pavlov_PlayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_PlayerInfo, UnknownData_9QVP, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_PlayerInfo, RadioChannel, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlov_PlayerInfo, UnknownData_3R4G, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlov_PlayerInfo, 0x0128);
		}

		// class APavlov_PlayerProxy : public AActor
		TEST_METHOD(Class__PavlovProxy__Pavlov_PlayerProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PlayerProxy, UnknownData_0XBG, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PlayerProxy, HandsProxy, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PlayerProxy, HandProxyClass, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PlayerProxy, PlayerSkin, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlov_PlayerProxy, 0x0518);
		}

		// class APavlov_PushBombObjective : public AActor
		TEST_METHOD(Class__PavlovProxy__Pavlov_PushBombObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushBombObjective, UnknownData_EURX, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushBombObjective, OnPushObjectiveStateChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushBombObjective, OnSwitchedTeams_Server, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushBombObjective, RootComp, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushBombObjective, MeshComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushBombObjective, ObjectiveId, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushBombObjective, ObjectiveMarker, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushBombObjective, UnknownData_2MLW, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushBombObjective, BombExplosionTime, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushBombObjective, BombExplosionRadius, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushBombObjective, BombExplosionOutterRadius, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushBombObjective, UnknownData_53WE, 0x038C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlov_PushBombObjective, 0x0390);
		}

		// class APavlov_PushLoadoutProxy : public AInfo
		TEST_METHOD(Class__PavlovProxy__Pavlov_PushLoadoutProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushLoadoutProxy, PushLoadout, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushLoadoutProxy, TeamId, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushLoadoutProxy, UnknownData_MWLX, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlov_PushLoadoutProxy, 0x0340);
		}

		// class APavlov_PushSettings : public AInfo
		TEST_METHOD(Class__PavlovProxy__Pavlov_PushSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, AttackerStartingTickets, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, MaxAttackerTickets, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, bUseDefenderTickets, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, UnknownData_3ENV, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, DefenderStartingTickets, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, TicketsPerWave, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, bAwardTicketsPerObjective, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, UnknownData_CL94, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, DefenderSkin, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, AttackerSkin, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, bUseWW2Items, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, UnknownData_RDV0, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, GracePeriod, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, AttackerLoadoutLocation, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSettings, DefenderLoadoutLocation, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlov_PushSettings, 0x0378);
		}

		// class APavlov_PushSpawn : public APlayerStart
		TEST_METHOD(Class__PavlovProxy__Pavlov_PushSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSpawn, TeamId, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_PushSpawn, ObjectiveId, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlov_PushSpawn, 0x0360);
		}

		// class APavlov_Spawn : public APlayerStart
		TEST_METHOD(Class__PavlovProxy__Pavlov_Spawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_Spawn, TeamId, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_Spawn, bDynamic, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_Spawn, bOnlyTeam, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_Spawn, bSpecial, 0x035E);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_Spawn, UnknownData_C0A8, 0x035F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlov_Spawn, 0x0360);
		}

		// class APavlov_VehicleSpawnerProxy : public AActor
		TEST_METHOD(Class__PavlovProxy__Pavlov_VehicleSpawnerProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_VehicleSpawnerProxy, SceneComp, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_VehicleSpawnerProxy, ArrowComp, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_VehicleSpawnerProxy, VehicleIDs, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_VehicleSpawnerProxy, VehicleRespawnTime, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_VehicleSpawnerProxy, InitialRespawnTime, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_VehicleSpawnerProxy, VehicleTeamID, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_VehicleSpawnerProxy, VehicleDespawnTime, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_VehicleSpawnerProxy, bOnlySpawnInPush, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_VehicleSpawnerProxy, UnknownData_1LJB, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlov_VehicleSpawnerProxy, ObjectiveId, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlov_VehicleSpawnerProxy, 0x0360);
		}

		// class UPavlovProxyStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PavlovProxy__PavlovProxyStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovProxyStatics, 0x0028);
		}

		// class ADestructibleActor : public AActor
		TEST_METHOD(Class__ApexDestruction__DestructibleActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, DestructibleComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, UnknownData_PGWZ, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, OnActorFracture, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestructibleActor, 0x0348);
		}

		// class UDestructibleComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__ApexDestruction__DestructibleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_J1FF, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_ZL9Z, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, FractureEffects, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, bEnableHardSleeping, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_TRPA, 0x06E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, LargeChunkThreshold, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_RRJS, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, OnComponentFracture, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_DWN2, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleComponent, 0x07A0);
		}

		// class UDestructibleFractureSettings : public UObject
		TEST_METHOD(Class__ApexDestruction__DestructibleFractureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, CellSiteCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, FractureMaterialDesc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, RandomSeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_0M5P, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, VoronoiSites, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, OriginalSubmeshCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_0PH9, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, Materials, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, ChunkParameters, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_P2BB, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleFractureSettings, 0x00B8);
		}

		// class UDestructibleMesh : public USkeletalMesh
		TEST_METHOD(Class__ApexDestruction__DestructibleMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, DefaultDestructibleParameters, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, FractureEffects, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, UnknownData_QF65, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleMesh, 0x0398);
		}

		// class UMovieSceneTransformOrigin : public UInterface
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOrigin)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOrigin, 0x0028);
		}

		// class UMovieScene3DConstraintSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintBindingID, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0108);
		}

		// class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_O4B7, 0x011E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0120);
		}

		// class UMovieScene3DConstraintTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x0068);
		}

		// class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x0068);
		}

		// class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_B28D, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_KDZA, 0x01AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01B0);
		}

		// class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x0068);
		}

		// class UMovieScene3DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_AC0J, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_DOLQ, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, bUseQuaternionInterpolation, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_MJPR, 0x072D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0730);
		}

		// class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyPath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x0080);
		}

		// class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x0080);
		}

		// class UMovieSceneActorReferenceSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorReferenceData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x0200);
		}

		// class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x0080);
		}

		// class UMovieSceneAudioSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartOffset, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_RCF0, 0x023A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0278);
		}

		// class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0068);
		}

		// class UMovieSceneBoolSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_33OE, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0178);
		}

		// class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x0080);
		}

		// class UMovieSceneByteSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0178);
		}

		// class UMovieSceneByteTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x0088);
		}

		// class UMovieSceneCameraAnimSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayRate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendOutTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_AI5N, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0120);
		}

		// class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x0068);
		}

		// class UMovieSceneCameraCutSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraBindingID, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0108);
		}

		// class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x0068);
		}

		// class UMovieSceneCameraShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_HE14, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_LDTW, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0120);
		}

		// class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x0068);
		}

		// class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, ShotDisplayName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0178);
		}

		// class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x0068);
		}

		// class UMovieSceneColorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x0360);
		}

		// class UMovieSceneColorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_C4NQ, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x0088);
		}

		// class UMovieSceneEnumSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0178);
		}

		// class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x0088);
		}

		// class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformTrack, 0x0080);
		}

		// class UMovieSceneEventSectionBase : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSectionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSectionBase, 0x00E0);
		}

		// class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventRepeaterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, Event, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventRepeaterSection, 0x00E8);
		}

		// class UMovieSceneEventSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, Events, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, EventData, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x01D0);
		}

		// class UMovieSceneEventTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_2D9H, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventPosition, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_UKSA, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventReceivers, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x0080);
		}

		// class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, EventChannel, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTriggerSection, 0x0168);
		}

		// class UMovieSceneFloatSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0180);
		}

		// class UMovieSceneFadeSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_FPZZ, 0x0191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x0198);
		}

		// class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x0080);
		}

		// class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x0080);
		}

		// class UMovieSceneIntegerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0170);
		}

		// class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x0080);
		}

		// class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, Visibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_MTYM, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x00F8);
		}

		// class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x0068);
		}

		// class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x0068);
		}

		// class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x0070);
		}

		// class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, MaterialIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_CV2V, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x0070);
		}

		// class UMovieSceneParameterSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0110);
		}

		// class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x0068);
		}

		// class UMovieSceneParticleSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0178);
		}

		// class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0068);
		}

		// class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Animation, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, PlayRate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_ETFR, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x01D0);
		}

		// class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_NN1N, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x0070);
		}

		// class UMovieSceneSlomoSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0180);
		}

		// class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x0080);
		}

		// class UMovieSceneSpawnSection : public UMovieSceneBoolSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0178);
		}

		// class UMovieSceneSpawnTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x0078);
		}

		// class UMovieSceneStringSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0180);
		}

		// class UMovieSceneStringTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x0080);
		}

		// class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x0080);
		}

		// class UMovieSceneVectorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_5PUK, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x0368);
		}

		// class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_CBLV, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x0088);
		}

		// class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x0080);
		}

		// class UMeshDescription : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescription, 0x0028);
		}

		// class UAvfMediaSettings : public UObject
		TEST_METHOD(Class__AvfMediaFactory__AvfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, NativeAudioOut, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, UnknownData_7Z7J, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvfMediaSettings, 0x0030);
		}

		// class UFixedFrameRateCustomTimeStep : public UEngineCustomTimeStep
		TEST_METHOD(Class__TimeManagement__FixedFrameRateCustomTimeStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedFrameRateCustomTimeStep, FixedFrameRate, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedFrameRateCustomTimeStep, 0x0030);
		}

		// class UTimeManagementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TimeManagement__TimeManagementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeManagementBlueprintLibrary, 0x0028);
		}

		// class UTimeSynchronizationSource : public UObject
		TEST_METHOD(Class__TimeManagement__TimeSynchronizationSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, bUseForSynchronization, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, UnknownData_LG1E, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, FrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizationSource, 0x0030);
		}

		// class USoldierSkin_Soviet_C : public USoldierSkin
		TEST_METHOD(BlueprintGeneratedClass__SoldierSkin_Soviet__SoldierSkin_Soviet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoldierSkin_Soviet_C, 0x0198);
		}

		// class UWoundComponent_US_C : public UWoundComponent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__WoundComponent_US__WoundComponent_US_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWoundComponent_US_C, 0x02E8);
		}

		// class ASkullWound_Base_C : public AWoundAux
		TEST_METHOD(BlueprintGeneratedClass__SkullWound_Base__SkullWound_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkullWound_Base_C, UberGraphFrame, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkullWound_Base_C, SkullMesh, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkullWound_Base_C, 0x03C8);
		}

		// class ASkullWound_Left_C : public ASkullWound_Base_C
		TEST_METHOD(BlueprintGeneratedClass__SkullWound_Left__SkullWound_Left_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkullWound_Left_C, 0x03C8);
		}

		// class UBlueprintFunctionLibrary : public UObject
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0028);
		}

		// class UActorComponent : public UObject
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_KEFA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_DKDT, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CreationMethod, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_PSJ3, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSModifiedProperties, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentActivated, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentDeactivated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_RVKQ, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x00F0);
		}

		// class UOcclusionPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__Engine__OcclusionPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0028);
		}

		// class USceneComponent : public UActorComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_C0IO, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_A4UB, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_32HQ, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x01BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x01BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_1C7Y, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_ESJ5, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x0238);
		}

		// class AActor : public UObject
		TEST_METHOD(Class__Engine__Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_17R8, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_9JB3, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SpawnCollisionHandlingMethod, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputPriority, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, MinNetUpdateFrequency, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_6E64, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Instigator, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_WO3B, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponent, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeRadialDamage, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_WPD1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InstanceComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, BlueprintCreatedComponents, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_4RXJ, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0328);
		}

		// class ABrush : public AActor
		TEST_METHOD(Class__Engine__Brush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_P1E6, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_T3Q8, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_LY3E, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x0360);
		}

		// class AVolume : public ABrush
		TEST_METHOD(Class__Engine__Volume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x0360);
		}

		// class USoundEffectPreset : public UObject
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_IM26, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0040);
		}

		// class USoundEffectSubmixPreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0040);
		}

		// class UReverbPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__Engine__ReverbPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0028);
		}

		// class USpatializationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__Engine__SpatializationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0028);
		}

		// class AInfo : public AActor
		TEST_METHOD(Class__Engine__Info)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0328);
		}

		// class UPrimitiveComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_ZR98, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightmapType, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCustomNavigableGeometry, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_IHYH, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightingChannels, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilWriteMask, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_QO9H, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_EQFY, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastSubmitTime, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastRenderTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastRenderTimeOnScreen, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreActors, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreComponents, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_443X, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentWake, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentSleep, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_1MKS, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_BRDM, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LODParentPrimitive, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, PostPhysicsComponentTick, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x0558);
		}

		// class UShapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_XFB9, 0x0565);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0570);
		}

		// class USphereComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, SphereRadius, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, UnknownData_C6M8, 0x0574);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x0580);
		}

		// class UBoxComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, LineThickness, 0x057C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x0580);
		}

		// class UMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_OFJ6, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x0580);
		}

		// class USkinnedMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_7VRM, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_GZ6V, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_2LL9, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VisibilityBasedAnimTickOption, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_1QOL, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedLocalBounds, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_39CC, 0x06A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x06C0);
		}

		// class USkeletalMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_WEKR, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimClass, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, SubInstances, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PostProcessAnimInstance, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_4B6F, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_TU4K, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedBoneSpaceTransforms, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedComponentSpaceTransforms, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_KLFQ, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UseAsyncScene, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x079D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PhysicsTransformUpdateMode, 0x079E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_V0MF, 0x079F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_5E0M, 0x07A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_HG3O, 0x07A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedAnimCurveUidVersion, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_U111, 0x07AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, EdgeStiffness, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BendingStiffness, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AreaStiffness, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, VolumeStiffness, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, StrainLimitingStiffness, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ShapeTargetStiffness, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DisallowedAnimCurves, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_QIN9, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingSimulationFactory, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_ZYH0, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_KS7U, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickFrame, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_D9GJ, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingInteractor, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_XFSV, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnAnimInitialized, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_VCL6, 0x0A30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0B28);
		}

		// class UStaticMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, ForcedLodModel, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLOD, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_Q9KN, 0x059E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x05D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x05E8);
		}

		// class ATriggerVolume : public AVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x0360);
		}

		// class UDataAsset : public UObject
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0030);
		}

		// class ANavigationObjectBase : public AActor
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_EVTP, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_VAR5, 0x0349);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0350);
		}

		// class APlayerStart : public ANavigationObjectBase
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x0358);
		}

		// class UGameInstance : public UObject
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_7Q4V, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnlineSession, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, ReferencedObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_2Q5R, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x00A0);
		}

		// class AGameModeBase : public AInfo
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, OptionsString, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSessionClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameStateClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerControllerClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerStateClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, HUDClass, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPawnClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, SpectatorClass, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ReplaySpectatorPlayerControllerClass, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicatorClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSession, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameState, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicator, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPlayerName, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, UnknownData_PP4D, 0x03B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameModeBase, 0x03C8);
		}

		// class AGameMode : public AGameModeBase
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_G91Z, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumPlayers, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MaxInactivePlayers, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, bHandleDedicatedServerReplays, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_NN01, 0x0409);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0410);
		}

		// class UAnimInstance : public UObject
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, RootMotionMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_0EQ3, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageStarted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnAllMontageInstancesEnded, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_44G6, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, NotifyQueue, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, ActiveAnimNotifyState, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_RAUK, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x0358);
		}

		// class UDamageType : public UObject
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_IGHX, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_J5YS, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0040);
		}

		// class UCameraComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_67ZS, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_VQ3E, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_H8B8, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x0790);
		}

		// class UMovementComponent : public UActorComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_VQ2A, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_G48K, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_SE5D, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x0130);
		}

		// class UNavMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0165);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_HLB4, 0x0166);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, PathFollowingComp, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0170);
		}

		// class UPawnMovementComponent : public UNavMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0178);
		}

		// class UCharacterMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_N8GL, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_BA4Z, 0x01AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_2JU7, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_XMNC, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientGoodMoveAckTime, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientAdjustmentTime, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_NYRZ, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAckGoodMoves, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustments, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkLargeClientCorrectionDistance, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x03B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_SBGW, 0x03B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_YJ44, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_3K0X, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_JI0K, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_LTCP, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_6STH, 0x06FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0720);
		}

		// class APawn : public AActor
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_PPBU, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_QIKL, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessPlayer, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessAI, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x033A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_CP1X, 0x033B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_E2SV, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_1ZPM, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_N20B, 0x0384);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x0388);
		}

		// class UWorld : public UObject
		TEST_METHOD(Class__Engine__World)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_V9W2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PerModuleDataObjects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsToConsider, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingInvisibility, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DemoNetDriver, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_BKLT, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelCollections, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_88TN, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevel, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_LDN3, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_I35N, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_1ZIG, 0x07EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PSCPool, 0x0810);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x0868);
		}

		// class ULevelStreaming : public UObject
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_UCPI, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_4MOY, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_HVYB, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_F947, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0140);
		}

		// class ULevelStreamingAlwaysLoaded : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0140);
		}

		// class ULevelStreamingDynamic : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingDynamic, UnknownData_0LP9, 0x0141);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingDynamic, 0x0150);
		}

		// class ULevelStreamingPersistent : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0140);
		}

		// class ALevelStreamingVolume : public AVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_87IF, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_0Z46, 0x0375);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x0378);
		}

		// class ULightmappedSurfaceCollection : public UObject
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0040);
		}

		// class UTexture : public UObject
		TEST_METHOD(Class__Engine__Texture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_W7BC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LightingGuid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, NumCinematicMipLevels, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CachedCombinedLODBias, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, AssetUserData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_8F8B, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00B0);
		}

		// class UTexture2D : public UTexture
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, StreamingIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_31I7, 0x00BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ForceMipLevelsToBeResidentTimestamp, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_PFF3, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x00E8);
		}

		// class ULightMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_1PH8, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x00F0);
		}

		// class ALightmassCharacterIndirectDetailVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x0360);
		}

		// class ALightmassImportanceVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x0360);
		}

		// class ALightmassPortal : public AActor
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightmassPortal, PortalComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassPortal, 0x0330);
		}

		// class ULightmassPortalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x0240);
		}

		// class UParticleModule : public UObject
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_35VP, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_S5JO, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0030);
		}

		// class UParticleModuleVelocityBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_F3Y6, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0038);
		}

		// class UParticleModuleVelocity : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00C0);
		}

		// class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_21TW, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00B8);
		}

		// class USlateBrushAsset : public UObject
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00B0);
		}

		// class USlateTextureAtlasInterface : public UInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0028);
		}

		// class UCommandlet : public UObject
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_75MS, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0080);
		}

		// class USmokeTestCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0080);
		}

		// class USoundAttenuation : public UObject
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x02D0);
		}

		// class USoundClass : public UObject
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, UnknownData_AHX5, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x0080);
		}

		// class USoundNode : public UObject
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0038);
		}

		// class USoundNodeModulatorContinuous : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0078);
		}

		// class USoundNodeOscillator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_0TG9, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_612Q, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0060);
		}

		// class USoundNodeDistanceCrossFade : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0048);
		}

		// class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0050);
		}

		// class USoundNodeQualityLevel : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0038);
		}

		// class USoundNodeRandom : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_V3KI, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_SOGC, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_FM1Y, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0070);
		}

		// class USoundNodeSoundClass : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0040);
		}

		// class USoundNodeSwitch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0040);
		}

		// class USoundNodeWaveParam : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0040);
		}

		// class USoundNodeAssetReferencer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0038);
		}

		// class USoundNodeWavePlayer : public USoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_PMBO, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0070);
		}

		// class USoundBase : public UObject
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_QS99, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundConcurrencySettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, TotalSamples, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Priority, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, PreEffectBusSends, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x00A8);
		}

		// class USoundWave : public USoundBase
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRateQuality, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_A08T, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_WSQB, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_BPRQ, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LocalizedSubtitles, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_2QR7, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0208);
		}

		// class USoundSourceBus : public USoundWave
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_6IZY, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_6KE4, 0x0211);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x0220);
		}

		// class USoundSubmix : public UObject
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, ChildSubmixes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, ParentSubmix, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, ChannelFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_0JIU, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, AmbisonicsPluginSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerAttackTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerReleaseTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OnSubmixRecordedFileDone, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_L7Q7, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0080);
		}

		// class UFloatingPawnMovement : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_P31T, 0x0189);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0190);
		}

		// class USpectatorPawnMovement : public UFloatingPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_PJA3, 0x0191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0198);
		}

		// class AReflectionCapture : public AActor
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0330);
		}

		// class ASphereReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0338);
		}

		// class UReflectionCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_OCK4, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Brightness, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MapBuildDataId, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_9BWQ, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x02AC);
		}

		// class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, UnknownData_GAAV, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x02C0);
		}

		// class ASplineMeshActor : public AActor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineMeshActor, SplineMeshComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineMeshActor, 0x0330);
		}

		// class USplineMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_UBKG, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_GT4Y, 0x0655);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_LZTT, 0x0659);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_ZNUM, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_EWMI, 0x0681);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x0690);
		}

		// class ULightComponentBase : public USceneComponent
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_CW2A, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x0260);
		}

		// class ULightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, Temperature, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_NOL1, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_HQDJ, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SpecularScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_IERO, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightingChannels, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_Z5LC, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_P3CE, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_0C2Z, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_BN5H, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_R7AI, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_I857, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x0360);
		}

		// class ULocalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__LocalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, IntensityUnits, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_4DYV, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, Radius, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, AttenuationRadius, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, LightmassSettings, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_0G0W, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalLightComponent, 0x037C);
		}

		// class UPointLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_JJG4, 0x038C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x0390);
		}

		// class USpotLightComponent : public UPointLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, InnerConeAngle, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, LightShaftConeAngle, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, UnknownData_JLL5, 0x039C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x03A0);
		}

		// class ACharacter : public APawn
		TEST_METHOD(Class__Engine__Character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, AnimRootMotionTranslationScale, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseRotationOffset, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplayLastTransformUpdateTimeStamp, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_YBZC, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_TFQV, 0x0432);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpForceTimeRemaining, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ProxyJumpForceStartedTime, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxCount, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCount, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_6082, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnReachedJumpApex, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_R6MH, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, MovementModeChangedDelegate, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, SavedRootMotion, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_IQ3D, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x05E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x0738);
		}

		// class USkeletalMesh : public UObject
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_AF6K, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MinLOD, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_42B0, 0x00D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_W6HC, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SamplingInfo, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_1VZP, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x02F8);
		}

		// class UBodySetup : public UObject
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BoneName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysicsType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_LN88, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionReponse, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionTraceFlag, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_DWT8, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_KNQN, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_IUHC, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_67ZL, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x0280);
		}

		// class UExponentialHeightFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_2Z7F, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_HV3M, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_95L2, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_VL58, 0x02C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x02D0);
		}

		// class UExporter : public UObject
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_YID4, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportTask, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_8DZQ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0078);
		}

		// class UFontImportOptions : public UObject
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00D8);
		}

		// class UForceFeedbackEffect : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_5Z99, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0040);
		}

		// class UEngine : public UObject
		TEST_METHOD(Class__Engine__Engine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_RDSA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_23PC, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClassName, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AIControllerClassName, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManagerClassName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManager, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTexture, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTextureName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugEditorMaterialName, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialXAxis, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialYAxis, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZAxis, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialPrismatic, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, QuadComplexityColors, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LODColorationColors, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HLODColorationColors, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingAccuracyColors, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES2PixelShaderAdditiveComplexityCount, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES3PixelShaderAdditiveComplexityCount, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_B8ZQ, 0x0621);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_JG8J, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_NRXL, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TickCycles, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameCycles, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ClientCycles, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_QGMU, 0x0771);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_T7KK, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, FixedFrameRate, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultCustomTimeStep, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CurrentCustomTimeStep, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStepClassName, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTimecodeProvider, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimecodeProvider, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTimecodeProviderClassName, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProviderClassName, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTimecodeFrameRate, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_H08Q, 0x0801);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_V1U7, 0x0809);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_G1NK, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameScreenshotSaveDirectory, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_X7KN, 0x0859);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MeshLODRange, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_D94A, 0x0885);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_PHTW, 0x0899);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_Q4BJ, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubduedSelectionOutlineColor, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x0914);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_FF6M, 0x0915);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_6XC2, 0x0919);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_3V0W, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_60EY, 0x0929);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_3B6E, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionMeshSectionHighlightIntensity, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HoverHighlightIntensity, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_RPQU, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RuntimeServerActors, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_CJ5A, 0x0BC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_GM90, 0x0BDC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0CA8);
		}

		// class UGameEngine : public UEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_CF0R, 0x0CB8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0CF8);
		}

		// class AGameNetworkManager : public AInfo
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_PEKJ, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientForcedUpdateDuration, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxMoveDeltaTime, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTime, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeStationary, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_FI9F, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientErrorUpdateRateLimit, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_UFL0, 0x0396);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_RN3H, 0x03AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x03B8);
		}

		// class UGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0028);
		}

		// class AGameSession : public AInfo
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPartySize, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_XK3U, 0x0336);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0340);
		}

		// class ALight : public AActor
		TEST_METHOD(Class__Engine__Light)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_I8CZ, 0x0331);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0338);
		}

		// class ASpotLight : public ALight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0340);
		}

		// class AGeneratedMeshAreaLight : public ASpotLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0340);
		}

		// class UHapticFeedbackEffect_Base : public UObject
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0028);
		}

		// class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_2ZDT, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0068);
		}

		// class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0118);
		}

		// class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_C4CR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0060);
		}

		// class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__HealthSnapshotBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthSnapshotBlueprintLibrary, 0x0028);
		}

		// class UParticleModuleBeamBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0030);
		}

		// class UParticleModuleBeamNoise : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_21ES, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_YRLM, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_FM5P, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_6BFX, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_F64K, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_70HR, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_ULXI, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_LWWF, 0x017D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x01B8);
		}

		// class UParticleModuleBeamSource : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_XLUK, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_KSOI, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_DDJ7, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_V5WO, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_IYI9, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_4PGC, 0x0131);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0138);
		}

		// class UParticleModuleBeamTarget : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_TW7N, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_4CBT, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_0Z2U, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_R5NX, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_RVG4, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_RJ6Y, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0138);
		}

		// class UParticleModuleCameraBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0030);
		}

		// class UParticleModuleCameraOffset : public UParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_ZIAW, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_OWLH, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0070);
		}

		// class UParticleModuleCollisionBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0030);
		}

		// class UParticleModuleCollision : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_FS0Y, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_UBOA, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_BZH5, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_CB7N, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_LVRI, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_JLUK, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x01B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x01B8);
		}

		// class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Response, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_ZJYV, 0x00B6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00B8);
		}

		// class UParticleModuleColorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0030);
		}

		// class UParticleModuleColor : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_CPED, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00C0);
		}

		// class USoundEffectSourcePreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0040);
		}

		// class AController : public AActor
		TEST_METHOD(Class__Engine__Controller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_X6G1, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_CAS2, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_5115, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, TransformComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_NGT9, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_G72Y, 0x039D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x03A8);
		}

		// class APlayerController : public AController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_QMUR, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_420A, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SmoothTargetViewRotationSpeed, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_SWT7, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ShowOnlyActors, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenPrimitiveComponents, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_I82K, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncLocation, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncRotation, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_1PP8, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_0Y4X, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_JSDE, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_D86X, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_X5MZ, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_HUO9, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ForceFeedbackScale, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClickEventKeys, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x0572);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x0573);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HitResultTraceDistance, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x057A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_88NH, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_OXB1, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_S6S1, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_E009, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bIsLocalPlayerController, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_TP3K, 0x0675);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_CEW5, 0x0684);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x0688);
		}

		// class UDeveloperSettings : public UObject
		TEST_METHOD(Class__Engine__DeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_6EF1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0038);
		}

		// class UMaterialExpression : public UObject
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_NVUR, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0040);
		}

		// class UMaterialExpressionTextureBase : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, SamplerType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_4OPS, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_EDFA, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0050);
		}

		// class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_65RX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, TextureObject, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_ISCZ, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValue, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_55YF, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDX, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_ZON7, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_95SR, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, AutomaticViewMipBiasValue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_FJL5, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValueMode, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, SamplerSource, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_PF5V, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstCoordinate, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstMipValue, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_K3CA, 0x00ED);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x00F8);
		}

		// class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x0118);
		}

		// class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x0118);
		}

		// class USplineComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineCurves, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineRotInfo, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineScaleInfo, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_Q82E, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bSplineHasBeenEdited, 0x0625);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bModifiedByConstructionScript, 0x0626);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bInputSplinePointsToConstructionScript, 0x0627);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bDrawDebug, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bClosedLoop, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bLoopPositionOverride, 0x062A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_HDKG, 0x062B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, LoopPosition, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, DefaultUpVector, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_JSFI, 0x063C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x0640);
		}

		// class AHUD : public AActor
		TEST_METHOD(Class__Engine__HUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_HGQH, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, CurrentTargetIndex, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_PK8H, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_NJSI, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetDesiredClass, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetActor, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_107P, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0418);
		}

		// class UNavAreaBase : public UObject
		TEST_METHOD(Class__Engine__NavAreaBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaBase, UnknownData_T7X4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaBase, 0x0030);
		}

		// class UAnimNotify : public UObject
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_9I6Q, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0038);
		}

		// class UAnimNotify_PlaySound : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_P4BX, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0058);
		}

		// class UCheatManager : public UObject
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_VONR, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0078);
		}

		// class ULineBatchComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_67L8, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_LII0, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x05A0);
		}

		// class UParticleModuleOrbitBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_87S8, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0038);
		}

		// class UParticleModuleOrbit : public UParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_UBKI, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_9DXB, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_ETWJ, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_YKY0, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0148);
		}

		// class UParticleModuleOrientationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0030);
		}

		// class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_O1K7, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0038);
		}

		// class UParticleModuleParameterBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0030);
		}

		// class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_MNBX, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0048);
		}

		// class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0068);
		}

		// class UPawnNoiseEmitterComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_DNP2, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_XQZD, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x0118);
		}

		// class UPhysicalAnimationComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_WTUF, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, SkeletalMeshComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_K6GL, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x0128);
		}

		// class UPhysicsConstraintTemplate : public UObject
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_W0M6, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x02F8);
		}

		// class UPhysicsHandleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_5SL0, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_6NG6, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_NSY1, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_H4OP, 0x0184);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x01A0);
		}

		// class UPhysicsSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultGravityZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultTerminalVelocity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultFluidFriction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SimulateScratchMemorySize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RagdollAggregateThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, TriangleMeshTriangleMinAreaThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableAsyncScene, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableShapeSharing, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnablePCM, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableStabilization, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bWarnMissingLocks, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnable2DPhysics, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_1TGC, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicErrorCorrection, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_A4LZ, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, BounceThresholdVelocity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, FrictionCombineMode, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RestitutionCombineMode, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_Y13I, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxAngularVelocity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxDepenetrationVelocity, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ContactOffsetMultiplier, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinContactOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxContactOffset, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateSkeletalMeshOnDedicatedServer, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultShapeComplexity, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDefaultHasComplexCollision, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x00AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicStaticPairs, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicKinematicPairs, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_21W6, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_S8LP, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AsyncSceneSmoothingFactor, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultBroadphaseSettings, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_48S1, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x0110);
		}

		// class UPhysicsSpringComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_152N, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_M6H0, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_0HBS, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x0260);
		}

		// class ARigidBodyBase : public AActor
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0328);
		}

		// class APhysicsThruster : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0330);
		}

		// class UPhysicsThrusterComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, UnknownData_8QJ1, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x0240);
		}

		// class ASceneCapture : public AActor
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0330);
		}

		// class APlanarReflection : public ASceneCapture
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, PlanarReflectionComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, bShowPreviewPlane, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, UnknownData_Y3RN, 0x0339);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanarReflection, 0x0340);
		}

		// class USceneCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_QT11, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bCaptureEveryFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bCaptureOnMovement, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bAlwaysPersistRenderingState, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_H8DP, 0x0283);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_BGX8, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ProfilingEventName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_T6V1, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x02D0);
		}

		// class UPlanarReflectionComponent : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_T4W3, 0x0305);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x03B0);
		}

		// class APlaneReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0330);
		}

		// class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_8GG4, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x02C0);
		}

		// class UPlatformEventsComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x0110);
		}

		// class UPlatformInterfaceWebResponse : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_AP0E, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B0);
		}

		// class UPlayerInput : public UObject
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_0KT9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_JIYO, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_C1I6, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x03A8);
		}

		// class APlayerStartPIE : public APlayerStart
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x0358);
		}

		// class UPluginCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_4DZF, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A0);
		}

		// class APointLight : public ALight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0340);
		}

		// class UPolys : public UObject
		TEST_METHOD(Class__Engine__Polys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_WJ93, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0038);
		}

		// class UPoseableMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_GYM1, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x0800);
		}

		// class UPoseWatch : public UObject
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_9WY0, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0038);
		}

		// class UPostProcessComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_HGJR, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_WXYK, 0x072D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x0730);
		}

		// class APostProcessVolume : public AVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_HGY2, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_W086, 0x085D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x0860);
		}

		// class APrecomputedVisibilityOverrideVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x0390);
		}

		// class APrecomputedVisibilityVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x0360);
		}

		// class UPreviewCollectionInterface : public UInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0028);
		}

		// class UAudioComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_IGO5, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerAttackTime, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerReleaseTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Priority, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_PG2Y, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_CPQ5, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachLocationRule, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachRotationRule, 0x0555);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachScaleRule, 0x0556);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_N3YX, 0x0557);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_3D8L, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_V4NB, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioSingleEnvelopeValue, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_TXJG, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioMultiEnvelopeValue, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_P0G9, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachParent, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachSocketName, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_MREQ, 0x0618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x0650);
		}

		// class UOnlineBlueprintCallProxyBase : public UObject
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0028);
		}

		// class UPlayer : public UObject
		TEST_METHOD(Class__Engine__Player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_39EQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_EPFA, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0048);
		}

		// class UNetConnection : public UPlayer
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_KA09, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PlayerId, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_DR0I, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_HC7O, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x17C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_3MM2, 0x17D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x1918);
		}

		// class UNetDriver : public UObject
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_6VJL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClassName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_IRT5, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_YH44, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_8SHF, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, WorldPackage, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_YM1S, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClass, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RoleProperty, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RemoteRoleProperty, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_7KD8, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ActorChannelPool, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_A71K, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_T0XQ, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriver, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_XMTT, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0698);
		}

		// class UBlueprintAsyncActionBase : public UObject
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintAsyncActionBase, UnknownData_G413, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0030);
		}

		// class UOnlineEngineInterface : public UObject
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0028);
		}

		// class UOnlineSession : public UObject
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0028);
		}

		// class AGameStateBase : public AInfo
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, GameModeClass, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, AuthorityGameMode, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, SpectatorClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, PlayerArray, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, bReplicatedHasBegunPlay, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_R5K6, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ReplicatedWorldTimeSeconds, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsDelta, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_W5KY, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameStateBase, 0x0368);
		}

		// class AGameState : public AGameStateBase
		TEST_METHOD(Class__Engine__GameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_520Q, 0x037C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x0388);
		}

		// class UPhysicsConstraintComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_MHAZ, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_M15M, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x0440);
		}

		// class ATriggerBase : public AActor
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0330);
		}

		// class ATriggerBox : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0330);
		}

		// class UGameUserSettings : public UObject
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDynamicResolution, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_I8LK, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, Version, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedAudioQualityLevel, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_NTJ4, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_KEOX, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenWidth, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenHeight, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_XHSV, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_MAPP, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_M6WE, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0118);
		}

		// class ALevelScriptActor : public AActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_BYRX, 0x0329);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0330);
		}

		// class ULocalPlayer : public UPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_ZL2A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_4BOA, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_4STR, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_JHDY, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_C43O, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x01C8);
		}

		// class UPhysicsCollisionHandler : public UObject
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_861Z, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0040);
		}

		// class APlayerCameraManager : public AActor
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_TV12, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_TDKS, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_11I1, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_6C5J, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x1370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_KR08, 0x18C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCachePrivate, 0x18E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCachePrivate, 0x1E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x2360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultModifiers, 0x2370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x2380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x2384);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTargetOffset, 0x2390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_AB0D, 0x239C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x23B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CachedCameraShakeMod, 0x23C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x23C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PostProcessBlendCache, 0x2408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_X221, 0x2418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x2428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x2438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x2448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_IEC4, 0x2452);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x2454);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x2458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x245C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x2460);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x2464);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x2468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_2MA6, 0x246C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x2470);
		}

		// class APlayerState : public AInfo
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Score, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_4YF0, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_KTQN, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerId, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Ping, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_KXWW, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_P6FY, 0x0357);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, StartTime, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_A4PE, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_08ZA, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, SavedNetworkAddress, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueID, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_32FG, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PawnPrivate, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_9PGT, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerNamePrivate, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_8MUJ, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x03F0);
		}

		// class ADefaultPawn : public APawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_5XV9, 0x03A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x03B0);
		}

		// class ASpectatorPawn : public ADefaultPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x03B0);
		}

		// class UVOIPTalker : public UActorComponent
		TEST_METHOD(Class__Engine__VOIPTalker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, Settings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, UnknownData_3WR9, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPTalker, 0x0128);
		}

		// class UInstancedStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_8GL6, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_MIPP, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_DCSQ, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_2CRS, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x0680);
		}

		// class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_3D02, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_3YEL, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_QDA5, 0x06E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_CJZS, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_FLZC, 0x0715);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, InstanceCountToRender, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_GLYZ, 0x071C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0768);
		}

		// class AStaticMeshActor : public AActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, NavigationGeometryGatheringMode, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_AQLL, 0x0332);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0338);
		}

		// class UMaterialInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_CWNT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_M9N3, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_RFPP, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, TextureStreamingData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_3T4B, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0088);
		}

		// class UAvoidanceManager : public UObject
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_8XUG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_3U2L, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00E0);
		}

		// class UBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_IU5A, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_0NHN, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x0580);
		}

		// class UBlendableInterface : public UInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0028);
		}

		// class USkeleton : public UObject
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_IQNA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_Z11F, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_10CE, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_1QDQ, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_6WHF, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x0360);
		}

		// class UHLODProxy : public UObject
		TEST_METHOD(Class__Engine__HLODProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, ProxyMeshes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxy, 0x0038);
		}

		// class UAmbisonicsSubmixSettingsBase : public UObject
		TEST_METHOD(Class__Engine__AmbisonicsSubmixSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbisonicsSubmixSettingsBase, 0x0028);
		}

		// class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0028);
		}

		// class UImportantToggleSettingInterface : public UInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0028);
		}

		// class UPlatformInterfaceBase : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0038);
		}

		// class UInGameAdManager : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_EDT6, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0060);
		}

		// class UMaterialExpressionAbs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, UnknownData_W2W2, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0058);
		}

		// class UMaterialExpressionActorPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0040);
		}

		// class UMaterialExpressionAdd : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_CBDW, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_0HZ5, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x0078);
		}

		// class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Threshold, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_CPFO, 0x011D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x0120);
		}

		// class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingPathSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_M4XE, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Inputs, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_ESRJ, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingPathSwitch, 0x00A0);
		}

		// class UParticleModuleLocationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0030);
		}

		// class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_9V6M, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00C0);
		}

		// class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_WJET, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_989Q, 0x0139);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0140);
		}

		// class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00F8);
		}

		// class UParticleModuleLocation : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0088);
		}

		// class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0088);
		}

		// class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00A8);
		}

		// class UParticleModuleMaterialBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0030);
		}

		// class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0040);
		}

		// class UParticleModuleRotationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0030);
		}

		// class UParticleModuleMeshRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_IBO4, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0088);
		}

		// class UMaterialInstance : public UMaterialInterface
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_VNVT, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, bOverrideBaseProperties, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_RWTS, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_630L, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PermutationTextureReferences, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, StaticParameters, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_IDOS, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x01E8);
		}

		// class UMaterialInstanceConstant : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x01E8);
		}

		// class UMaterialExpressionCustomOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0040);
		}

		// class UEngineCustomTimeStep : public UObject
		TEST_METHOD(Class__Engine__EngineCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineCustomTimeStep, 0x0028);
		}

		// class UAnimNotifyState : public UObject
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_ESQF, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0030);
		}

		// class UBlueprintGeneratedClass : public UClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_MVYF, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_2XV3, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x02E0);
		}

		// class ACameraActor : public AActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_EETW, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, SceneComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_5K5E, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_Y60I, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_EMV3, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x0840);
		}

		// class USoundWaveProcedural : public USoundWave
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_PE37, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x0260);
		}

		// class UAnimationAsset : public UObject
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_DYTG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_T3RE, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0080);
		}

		// class UBlendSpaceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_3HO7, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_5I5T, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_KILR, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_MAH0, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0148);
		}

		// class UBlendSpace : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_D0G6, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0150);
		}

		// class UAimOffsetBlendSpace : public UBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0150);
		}

		// class UBlendSpace1D : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_KZKI, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0150);
		}

		// class UAimOffsetBlendSpace1D : public UBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0150);
		}

		// class UAISystemBase : public UObject
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_2A9Z, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_O871, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0058);
		}

		// class AAmbientSound : public AActor
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0330);
		}

		// class UAnimationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_9RWF, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, DefaultCompressionAlgorithm, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, RotationCompressionFormat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, TranslationCompressionFormat, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_IVDO, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, MaxCurveError, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, AlternativeCompressionThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bOnlyCheckForMissingSkeletalMeshes, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTryExhaustiveSearch, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnableSegmenting, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTickAnimationOnSkeletalMeshInit, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_7EWU, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x0070);
		}

		// class UBlueprintCore : public UObject
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyGeneratedClassIsAuthoritative, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_XB3Y, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_ZUGO, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0050);
		}

		// class UBlueprint : public UBlueprintCore
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_MNEY, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, PRIVATE_InnermostPreviousCDO, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_667F, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_6OP5, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_6A5L, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, bNativize, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_N4LC, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00E0);
		}

		// class UAnimBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_VR2K, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_U71I, 0x0102);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x0108);
		}

		// class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_2KTW, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_MA48, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndices, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_7A31, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x0350);
		}

		// class UAnimClassData : public UObject
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_TYU7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, RootAnimNodeIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_IMZS, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndices, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, RootAnimNodeProperty, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x0098);
		}

		// class UAnimClassInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0028);
		}

		// class UButtonStyleAsset : public UObject
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x02A0);
		}

		// class UCameraAnim : public UObject
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_EKTR, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_K080, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_DK2U, 0x0544);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x0550);
		}

		// class UCameraAnimInst : public UObject
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_8MP1, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_ULTQ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_QFZJ, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0110);
		}

		// class ACameraBlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x0360);
		}

		// class UCameraModifier : public UObject
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_ZZIY, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_TS5C, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_L7MT, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0048);
		}

		// class UCameraModifier_CameraShake : public UCameraModifier
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_DAYV, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x0060);
		}

		// class UDynamicBlueprintBinding : public UObject
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0028);
		}

		// class UComponentDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0038);
		}

		// class UCurveTable : public UObject
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_465L, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x0098);
		}

		// class UCompositeCurveTable : public UCurveTable
		TEST_METHOD(Class__Engine__CompositeCurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, ParentTables, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, OldParentTables, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeCurveTable, 0x00B8);
		}

		// class UDataTable : public UObject
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_9NVA, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_1R6V, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x00A0);
		}

		// class UCompositeDataTable : public UDataTable
		TEST_METHOD(Class__Engine__CompositeDataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, ParentTables, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, UnknownData_7WQQ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, OldParentTables, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeDataTable, 0x00C8);
		}

		// class UScriptViewportClient : public UObject
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_MRRQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0038);
		}

		// class UGameViewportClient : public UScriptViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_3LHB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_ADHW, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_3E6T, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x02E8);
		}

		// class UConsole : public UObject
		TEST_METHOD(Class__Engine__Console)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_LZQ7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_FIJF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_7I50, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0130);
		}

		// class UChannel : public UObject
		TEST_METHOD(Class__Engine__Channel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_M2IB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0068);
		}

		// class UControlChannel : public UChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_75KQ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0080);
		}

		// class UControlRigInterface : public UInterface
		TEST_METHOD(Class__Engine__ControlRigInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlRigInterface, 0x0028);
		}

		// class UStreamingSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_N6Y1, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_NSSY, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityLevelStreamingActorsUpdateExtraTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_GUAX, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0070);
		}

		// class UGarbageCollectionSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_JJ12, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MinGCClusterSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0058);
		}

		// class ACullDistanceVolume : public AVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_06FX, 0x0371);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x0378);
		}

		// class UCurveBase : public UObject
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_BTLV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0030);
		}

		// class UCurveEdPresetCurve : public UObject
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0028);
		}

		// class UCurveFloat : public UCurveBase
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_4MQU, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00A8);
		}

		// class UInterpTrack : public UObject
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_48JO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_6ME3, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_CF5A, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0070);
		}

		// class UInterpTrackFloatBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_Q7SR, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0090);
		}

		// class UInterpTrackFade : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_ZPRU, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_0P4U, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00A8);
		}

		// class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_6NJO, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B0);
		}

		// class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00A8);
		}

		// class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x0098);
		}

		// class UInterpTrackFloatProp : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x0098);
		}

		// class UInterpTrackInst : public UObject
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0028);
		}

		// class UInterpTrackInstAnimControl : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_3RVA, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0030);
		}

		// class UInterpTrackInstAudioMaster : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0028);
		}

		// class UInterpTrackInstProperty : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0038);
		}

		// class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_4SCQ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, BoolProperty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_OQOM, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0050);
		}

		// class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_BEWD, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0050);
		}

		// class UParticleModulePivotOffset : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0038);
		}

		// class UParticleModuleRequired : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_UVNF, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_ON0G, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_942X, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_I1TO, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_4P9P, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_J6RJ, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_JHXV, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_KX6K, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_IBF2, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_OFSG, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_PVO6, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_8FGW, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_84E6, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_OWNY, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_ED5H, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_0E5M, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0170);
		}

		// class UParticleModuleRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0068);
		}

		// class UParticleModuleRotation_Seeded : public UParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0088);
		}

		// class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_7RPH, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0070);
		}

		// class UParticleModuleRotationRateBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0030);
		}

		// class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0068);
		}

		// class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0088);
		}

		// class UParticleModuleSizeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0030);
		}

		// class UParticleModuleSize : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0080);
		}

		// class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0040);
		}

		// class USkeletalMeshLODSettings : public UDataAsset
		TEST_METHOD(Class__Engine__SkeletalMeshLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MinLOD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, UnknownData_H1S2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, LODGroups, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshLODSettings, 0x0048);
		}

		// class UModel : public UObject
		TEST_METHOD(Class__Engine__Model)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_MCT1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x02C8);
		}

		// class UActorChannel : public UChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_3YVB, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, CreateSubObjects, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_9FB1, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0238);
		}

		// class UInputDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0028);
		}

		// class UInputActionDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0038);
		}

		// class UInputAxisDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0038);
		}

		// class UMaterialExpressionArccosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, UnknownData_K3UV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0058);
		}

		// class UMaterialExpressionArcsine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, UnknownData_VW1R, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0058);
		}

		// class UMaterialExpressionArctangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, UnknownData_6RFB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0058);
		}

		// class UMaterialExpressionArctangentFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, UnknownData_QSBJ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0058);
		}

		// class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, UnknownData_XXAR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0058);
		}

		// class UTouchInterface : public UObject
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_PBET, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_K2SE, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0058);
		}

		// class ATriggerCapsule : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0330);
		}

		// class ATriggerSphere : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0330);
		}

		// class UTwitterIntegrationBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0038);
		}

		// class UUserDefinedEnum : public UEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B0);
		}

		// class UAnimSequenceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00A8);
		}

		// class UAnimCompositeBase : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00A8);
		}

		// class UAnimComposite : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00B8);
		}

		// class UAnimCompress : public UObject
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_U042, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, IdealNumFramesPerSegment, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, MaxNumFramesPerSegment, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_9CUA, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, MaxCurveError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_GF2R, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0050);
		}

		// class UAnimCompress_Automatic : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_Automatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_Automatic, MaxEndEffectorError, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_Automatic, UnknownData_VUQQ, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_Automatic, 0x0058);
		}

		// class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0050);
		}

		// class UAnimCompress_LeastDestructive : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0050);
		}

		// class UAnimCompress_RemoveLinearKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_VBES, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0070);
		}

		// class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_HLL4, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_NH06, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_GEHR, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_S7TQ, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00F0);
		}

		// class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_IZSP, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0058);
		}

		// class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_J51G, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0060);
		}

		// class UAnimMetaData : public UObject
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0028);
		}

		// class UAnimMontage : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_GYIL, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_GEU3, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableAutoBlendOut, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x018B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_P6JU, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01E0);
		}

		// class UAnimNotify_PauseClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PauseClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PauseClothingSimulation, 0x0038);
		}

		// class UAnimNotify_PlayParticleEffect : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_2YLV, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_82RD, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// class UAnimNotify_ResetClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0038);
		}

		// class UAnimNotify_ResetDynamics : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetDynamics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetDynamics, 0x0038);
		}

		// class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResumeClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResumeClothingSimulation, 0x0038);
		}

		// class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0030);
		}

		// class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_8P48, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0060);
		}

		// class UAnimNotifyState_Trail : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_91DX, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_WOL8, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0060);
		}

		// class UMaterialExpressionFunctionOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_EP79, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_OSBG, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_IEFC, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_RX5N, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x0090);
		}

		// class UMaterialExpressionGIReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_WM2T, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_81SQ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_GA4Q, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0088);
		}

		// class UMaterialExpressionIf : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_98BA, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_2OX8, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_N23R, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_LCIP, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_OAST, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_XY61, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x00C8);
		}

		// class UMaterialExpressionLightmapUVs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0040);
		}

		// class UMaterialExpressionLogarithm10 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, UnknownData_SDCF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0058);
		}

		// class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0058);
		}

		// class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialLayerOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialLayerOutput, 0x0090);
		}

		// class UParticleModuleAccelerationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_Q8JC, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0038);
		}

		// class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_2LOH, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0090);
		}

		// class UAnimSequence : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_TJ71, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_ARUB, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x0165);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_UX9U, 0x0166);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, EncodingPkgVersion, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bUseNormalizedRootMotionScale, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_QTF1, 0x0186);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_H027, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x01B0);
		}

		// class UAnimSet : public UObject
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_MM3M, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_9POZ, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F0);
		}

		// class UAnimSingleNodeInstance : public UAnimInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x0370);
		}

		// class UAnimStateMachineTypes : public UObject
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0028);
		}

		// class UApplicationLifecycleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationShouldUnloadResourcesDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationReceivedStartupArgumentsDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnTemperatureChangeDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnLowPowerModeDelegate, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0180);
		}

		// class UBookmarkBase : public UObject
		TEST_METHOD(Class__Engine__BookmarkBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookmarkBase, 0x0028);
		}

		// class UBookMark2D : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_QKCD, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0038);
		}

		// class ABoxReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0330);
		}

		// class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_HRPL, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x02C0);
		}

		// class UBreakpoint : public UObject
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_N89L, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_FR3Q, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0040);
		}

		// class UBrushBuilder : public UObject
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, ToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_4DIK, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_DQ7L, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0080);
		}

		// class UBrushComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, UnknownData_UI6Z, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0570);
		}

		// class ABrushShape : public ABrush
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x0360);
		}

		// class UArrowComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_9T8V, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, bIsScreenSizeScaled, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_DIIL, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_TXTE, 0x0569);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x0570);
		}

		// class UAssetExportTask : public UObject
		TEST_METHOD(Class__Engine__AssetExportTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Exporter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bSelected, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bReplaceIdentical, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bPrompt, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bAutomated, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bUseFileArchive, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bWriteEmptyFiles, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, UnknownData_RREH, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, IgnoreObjectList, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Options, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Errors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetExportTask, 0x0078);
		}

		// class UAssetImportData : public UObject
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0028);
		}

		// class UAssetManager : public UObject
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_FPT1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x0273);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x0276);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsPrimaryAssetDirectoryCurrent, 0x0277);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_XOZW, 0x027B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_7V1Z, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x03D8);
		}

		// class UAssetManagerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldManagerDetermineTypeAndName, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_S9PF, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, MetaDataTagsForAssetRegistry, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x00F0);
		}

		// class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_1YYN, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x0060);
		}

		// class UMaterialExpressionBumpOffset : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_Q6EX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_CR6A, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_UUTM, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_FUYV, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0098);
		}

		// class UMaterialExpressionCameraPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0040);
		}

		// class UMaterialExpressionCameraVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0040);
		}

		// class UMaterialExpressionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0058);
		}

		// class AVolumetricLightmapDensityVolume : public AVolume
		TEST_METHOD(Class__Engine__VolumetricLightmapDensityVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricLightmapDensityVolume, AllowedMipLevelRange, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricLightmapDensityVolume, 0x0368);
		}

		// class AWindDirectionalSource : public AInfo
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0330);
		}

		// class UWindDirectionalSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_QYSK, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Radius, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_I7O4, 0x024D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x0260);
		}

		// class UWorldComposition : public UObject
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_HYA9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_3A3K, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0068);
		}

		// class UHierarchicalLODSetup : public UObject
		TEST_METHOD(Class__Engine__HierarchicalLODSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, HierarchicalLODSetup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, OverrideBaseMaterial, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalLODSetup, 0x0060);
		}

		// class AWorldSettings : public AInfo
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_IWZR, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_BHU7, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfig, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfigOverride, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_RMRI, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultPhysicsVolumeClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_HEOX, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_HG5D, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_GY6L, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_9YZ8, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LightmassSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_AKZC, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_UPJB, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MonoCullingDistance, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookMarks, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TimeDilation, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DemoPlayTimeDilation, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinGlobalTimeDilation, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGlobalTimeDilation, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinUndilatedFrameTime, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxUndilatedFrameTime, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_011L, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_V167, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ReplicationViewers, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, bOverrideDefaultBroadphaseSettings, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_5VAU, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BroadphaseSettings, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxNumberOfBookmarks, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_KSJS, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBookmarkClass, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookmarkArray, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LastBookmarkClass, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x0550);
		}

		// class UAssetMappingTable : public UObject
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0038);
		}

		// class UAssetUserData : public UObject
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0028);
		}

		// class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_0E08, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0078);
		}

		// class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0088);
		}

		// class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0088);
		}

		// class AAtmosphericFog : public AInfo
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0330);
		}

		// class UAtmosphericFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_S2ZI, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_SHOS, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_LMHH, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x0420);
		}

		// class UAudioSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultMediaSoundClassName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSampleRate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_537R, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoipBufferingDelay, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_KVZV, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaxWaveInstances, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, NumStoppingSources, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, PanningMethod, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MonoChannelUpmixMethod, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_FHZ4, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_7N3Q, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x00F8);
		}

		// class AAudioVolume : public AVolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Priority, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_JW48, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Settings, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, AmbientZoneSettings, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_TALI, 0x03AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioVolume, 0x03B0);
		}

		// class UParticleModuleColor_Seeded : public UParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00E0);
		}

		// class UParticleModuleColorOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_EYDP, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00C0);
		}

		// class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_HF21, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00C0);
		}

		// class UParticleModuleEventBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0030);
		}

		// class UParticleModuleLifetimeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0030);
		}

		// class UParticleModuleLifetime : public UParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, LifeTime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0068);
		}

		// class USoundGroups : public UObject
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_9PRD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0088);
		}

		// class USoundMix : public UObject
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_28OX, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0088);
		}

		// class USoundNodeAttenuation : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_WE05, 0x02E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x02F0);
		}

		// class USoundNodeBranch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0040);
		}

		// class USoundNodeConcatenator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0048);
		}

		// class USoundNodeDelay : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0040);
		}

		// class UTimelineTemplate : public UObject
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_4QO3, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_A8G2, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x0098);
		}

		// class UTireType : public UDataAsset
		TEST_METHOD(Class__Engine__TireType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_VBH7, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0038);
		}

		// class UUserDefinedStruct : public UScriptStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Status, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_C0EK, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Guid, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_A234, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x00E0);
		}

		// class UUserInterfaceSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_G5QY, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, ApplicationScale, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_502M, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bAllowHighDPIInGameMode, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_DWI8, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_XFLT, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x0258);
		}

		// class UVectorField : public UObject
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0048);
		}

		// class UVectorFieldAnimated : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_NXKT, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_G8WT, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0088);
		}

		// class UVectorFieldComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_KBTD, 0x0569);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x0580);
		}

		// class UVectorFieldStatic : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_LD2I, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x00D0);
		}

		// class AVectorFieldVolume : public AActor
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0330);
		}

		// class UVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__VirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture, Space, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture, Rebuild, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture, UnknownData_FMV0, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture, 0x0050);
		}

		// class ULightMapVirtualTexture : public UVirtualTexture
		TEST_METHOD(Class__Engine__LightMapVirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture, LayerFlags, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture, UnknownData_VSBY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture, 0x0058);
		}

		// class UVirtualTextureSpace : public UObject
		TEST_METHOD(Class__Engine__VirtualTextureSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Layers, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, TileSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, BorderWidth, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Size, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Dimensions, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Format, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, UnknownData_I2QY, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, PoolSize, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, UnknownData_TTQ6, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTextureSpace, 0x0070);
		}

		// class ULightMapVirtualTextureSpace : public UVirtualTextureSpace
		TEST_METHOD(Class__Engine__LightMapVirtualTextureSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTextureSpace, 0x0070);
		}

		// class UVisualLoggerAutomationTests : public UObject
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0028);
		}

		// class UVisualLoggerDebugSnapshotInterface : public UInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0028);
		}

		// class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0028);
		}

		// class UVoiceChannel : public UChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_OV6N, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0078);
		}

		// class UVOIPStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VOIPStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPStatics, 0x0028);
		}

		// class UVolumeTexture : public UTexture
		TEST_METHOD(Class__Engine__VolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumeTexture, UnknownData_SJXI, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumeTexture, 0x0108);
		}

		// class UAutomationTestSettings : public UObject
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0328);
		}

		// class UEdGraphNode : public UObject
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_HMM9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_BDV7, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_V6F1, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_FZE0, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x0098);
		}

		// class UEdGraphNode_Documentation : public UEdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00B8);
		}

		// class UEdGraphPin_Deprecated : public UObject
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, Direction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_8XLQ, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0120);
		}

		// class UEdGraphSchema : public UObject
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0028);
		}

		// class AEmitter : public AActor
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_AERL, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x0378);
		}

		// class AEmitterCameraLensEffectBase : public AEmitter
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, RelativeTransform, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_AWQ7, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_ACAF, 0x03DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x03E0);
		}

		// class UEngineBaseTypes : public UObject
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0028);
		}

		// class UEngineHandlerComponentFactory : public UHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0028);
		}

		// class ULocalMessage : public UObject
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0028);
		}

		// class UEngineMessage : public ULocalMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00A8);
		}

		// class UEngineTypes : public UObject
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0028);
		}

		// class AExponentialHeightFog : public AInfo
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_YQYK, 0x0331);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0338);
		}

		// class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_CF9U, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0048);
		}

		// class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0078);
		}

		// class USoundConcurrency : public UObject
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0038);
		}

		// class USoundCue : public USoundBase
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_3R7B, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_VPCA, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0380);
		}

		// class USoundEffectSourcePresetChain : public UObject
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, Chain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_73BU, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0040);
		}

		// class UBlendProfile : public UObject
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_W0MU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0048);
		}

		// class ABlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x0360);
		}

		// class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0028);
		}

		// class UPlatformGameInstance : public UGameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationShouldUnloadResourcesDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedStartupArgumentsDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x0170);
		}

		// class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0028);
		}

		// class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0028);
		}

		// class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0128);
		}

		// class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_95H1, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_M6QO, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_DZ6W, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_Y54M, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0090);
		}

		// class UBoneMaskFilter : public UObject
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0038);
		}

		// class UBookMark : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0050);
		}

		// class UCameraShake : public UObject
		TEST_METHOD(Class__Engine__CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_KYM0, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationDuration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendInTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendOutTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RotOscillation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, LocOscillation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, FOVOscillation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimPlayRate, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendInTime, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendOutTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RandomAnimSegmentDuration, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, Anim, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_BF0J, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, CameraOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_YQJ9, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, ShakeScale, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillatorTimeRemaining, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimInst, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_VK2V, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake, 0x0160);
		}

		// class UDialogueVoice : public UObject
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_LQVT, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_URQX, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0040);
		}

		// class UDirectionalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_NGP1, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_NSOM, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceSoftAngle, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_XAKI, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_TYKK, 0x03C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x03D0);
		}

		// class UDistribution : public UObject
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_VV04, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0030);
		}

		// class UDistributionFloat : public UDistribution
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_EIG0, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0038);
		}

		// class UDistributionFloatConstant : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_AO6V, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0040);
		}

		// class UDistributionFloatUniformCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0050);
		}

		// class UDistributionVector : public UDistribution
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_XBMS, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0038);
		}

		// class UDistributionVectorConstant : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_8TUQ, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_X1YU, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0050);
		}

		// class UDistributionVectorConstantCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_YVLU, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_DQTS, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0058);
		}

		// class UDistributionVectorParameterBase : public UDistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_OEWE, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0090);
		}

		// class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0090);
		}

		// class UDistributionVectorUniform : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_MXMI, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_DY0U, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0060);
		}

		// class UDistributionVectorUniformCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_80XU, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_IH6B, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_KLWM, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0060);
		}

		// class ADocumentationActor : public AActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_UWCP, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0330);
		}

		// class UDPICustomScalingRule : public UObject
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0028);
		}

		// class UDrawFrustumComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_GDUR, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_DLSB, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_PHFS, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x0580);
		}

		// class UDrawSphereComponent : public USphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x0580);
		}

		// class UEdGraph : public UObject
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_OIGK, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0060);
		}

		// class UInputTouchDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0038);
		}

		// class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0038);
		}

		// class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0038);
		}

		// class UInterface_AssetUserData : public UInterface
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0028);
		}

		// class UInterface_CollisionDataProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0028);
		}

		// class UInterface_PostProcessVolume : public UInterface
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0028);
		}

		// class UInterface_PreviewMeshProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_PreviewMeshProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PreviewMeshProvider, 0x0028);
		}

		// class UInterpCurveEdSetup : public UObject
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_FEWF, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0040);
		}

		// class UInterpData : public UObject
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_1NZ8, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0070);
		}

		// class UInterpFilter : public UObject
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0038);
		}

		// class UInterpFilter_Classes : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0038);
		}

		// class UInterpFilter_Custom : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0038);
		}

		// class UInterpGroup : public UObject
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_SPIO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_Y7WP, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0050);
		}

		// class UInterpGroupCamera : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_H456, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0060);
		}

		// class UInterpGroupDirector : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0050);
		}

		// class UInterpGroupInst : public UObject
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0048);
		}

		// class UInterpGroupInstCamera : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0048);
		}

		// class UInterpGroupInstDirector : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0048);
		}

		// class UInterpToMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, Duration, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_A0PP, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_0Y55, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_87N8, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_D3QP, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x01D0);
		}

		// class UInterpTrackAnimControl : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_UMQ0, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B0);
		}

		// class UInterpTrackVectorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_UYLN, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0090);
		}

		// class UInterpTrackAudioMaster : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0090);
		}

		// class UInterpTrackBoolProp : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0088);
		}

		// class UInterpTrackColorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x0098);
		}

		// class UInterpTrackColorScale : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0090);
		}

		// class UInterpTrackDirector : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_WVMV, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0088);
		}

		// class UInterpTrackEvent : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_P55T, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0088);
		}

		// class UInterpTrackInstColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_8XAZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_7OLY, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0048);
		}

		// class UInterpTrackInstColorScale : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0028);
		}

		// class UInterpTrackInstDirector : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0030);
		}

		// class UInterpTrackInstEvent : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_31Y9, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0030);
		}

		// class UInterpTrackInstFade : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0028);
		}

		// class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_8RJ8, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0040);
		}

		// class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0060);
		}

		// class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_M71M, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0030);
		}

		// class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_IOG7, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_2OFI, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0048);
		}

		// class UInterpTrackMoveAxis : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_1MS5, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00A8);
		}

		// class UMaterialExpressionCrossProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_N06X, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_QTJL, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x0070);
		}

		// class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_ZT62, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0060);
		}

		// class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, UnknownData_KJUD, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x0070);
		}

		// class UMaterialExpressionStaticSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_8QGS, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_0FUZ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_M5DG, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_TYA9, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0090);
		}

		// class UParticleModuleEventGenerator : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0040);
		}

		// class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_FD83, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0040);
		}

		// class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_7Q9L, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0048);
		}

		// class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_N28W, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_VDRR, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00E8);
		}

		// class UParticleModuleEventSendToGame : public UObject
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0028);
		}

		// class UParticleModuleKillBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0030);
		}

		// class UParticleModuleKillBox : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_V8IX, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00D8);
		}

		// class UParticleModuleKillHeight : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_SBAD, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0070);
		}

		// class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0088);
		}

		// class UParticleModuleLightBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0030);
		}

		// class UParticleModuleLight : public UParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_T2IY, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightingChannels, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_XAKO, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_EL8K, 0x013A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0140);
		}

		// class UParticleModuleLocation_Seeded : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00A8);
		}

		// class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_Z1CO, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_GGG9, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_TEBM, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_OXLD, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_C4JF, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0070);
		}

		// class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00A8);
		}

		// class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0080);
		}

		// class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x00A0);
		}

		// class UPhysicalMaterial : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_JEZ7, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RestitutionCombineMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideRestitutionCombineMode, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_2ZBV, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_T0XC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_3TTH, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScales, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_ARI2, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0080);
		}

		// class UPhysicalMaterialPropertyBase : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialPropertyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0028);
		}

		// class UPhysicsAsset : public UObject
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_2M0G, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_IASG, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0120);
		}

		// class UStaticMesh : public UObject
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_ZY58, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLOD, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_72U4, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_YEQ9, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, EditableMesh, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0110);
		}

		// class UStaticMeshSocket : public UObject
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_FGCA, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0068);
		}

		// class UStereoLayerComponent : public USceneComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_1GZT, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Texture, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_XNHQ, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_EYEA, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Priority, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_E913, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x02D0);
		}

		// class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0028);
		}

		// class UStringTable : public UObject
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_2JGP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0040);
		}

		// class UCanvas : public UObject
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_RJHV, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_O0IA, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_A5YU, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02D0);
		}

		// class UTextureRenderTarget : public UTexture
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_MRWN, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00B8);
		}

		// class UTextureRenderTarget2D : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_1VN5, 0x00D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x00E0);
		}

		// class UCanvasRenderTarget2D : public UTextureRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, World, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_YN83, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0100);
		}

		// class UCapsuleComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleHalfHeight, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_HDDF, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x0580);
		}

		// class UCloudStorageBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_PM0F, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0050);
		}

		// class UCollisionProfile : public UDeveloperSettings
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_MNMW, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0158);
		}

		// class UDialogueWave : public UObject
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_647D, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0070);
		}

		// class ADirectionalLight : public ALight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0338);
		}

		// class UForceFeedbackComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_77T9, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_314Y, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x0310);
		}

		// class UInheritableComponentHandler : public UObject
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0048);
		}

		// class UInputComponent : public UActorComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_JJFP, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, CachedKeyToActionInfo, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_HCQZ, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0178);
		}

		// class UInputKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0038);
		}

		// class UInputSettings : public UObject
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bUseAutocorrect, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_C09H, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectOS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectCultures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectDeviceModels, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_3T71, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_4F12, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x00E0);
		}

		// class ULevel : public UObject
		TEST_METHOD(Class__Engine__Level)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_7DDD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActorCluster, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingUnbuiltComponents, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingDirtyResources, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavDataChunks, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StreamingTextureGuids, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_D426, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, bIsLightingScenario, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_D1M4, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelBuildDataId, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_EH7E, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MapBuildData, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightBuildLevelOffset, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_4KSD, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, WorldSettings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_RK3S, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_UU3N, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, DestroyedReplicatedStaticActors, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0288);
		}

		// class ULevelActorContainer : public UObject
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, Actors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0038);
		}

		// class ALevelBounds : public AActor
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_K053, 0x0329);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0330);
		}

		// class ULevelScriptBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00E0);
		}

		// class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_A1JZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_8C5L, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x0070);
		}

		// class UMaterialExpressionQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_N93H, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_EOZC, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x00A0);
		}

		// class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_KXMF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_G3ET, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x0060);
		}

		// class UMaterialExpressionRound : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, UnknownData_XZ1X, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0058);
		}

		// class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0068);
		}

		// class UParticleModuleSize_Seeded : public UParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x00A0);
		}

		// class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_V09Z, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0088);
		}

		// class UParticleModuleSizeScale : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_72AY, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0088);
		}

		// class UParticleModuleSourceMovement : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0080);
		}

		// class UParticleModuleSpawnBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_RVKD, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0038);
		}

		// class UParticleModuleSpawn : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_BBWQ, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_SA6W, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x0100);
		}

		// class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_XRYK, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_JLQK, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_ZC8R, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0088);
		}

		// class UParticleModuleSubUVBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0030);
		}

		// class UParticleModuleSubUV : public UParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_08AI, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0078);
		}

		// class UParticleModuleSubUVMovie : public UParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_5O9V, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_VYGT, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00C0);
		}

		// class UParticleModuleTrailBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0030);
		}

		// class UParticleModuleTrailSource : public UParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_31FY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_RP37, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_U3TE, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_BYPV, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0098);
		}

		// class UParticleModuleTypeDataBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0030);
		}

		// class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_MZ9P, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_W3NC, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0048);
		}

		// class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_BOVD, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_AKA8, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_LFRS, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_F13J, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_IA66, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0168);
		}

		// class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_JSEB, 0x0455);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0460);
		}

		// class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, bUseStaticMeshLODs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_D0OT, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, LODSizeScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_DVD3, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_CK9B, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_7X99, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Pitch, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Roll, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Yaw, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_UKC6, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_QS5P, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_UKJY, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_LIWY, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_2ORG, 0x00BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x00C0);
		}

		// class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_KXSL, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_N3C7, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_ODZN, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_EKA8, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0060);
		}

		// class UParticleModuleVectorFieldBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0030);
		}

		// class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_PHVV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_5982, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0040);
		}

		// class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_MPS4, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0068);
		}

		// class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_XKIT, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0040);
		}

		// class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0070);
		}

		// class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00E0);
		}

		// class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0088);
		}

		// class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_P7BR, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0090);
		}

		// class UParticleEmitter : public UObject
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_XF7X, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_MD15, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailModeBitmask, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_LLRM, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x0158);
		}

		// class UParticleSpriteEmitter : public UParticleEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x0158);
		}

		// class UParticleSystem : public UObject
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_IYJV, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_26KL, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_Y088, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_KHJE, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_4GIL, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_WDGX, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_Y9F7, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_7QGR, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, bAutoDeactivate, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_5SW9, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MinTimeBetweenTicks, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificantReaction, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_BX0J, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificanceDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxSignificanceLevel, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_SMHB, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxPoolSize, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_2VLI, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_X7XP, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_XIOE, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0140);
		}

		// class UParticleSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_5E5D, 0x0583);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x0585);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x0586);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_X7JA, 0x0587);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_213W, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_DSRP, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_07SF, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_89SL, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_SSWM, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x06AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_4Q9Y, 0x06AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_QEJN, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x07B0);
		}

		// class UParticleSystemReplay : public UObject
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_03F3, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0040);
		}

		// class UPathFollowingAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__PathFollowingAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingAgentInterface, 0x0028);
		}

		// class USpringArmComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_QM4C, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_EHNX, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_VLBF, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_LII6, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x02C0);
		}

		// class UStaticMeshDescriptions : public UObject
		TEST_METHOD(Class__Engine__StaticMeshDescriptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshDescriptions, UnknownData_IERM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshDescriptions, 0x0038);
		}

		// class USubsurfaceProfile : public UObject
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x0078);
		}

		// class USubUVAnimation : public UObject
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_LPKS, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_SJIT, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0060);
		}

		// class UTextRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Text, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_XSHK, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_NSNL, 0x05A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x05B0);
		}

		// class UTexture2DDynamic : public UTexture
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_RO3Y, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_82X7, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00C8);
		}

		// class UTextureCube : public UTexture
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_B0CO, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0108);
		}

		// class UTextureLightProfile : public UTexture2D
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x00F0);
		}

		// class UTextureRenderTargetCube : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_8BX0, 0x00CE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00D0);
		}

		// class UThumbnailInfo : public UObject
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0028);
		}

		// class UTimelineComponent : public UActorComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_VLR7, 0x0189);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x0190);
		}

		// class UCheckBoxStyleAsset : public UObject
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x05A8);
		}

		// class UChildActorComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_GWFU, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0270);
		}

		// class UChildConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x1918);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x1920);
		}

		// class UCurveVector : public UCurveBase
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x0180);
		}

		// class UPrimaryDataAsset : public UDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0030);
		}

		// class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0028);
		}

		// class ADebugCameraController : public APlayerController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_QCAA, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_ZXO4, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SpeedScale, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialMaxSpeed, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialAccel, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialDecel, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_VD7B, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x06D0);
		}

		// class ADebugCameraHUD : public AHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0418);
		}

		// class UDebugDrawService : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0028);
		}

		// class ADecalActor : public AActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, Decal, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0330);
		}

		// class UDecalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInDuration, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInStartDelay, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_C7IY, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalSize, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_P54S, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x0280);
		}

		// class APhysicsVolume : public AVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_B4MU, 0x036D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x0370);
		}

		// class ADefaultPhysicsVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x0370);
		}

		// class UDemoNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_1MQK, 0x1918);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x1938);
		}

		// class UDemoNetDriver : public UNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_NOLM, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_HE0J, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x0B94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_TDFN, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_1NWV, 0x0BC9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x0D30);
		}

		// class UPendingNetGame : public UObject
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_ZPJN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_HEC5, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C8);
		}

		// class UDemoPendingNetGame : public UPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C8);
		}

		// class UDestructibleInterface : public UInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0028);
		}

		// class UInterpTrackInstMove : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0040);
		}

		// class UInterpTrackInstParticleReplay : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_PEWS, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0030);
		}

		// class UInterpTrackInstSlomo : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_BUVB, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0030);
		}

		// class UInterpTrackInstSound : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_2WCN, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0038);
		}

		// class UInterpTrackInstToggle : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_IEX3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_ZFAA, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0038);
		}

		// class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0060);
		}

		// class UParticleModuleAttractorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0030);
		}

		// class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0080);
		}

		// class UPrimaryAssetLabel : public UPrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_OE4R, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0070);
		}

		// class UProjectileMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_LZ2U, 0x013A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinFrictionFraction, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_669L, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceAdditionalIterations, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationTime, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpRotationTime, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationMaxLagDistance, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationSnapToTargetDistance, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_4W7I, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x01F0);
		}

		// class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__ProxyLODMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProxyLODMeshSimplificationSettings, 0x0040);
		}

		// class ARadialForceActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0330);
		}

		// class URadialForceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_0OFM, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_P8SV, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_U6XP, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0270);
		}

		// class ARectLight : public ALight
		TEST_METHOD(Class__Engine__RectLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARectLight, RectLightComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARectLight, 0x0340);
		}

		// class URectLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__RectLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceHeight, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceTexture, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, UnknownData_UHGP, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLightComponent, 0x0390);
		}

		// class URendererSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ZPC3, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_6SH4, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_1GP6, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_4DOK, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_HN7A, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_30R0, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_BI3S, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_RP6E, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_TN5Q, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bEnableAlphaChannelInPostProcessing, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_4FOM, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ODRI, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_TV1Q, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_RMIH, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultLightUnits, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_JGW9, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_7L2X, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_YZMM, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_KLNR, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_I8QB, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_8UWZ, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeX, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeY, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_JJHP, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_RNAE, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_GZ4M, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_05SS, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_N1YY, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_0E8H, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x00D8);
		}

		// class URendererOverrideSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_IJHT, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0040);
		}

		// class UReplicationDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationDriver, 0x0028);
		}

		// class UReplicationConnectionDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationConnectionDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationConnectionDriver, 0x0028);
		}

		// class UReporterBase : public UObject
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_6HIZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0030);
		}

		// class UReporterGraph : public UReporterBase
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_T70Y, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00A8);
		}

		// class UReverbEffect : public UObject
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0058);
		}

		// class USoundNodeDoppler : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_LDOB, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0040);
		}

		// class USoundNodeEnveloper : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_0ZST, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0160);
		}

		// class USoundNodeGroupControl : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0048);
		}

		// class USoundNodeLooping : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_HNCG, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0040);
		}

		// class USoundNodeMature : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0038);
		}

		// class USoundNodeMixer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0048);
		}

		// class USoundNodeModulator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0048);
		}

		// class UCurveLinearColor : public UCurveBase
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustHue, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustSaturation, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightness, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightnessCurve, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustVibrance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMinAlpha, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMaxAlpha, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, UnknownData_PREF, 0x020C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x0210);
		}

		// class UCurveLinearColorAtlas : public UTexture2D
		TEST_METHOD(Class__Engine__CurveLinearColorAtlas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, TextureSize, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientPixelSize, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientCurves, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColorAtlas, 0x0100);
		}

		// class UCurveSourceInterface : public UInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0028);
		}

		// class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, UnknownData_SZQG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionCollectionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0060);
		}

		// class UMaterialExpressionComment : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, Text, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_LI2O, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0070);
		}

		// class UMaterialExpressionComponentMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_CX2L, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_YQXW, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x0060);
		}

		// class UMaterialExpressionConstant : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_372X, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0048);
		}

		// class UMaterialExpressionConstant2Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0048);
		}

		// class UMaterialExpressionConstant4Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0050);
		}

		// class UMaterialExpressionConstantBiasScale : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_WZFV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x0060);
		}

		// class UMaterialExpressionCosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_Z8KX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_WASC, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x0060);
		}

		// class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_2MNG, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_JWN4, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x0060);
		}

		// class UMaterialExpressionDesaturation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_KDDV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_C6NT, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x0080);
		}

		// class UMaterialExpressionDistance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_14XR, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_V0EI, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x0070);
		}

		// class UMaterialExpressionDistanceCullFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0040);
		}

		// class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, UnknownData_2MAH, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0058);
		}

		// class UMaterialExpressionDivide : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_RKEL, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_27BX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x0078);
		}

		// class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_Z6US, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Inputs, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_REIK, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x00B8);
		}

		// class UMaterialExpressionFresnel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_SVOO, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_BDRV, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_0V3X, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_Y1SF, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_PZNB, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0098);
		}

		// class UMaterialExpressionFunctionInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_QP8C, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_WRE0, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_CJO3, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_3H1T, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x00D0);
		}

		// class UMaterialExpressionLightmassReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_WNAX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_AV9I, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x0070);
		}

		// class UMaterialExpressionLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0040);
		}

		// class UMaterialExpressionLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_KZCS, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_V4V6, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_WWZ4, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_TKH6, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0098);
		}

		// class UMaterialExpressionLogarithm2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, UnknownData_SK3L, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0058);
		}

		// class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_BKNO, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_O972, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_3VHW, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_903T, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_PV7A, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_8CIM, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_FDE7, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_S3Z9, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_61QL, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_RGRW, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_Y7B8, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_CV62, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_JT06, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_M2M9, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_BBJL, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_4AJ9, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_5IZI, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_JRCI, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0298);
		}

		// class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialAttributeLayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ExpressionGUID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_ELLB, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, DefaultLayers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, LayerCallers, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveLayerCallers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_BKJT, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, BlendCallers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveBlendCallers, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, bIsLayerGraphBuilt, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_GMX9, 0x00E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialAttributeLayers, 0x00F0);
		}

		// class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_C3XD, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_ORJP, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x0070);
		}

		// class UMaterialExpressionMax : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_7G1X, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_XBC4, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x0078);
		}

		// class UMaterialExpressionMin : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_5XT2, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_RS2A, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x0078);
		}

		// class UMaterialExpressionMultiply : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_QL81, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_2ZES, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x0078);
		}

		// class UMaterialExpressionNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_NJ6C, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_UW41, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_HWK7, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_UYN9, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_HOXS, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x0098);
		}

		// class UMaterialExpressionOneMinus : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, UnknownData_AWWC, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0058);
		}

		// class UMaterialExpressionPanner : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_SSXI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_CIKO, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Speed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_FAKJ, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_31U4, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x0098);
		}

		// class UMaterialExpressionParticleColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0040);
		}

		// class UMaterialExpressionParticleDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0040);
		}

		// class UMaterialExpressionParticleMacroUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0040);
		}

		// class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0040);
		}

		// class UMaterialExpressionParticlePositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0040);
		}

		// class UMaterialExpressionParticleRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0040);
		}

		// class UMaterialExpressionParticleRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0040);
		}

		// class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0040);
		}

		// class UMaterialExpressionParticleSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0040);
		}

		// class UMaterialExpressionParticleSpeed : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0040);
		}

		// class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_H5Q2, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x0100);
		}

		// class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0040);
		}

		// class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0040);
		}

		// class UMaterialExpressionPixelDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0040);
		}

		// class UMaterialExpressionPixelNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0040);
		}

		// class UMaterialExpressionPower : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_89UN, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_BVYR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_0LB7, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x0078);
		}

		// class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0040);
		}

		// class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0060);
		}

		// class UMaterialExpressionSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, UnknownData_C1M1, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0058);
		}

		// class UMaterialExpressionSine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_1Y2R, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_LGWL, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x0060);
		}

		// class UMaterialExpressionSquareRoot : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, UnknownData_KP58, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0058);
		}

		// class UMaterialExpressionStaticBool : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_3GZX, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0048);
		}

		// class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_LRFZ, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0060);
		}

		// class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_KVPN, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_IDAA, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x0078);
		}

		// class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, UnknownData_V9LQ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0058);
		}

		// class UParticleModuleLocationDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0170);
		}

		// class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_HKYM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_RUSK, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_EH59, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_7U70, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0050);
		}

		// class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0038);
		}

		// class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0080);
		}

		// class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_ZVER, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0088);
		}

		// class UTimecodeProvider : public UObject
		TEST_METHOD(Class__Engine__TimecodeProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimecodeProvider, 0x0028);
		}

		// class USystemTimeTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__Engine__SystemTimeTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, FrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, UnknownData_YNHD, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USystemTimeTimecodeProvider, 0x0038);
		}

		// class ATargetPoint : public AActor
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0328);
		}

		// class UTextPropertyTestObject : public UObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0070);
		}

		// class ATextRenderActor : public AActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0330);
		}

		// class UTextureLODSettings : public UObject
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0038);
		}

		// class UDeviceProfile : public UTextureLODSettings
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_VG0Y, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_U9QD, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x0098);
		}

		// class UDeviceProfileManager : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_GTXC, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x00A8);
		}

		// class UDialogueSoundWaveProxy : public USoundBase
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_4B8J, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x00C8);
		}

		// class UDistributionFloatConstantCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0050);
		}

		// class UDistributionFloatParameterBase : public UDistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_S90T, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0060);
		}

		// class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0060);
		}

		// class UDistributionFloatUniform : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0040);
		}

		// class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_5YQS, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_IO5O, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0050);
		}

		// class UInterpTrackInstVisibility : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_WQ73, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0030);
		}

		// class UInterpTrackLinearColorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_5GSY, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0090);
		}

		// class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x0098);
		}

		// class UInterpTrackMove : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_M0TW, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_L3YY, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00C8);
		}

		// class UInterpTrackParticleReplay : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0080);
		}

		// class UInterpTrackSlomo : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0090);
		}

		// class UInterpTrackSound : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_XEJX, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00A8);
		}

		// class UInterpTrackToggle : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_YJRC, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0088);
		}

		// class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00A8);
		}

		// class UInterpTrackVectorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x0098);
		}

		// class UInterpTrackVisibility : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_7HYE, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0088);
		}

		// class UIntSerialization : public UObject
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_E4GP, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_ZGWK, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_8CYJ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_71A4, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0050);
		}

		// class AKillZVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x0370);
		}

		// class UKismetArrayLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0028);
		}

		// class UKismetGuidLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0028);
		}

		// class UKismetInputLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0028);
		}

		// class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0028);
		}

		// class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0028);
		}

		// class UKismetMathLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0028);
		}

		// class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0028);
		}

		// class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, UnknownData_V0MS, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0058);
		}

		// class UMaterialExpressionDotProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_YKXQ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_7UH1, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x0070);
		}

		// class UMaterialExpressionDynamicParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParameterIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, UnknownData_ENL7, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0068);
		}

		// class UMaterialExpressionEyeAdaptation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0040);
		}

		// class UMaterialExpressionFloor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, UnknownData_FS48, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0058);
		}

		// class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0160);
		}

		// class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0118);
		}

		// class USkeletalBodySetup : public UBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, bSkipScaleFromAnimation, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_GDAS, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x0298);
		}

		// class APhysicsConstraintActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_JZ4Y, 0x0341);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0348);
		}

		// class UPoseAsset : public UAnimationAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_O16W, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0120);
		}

		// class UPreviewMeshCollection : public UDataAsset
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_ZU4O, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0050);
		}

		// class UFont : public UObject
		TEST_METHOD(Class__Engine__Font)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_3JD1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_F3XV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Characters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_8KCE, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_RZ98, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01D0);
		}

		// class UFontFace : public UObject
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_VUXZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_CC20, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0058);
		}

		// class UParticleModuleLight_Seeded : public UParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0160);
		}

		// class URig : public UObject
		TEST_METHOD(Class__Engine__Rig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, UnknownData_P7XG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0050);
		}

		// class URotatingMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_689E, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0150);
		}

		// class URVOAvoidanceInterface : public UInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0028);
		}

		// class USaveGame : public UObject
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0028);
		}

		// class UScene : public UObject
		TEST_METHOD(Class__Engine__Scene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0028);
		}

		// class ASceneCapture2D : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0338);
		}

		// class USceneCaptureComponent2D : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ProjectionType, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_LAHI, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_FRI9, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CaptureSource, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_QF33, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_F4PB, 0x07D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_VN9S, 0x0821);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_8N0H, 0x083D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x0840);
		}

		// class USceneCaptureComponentCube : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetLeft, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetRight, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetODS, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, IPD, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_R4D8, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x0300);
		}

		// class ASceneCaptureCube : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0338);
		}

		// class USCS_Node : public UObject
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_TC3V, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x00E0);
		}

		// class USelection : public UObject
		TEST_METHOD(Class__Engine__Selection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_7WND, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A0);
		}

		// class AServerStatReplicator : public AInfo
		TEST_METHOD(Class__Engine__ServerStatReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bUpdateStatNet, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bOverwriteClientStats, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_E7FH, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, Channels, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRate, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRate, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutSaturation, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, MaxPacketOverhead, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMax, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMin, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientAvg, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMax, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMin, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientAvg, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMax, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMin, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientAvg, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMax, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMin, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientAvg, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetNumClients, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPackets, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPackets, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InBunches, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutBunches, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutLoss, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InLoss, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesSent, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesRecv, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsSent, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsRecv, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentInVoice, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentOutVoice, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActorChannels, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumConsideredActors, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PrioritizedActors, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantActors, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantDeletedActors, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActorAttempts, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActors, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActors, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetActors, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumDormantActors, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumInitiallyDormantActors, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsAckd, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsPending, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsUnAckd, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, ObjPathBytes, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDOutRate, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDInRate, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetSaturated, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_9GEL, 0x03EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerStatReplicator, 0x03F0);
		}

		// class UShadowMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_H8HV, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x00F0);
		}

		// class USimpleConstructionScript : public UObject
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_SVVS, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00A0);
		}

		// class ASkeletalMeshActor : public AActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_8RF7, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_JA0K, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_NJPO, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x03B0);
		}

		// class USkeletalMeshSocket : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_JP9T, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0060);
		}

		// class ASkyLight : public AInfo
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_WSQ8, 0x0331);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0338);
		}

		// class USkyLightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceType, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_QKWQ, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_QQ4D, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_G43Z, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_1Z99, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x0410);
		}

		// class UForceFeedbackAttenuation : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00C8);
		}

		// class UMaterialExpressionSceneColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_LAI1, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_FXUP, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_0HFC, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x0080);
		}

		// class UMaterialExpressionTruncate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, UnknownData_3B2N, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0058);
		}

		// class UMaterialExpressionTwoSidedSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0040);
		}

		// class UMaterialExpressionVectorNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_AEQC, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_7RJP, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Quality, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_Y3X8, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x0068);
		}

		// class UMaterialExpressionVertexColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0040);
		}

		// class UParticleModuleBeamModifier : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_KQKS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_QOMN, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_5YZD, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0120);
		}

		// class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0028);
		}

		// class UKismetStringLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0028);
		}

		// class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0028);
		}

		// class UKismetSystemLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0028);
		}

		// class UKismetTextLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0028);
		}

		// class ULightmassPrimitiveSettingsObject : public UObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0040);
		}

		// class ALODActor : public AActor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, StaticMeshComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Proxy, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Key, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODDrawDistance, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_5VVW, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubActors, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODLevel, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_F3H1, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, CachedNumHLODLevels, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_5KQJ, 0x0371);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODActor, 0x0378);
		}

		// class UMapBuildDataRegistry : public UObject
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_XQJ7, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x01C8);
		}

		// class UMaterial : public UMaterialInterface
		TEST_METHOD(Class__Engine__Material)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_N0HB, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_LJN5, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_VMDN, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_MWA7, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_RDAQ, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_98LO, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_41RM, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_70YT, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_U2IP, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_WGQV, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_7UXK, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_M5VR, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_HARL, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_KU3P, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_O2GT, 0x01AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaxDisplacement, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_1B85, 0x01B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Expressions, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialFunctionInfos, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialParameterCollectionInfos, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_YT3T, 0x01EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_NVKK, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableOutputAlpha, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionMode, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_WPSO, 0x01FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_KAB9, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CachedQualityLevelsUsed, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_G9E6, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ExpressionTextureReferences, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x02C0);
		}

		// class UMaterialBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, UnknownData_A746, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0570);
		}

		// class UMaterialExpressionAppendVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_1HN2, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_6BWL, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x0070);
		}

		// class UMaterialExpressionArccosineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, UnknownData_VRKZ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0058);
		}

		// class UMaterialExpressionArcsineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, UnknownData_NJ7F, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0058);
		}

		// class UMaterialExpressionArctangent2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_XN7T, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, X, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_XVC3, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x0070);
		}

		// class UMaterialExpressionArctangent2Fast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_UB9U, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, X, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_GKRI, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x0070);
		}

		// class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, UnknownData_7AKP, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0058);
		}

		// class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0040);
		}

		// class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0040);
		}

		// class UMaterialExpressionBlackBody : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, UnknownData_KI6O, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0058);
		}

		// class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_5UY7, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_6B79, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_OQET, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_WHLD, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x00A0);
		}

		// class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0078);
		}

		// class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0088);
		}

		// class ULayer : public UObject
		TEST_METHOD(Class__Engine__Layer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_89RN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0048);
		}

		// class UMaterialExpressionCeil : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, UnknownData_WUMP, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0058);
		}

		// class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0068);
		}

		// class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionChannelMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, MaskChannel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_UB4Q, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, Input, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_512P, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionChannelMaskParameter, 0x0088);
		}

		// class UMaterialExpressionClamp : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_M70V, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_TS89, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_QA4O, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_E7O4, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_72NC, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0098);
		}

		// class UMaterialExpressionConstant3Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0050);
		}

		// class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCurveAtlasRowParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Curve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Atlas, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, InputTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, UnknownData_ITZY, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCurveAtlasRowParameter, 0x0088);
		}

		// class UMaterialExpressionDDX : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, UnknownData_T5RN, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0058);
		}

		// class UMaterialExpressionNormalize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, UnknownData_35SU, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0058);
		}

		// class UMaterialExpressionObjectBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0040);
		}

		// class UMaterialExpressionObjectOrientation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0040);
		}

		// class UMaterialExpressionObjectPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0040);
		}

		// class UMaterialExpressionObjectRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0040);
		}

		// class UMaterialExpressionReroute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, UnknownData_7KGQ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0058);
		}

		// class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_U2X3, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_8MIB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_S56F, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Position, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_AEP8, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_FNJW, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x00A8);
		}

		// class UMaterialExpressionRotator : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_6WHD, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_860G, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x0080);
		}

		// class UMaterialExpressionSaturate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, UnknownData_5O1V, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0058);
		}

		// class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0048);
		}

		// class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0070);
		}

		// class UMaterialExpressionCustom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Code, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_A0P3, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x0078);
		}

		// class UMaterialExpressionDDY : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, UnknownData_7F1B, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0058);
		}

		// class UMaterialExpressionDecalDerivative : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0040);
		}

		// class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0040);
		}

		// class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_F078, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x0060);
		}

		// class UMaterialExpressionDepthFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_TAGK, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_XR7D, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x0078);
		}

		// class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, UnknownData_ASBX, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0058);
		}

		// class UMaterialExpressionFmod : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_C5E1, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_2C14, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x0070);
		}

		// class UMaterialExpressionFontSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_393L, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0050);
		}

		// class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0070);
		}

		// class UMaterialExpressionFrac : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, UnknownData_DYLB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0058);
		}

		// class UMaterialExpressionSceneDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_OFOU, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_ATT7, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_VU4C, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0080);
		}

		// class UMaterialExpressionSceneTexelSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0040);
		}

		// class UMaterialExpressionSceneTexture : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_WCO2, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_DJKV, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x0060);
		}

		// class UMaterialExpressionScreenPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0040);
		}

		// class UMaterialExpressionSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_5391, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Index, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_GGED, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Seed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_I1MR, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_7TZT, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x0098);
		}

		// class UMaterialExpressionSpeedTree : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_SJPS, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_CK54, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_ICK8, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, ExtraBendWS, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_J7R7, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_W80T, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_4588, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x00B0);
		}

		// class UMaterialExpressionSphereMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_NNAK, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_P44H, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_8J8B, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_0EIU, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x00A8);
		}

		// class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_8FTD, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_5G4L, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x0060);
		}

		// class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_86O1, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, B, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_UL0J, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x0090);
		}

		// class UMaterialExpressionSubtract : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_8TKM, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_0F42, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x0078);
		}

		// class UMaterialExpressionTangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_G4M4, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_INIX, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x0060);
		}

		// class UMaterialExpressionTemporalSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Index, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_N8FV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Seed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_VPPM, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_YIQX, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x0080);
		}

		// class UMaterialExpressionTextureCoordinate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_06TG, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0050);
		}

		// class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0050);
		}

		// class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x0118);
		}

		// class UMaterialExpressionTextureProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_5I9G, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_ALAY, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x0060);
		}

		// class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x0118);
		}

		// class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_LF1V, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x0120);
		}

		// class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterVolume, 0x0118);
		}

		// class UMaterialExpressionTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_Y0FU, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0048);
		}

		// class UMaterialExpressionTransform : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_AJ5A, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_NY1K, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x0060);
		}

		// class UMaterialExpressionTransformPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_0SD8, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_OZEM, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x0060);
		}

		// class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_C5XQ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x0068);
		}

		// class UMaterialExpressionVertexNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0040);
		}

		// class UMaterialExpressionViewProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_AT2H, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0048);
		}

		// class UMaterialExpressionViewSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0040);
		}

		// class UMaterialExpressionWorldPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_RYPR, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0048);
		}

		// class UMaterialFunctionInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialFunctionInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, MaterialFunctionUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, UnknownData_HCKW, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInterface, 0x0040);
		}

		// class UMaterialFunction : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_BO1W, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, FunctionExpressions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_82U5, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0070);
		}

		// class UMaterialFunctionInstance : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunctionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Parent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, ScalarParameterValues, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, VectorParameterValues, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, TextureParameterValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, FontParameterValues, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticSwitchParameterValues, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticComponentMaskParameterValues, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInstance, 0x00B0);
		}

		// class UMaterialFunctionMaterialLayer : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayer, 0x0070);
		}

		// class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerInstance, 0x00B0);
		}

		// class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlend, 0x0070);
		}

		// class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlendInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlendInstance, 0x00B0);
		}

		// class AMaterialInstanceActor : public AActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0338);
		}

		// class UMaterialInstanceDynamic : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_33C6, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x0238);
		}

		// class UMaterialParameterCollection : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_5F5S, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0068);
		}

		// class UMaterialParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_BXLK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_JU6L, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x00F0);
		}

		// class AMatineeActor : public AActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_Y945, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_GWOJ, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_BB9K, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_L1XH, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_Q62F, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_CSVC, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_G1VN, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPlay, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnStop, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPause, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_DQNN, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x03D0);
		}

		// class AMatineeActorCameraAnim : public AMatineeActor
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x03D8);
		}

		// class UMatineeAnimInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0028);
		}

		// class UMatineeInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0028);
		}

		// class AMeshMergeCullingVolume : public AVolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMeshMergeCullingVolume, 0x0360);
		}

		// class UMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__MeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, MeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSimplificationSettings, 0x0040);
		}

		// class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0028);
		}

		// class UMicroTransactionBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0068);
		}

		// class UModelComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_B17W, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_6IH3, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_8GZ1, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x05A0);
		}

		// class UMorphTarget : public UObject
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_7N53, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0040);
		}

		// class UNavAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0028);
		}

		// class UNavCollisionBase : public UObject
		TEST_METHOD(Class__Engine__NavCollisionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollisionBase, UnknownData_GVGK, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollisionBase, 0x0070);
		}

		// class UNavEdgeProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0028);
		}

		// class UNavigationDataChunk : public UObject
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0030);
		}

		// class UNavigationDataInterface : public UInterface
		TEST_METHOD(Class__Engine__NavigationDataInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataInterface, 0x0028);
		}

		// class UNavigationSystemBase : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemBase, 0x0028);
		}

		// class UNavigationSystem : public UObject
		TEST_METHOD(Class__Engine__NavigationSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_AD3N, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystem, 0x0038);
		}

		// class UNavigationSystemConfig : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, NavigationSystemClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, UnknownData_11JF, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemConfig, 0x0048);
		}

		// class UNullNavSysConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__Engine__NullNavSysConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullNavSysConfig, 0x0048);
		}

		// class UNavLinkDefinition : public UObject
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_X16V, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0050);
		}

		// class UNavPathObserverInterface : public UInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0028);
		}

		// class UNavRelevantInterface : public UInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0028);
		}

		// class USimulatedClientNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__SimulatedClientNetConnection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimulatedClientNetConnection, 0x1918);
		}

		// class UNetworkPredictionInterface : public UInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0028);
		}

		// class UNetworkSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_UKMA, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_XAWF, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0048);
		}

		// class UNodeMappingContainer : public UObject
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceItems, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetItems, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceToTarget, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetAsset, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x0168);
		}

		// class UNodeMappingProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0028);
		}

		// class ANote : public AActor
		TEST_METHOD(Class__Engine__Note)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0328);
		}

		// class UObjectLibrary : public UObject
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_SKZ6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_HKGU, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x00A8);
		}

		// class UObjectReferencer : public UObject
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0038);
		}

		// class UPackageMapClient : public UPackageMap
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_HEZH, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x0380);
		}

		// class APainCausingVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_3UG0, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_TUSV, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_6D31, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x0398);
		}

		// class AParticleEventManager : public AActor
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0328);
		}

		// class UParticleLODLevel : public UObject
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_VLNQ, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_VFGC, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00B8);
		}

		// class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00B8);
		}

		// class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_ZNFS, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_843D, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_WXAR, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_4MON, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00C0);
		}

		// class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_BOAD, 0x00F2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00F8);
		}

		// class USoundNodeDialoguePlayer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_O7JF, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0060);
		}

		// class UAndroidHapticLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HapticsManager__AndroidHapticLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidHapticLibrary, 0x0028);
		}

		// class UBhapticsRequestLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HapticsManager__BhapticsRequestLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBhapticsRequestLibrary, 0x0028);
		}

		// class UFeedbackFile : public UObject
		TEST_METHOD(Class__HapticsManager__FeedbackFile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackFile, Key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackFile, ProjectString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackFile, ID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackFile, Device, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackFile, Duration, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeedbackFile, UnknownData_87FD, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFeedbackFile, 0x0070);
		}

		// class UFootFeedbackFile : public UFeedbackFile
		TEST_METHOD(Class__HapticsManager__FootFeedbackFile)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFootFeedbackFile, 0x0070);
		}

		// class UHandFeedbackFile : public UFeedbackFile
		TEST_METHOD(Class__HapticsManager__HandFeedbackFile)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandFeedbackFile, 0x0070);
		}

		// class UHapticDevice : public UObject
		TEST_METHOD(Class__HapticsManager__HapticDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticDevice, DeviceData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticDevice, DidUpdateDevice, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticDevice, IsDarkMode, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticDevice, UnknownData_EQ6G, 0x007A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticDevice, 0x0080);
		}

		// class UHapticsData : public UActorComponent
		TEST_METHOD(Class__HapticsManager__HapticsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticsData, HapticLookupTable, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticsData, HitFeedbackFiles, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticsData, ExplosionFeedbackFiles, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticsData, ZombieHitFeedback, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticsData, R_Leg, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticsData, L_Leg, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticsData, 0x0158);
		}

		// class UHapticSettings : public UDeveloperSettings
		TEST_METHOD(Class__HapticsManager__HapticSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticSettings, bShouldLaunch, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticSettings, UnknownData_M7H6, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticSettings, 0x0040);
		}

		// class AHapticsManagerActor : public AActor
		TEST_METHOD(Class__HapticsManager__HapticsManagerActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHapticsManagerActor, UnknownData_QHOS, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHapticsManagerActor, 0x03C0);
		}

		// class UTactalFeedbackFile : public UFeedbackFile
		TEST_METHOD(Class__HapticsManager__TactalFeedbackFile)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTactalFeedbackFile, 0x0070);
		}

		// class UTactosyFeedbackFile : public UFeedbackFile
		TEST_METHOD(Class__HapticsManager__TactosyFeedbackFile)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTactosyFeedbackFile, 0x0070);
		}

		// class UTactotFeedbackFile : public UFeedbackFile
		TEST_METHOD(Class__HapticsManager__TactotFeedbackFile)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTactotFeedbackFile, 0x0070);
		}

		// class UCustomMeshComponent : public UMeshComponent
		TEST_METHOD(Class__CustomMeshComponent__CustomMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_GVL5, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshComponent, 0x0590);
		}

		// class UJsonUtilitiesDummyObject : public UObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0028);
		}

		// class USkin_Custom_C : public UAvatarSkinCustom
		TEST_METHOD(BlueprintGeneratedClass__Skin_Custom__Skin_Custom_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkin_Custom_C, 0x0190);
		}

		// class UCoherentRenderingSettings : public UObject
		TEST_METHOD(Class__CoherentRenderingPlugin__CoherentRenderingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoherentRenderingSettings, RenderingLogSeverity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoherentRenderingSettings, ShowWarningsOnScreen, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoherentRenderingSettings, UnknownData_M0ZX, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoherentRenderingSettings, DeveloperOptions, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoherentRenderingSettings, 0x0040);
		}

		// class UCohTextureUserWrapData : public UObject
		TEST_METHOD(Class__CoherentRenderingPlugin__CohTextureUserWrapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohTextureUserWrapData, UnknownData_MFVW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCohTextureUserWrapData, Texture, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCohTextureUserWrapData, 0x0078);
		}

		// class UUdpMessagingSettings : public UObject
		TEST_METHOD(Class__UdpMessaging__UdpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_ZPSJ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnicastEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastEndpoint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastTimeToLive, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_FOUB, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, StaticEndpoints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTunnel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_I98I, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelUnicastEndpoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelMulticastEndpoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, RemoteTunnelEndpoints, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUdpMessagingSettings, 0x00A0);
		}

		// class UInputCoreTypes : public UObject
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0028);
		}

		// class UUI_Watch_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Watch__UI_Watch_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Watch_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Watch_C, BarArmor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Watch_C, BarBG, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Watch_C, BarHealth, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Watch_C, Base, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Watch_C, CanvasPanel_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Watch_C, Helmet, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Watch_C, Overlay, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Watch_C, VictimAvatar, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Watch_C, Angle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Watch_C, UnknownData_DVCG, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Watch_C, Logic, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Watch_C, ScaleCurve, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Watch_C, 0x0268);
		}

		// class UWoundComponent_Infinitum_C : public UWoundComponent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__WoundComponent_Infinitum__WoundComponent_Infinitum_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWoundComponent_Infinitum_C, 0x02E8);
		}

		// class ASkullWound_Back_C : public ASkullWound_Base_C
		TEST_METHOD(BlueprintGeneratedClass__SkullWound_Back__SkullWound_Back_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkullWound_Back_C, 0x03C8);
		}

		// class UModularSynthPresetBank : public UObject
		TEST_METHOD(Class__Synthesis__ModularSynthPresetBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthPresetBank, Presets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthPresetBank, 0x0038);
		}

		// class UModularSynthLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__ModularSynthLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthLibrary, 0x0028);
		}

		// class UModularSynthComponent : public USynthComponent
		TEST_METHOD(Class__Synthesis__ModularSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, VoiceCount, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, UnknownData_J3DZ, 0x05C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthComponent, 0x0C40);
		}

		// class USourceEffectBitCrusherPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectBitCrusherPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, UnknownData_YCWC, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, Settings, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectBitCrusherPreset, 0x0078);
		}

		// class USourceEffectChorusPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectChorusPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, UnknownData_LFTZ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, Settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectChorusPreset, 0x0098);
		}

		// class USourceEffectDynamicsProcessorPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, UnknownData_LBFH, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, Settings, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectDynamicsProcessorPreset, 0x00B8);
		}

		// class UEnvelopeFollowerListener : public UActorComponent
		TEST_METHOD(Class__Synthesis__EnvelopeFollowerListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, OnEnvelopeFollowerUpdate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, UnknownData_W5QE, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvelopeFollowerListener, 0x0110);
		}

		// class USourceEffectEnvelopeFollowerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEnvelopeFollowerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, UnknownData_UG6B, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEnvelopeFollowerPreset, 0x0080);
		}

		// class USourceEffectEQPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, UnknownData_XK4W, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEQPreset, 0x0088);
		}

		// class USourceEffectFilterPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, UnknownData_9WN5, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFilterPreset, 0x0080);
		}

		// class USourceEffectFoldbackDistortionPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFoldbackDistortionPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, UnknownData_E811, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFoldbackDistortionPreset, 0x0080);
		}

		// class USourceEffectPannerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPannerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, UnknownData_EQSI, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, Settings, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPannerPreset, 0x0070);
		}

		// class USourceEffectPhaserPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPhaserPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, UnknownData_W9F7, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPhaserPreset, 0x0088);
		}

		// class USourceEffectRingModulationPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectRingModulationPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, UnknownData_0MVQ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, Settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectRingModulationPreset, 0x0090);
		}

		// class USourceEffectSimpleDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectSimpleDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, UnknownData_2P7L, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, Settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectSimpleDelayPreset, 0x0098);
		}

		// class USourceEffectStereoDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectStereoDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, UnknownData_1VPA, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, Settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectStereoDelayPreset, 0x0090);
		}

		// class USourceEffectWaveShaperPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectWaveShaperPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, UnknownData_5M8O, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, Settings, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectWaveShaperPreset, 0x0078);
		}

		// class USubmixEffectDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_9MWI, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, Settings, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, DynamicSettings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_2ENR, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDelayPreset, 0x0090);
		}

		// class USubmixEffectFilterPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, UnknownData_ROMC, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFilterPreset, 0x0080);
		}

		// class USubmixEffectFlexiverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFlexiverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, UnknownData_6NLG, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFlexiverbPreset, 0x0088);
		}

		// class USubmixEffectTapDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectTapDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_QDC7, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, Settings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_KQVU, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectTapDelayPreset, 0x00B0);
		}

		// class USynth2DSlider : public UWidget
		TEST_METHOD(Class__Synthesis__Synth2DSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueX, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueY, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueXDelegate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueYDelegate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, SliderHandleColor, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IndentHandle, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, Locked, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_NK01, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, StepSize, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IsFocusable, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_5GWM, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureBegin, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureEnd, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureBegin, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureEnd, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedX, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedY, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_7P80, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynth2DSlider, 0x0470);
		}

		// class UGranularSynth : public USynthComponent
		TEST_METHOD(Class__Synthesis__GranularSynth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, GranulatedSoundWave, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, UnknownData_SBX8, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGranularSynth, 0x0910);
		}

		// class USynthSamplePlayer : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthSamplePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, SoundWave, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSampleLoaded, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSamplePlaybackProgress, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, UnknownData_ZLW3, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSamplePlayer, 0x06E0);
		}

		// class USynthKnob : public UWidget
		TEST_METHOD(Class__Synthesis__SynthKnob)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Value, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, StepSize, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseSpeed, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseFineTuneSpeed, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_PP17, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterUnits, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ValueDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, WidgetStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Locked, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, IsFocusable, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_LH3C, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureBegin, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureEnd, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureBegin, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureEnd, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnValueChanged, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_4432, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthKnob, 0x03F8);
		}

		// class AAIController : public AController
		TEST_METHOD(Class__AIModule__AIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_U6N3, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_TSC0, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PathFollowingComponent, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, BrainComponent, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PerceptionComponent, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ActionsComp, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, Blackboard, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, CachedGameplayTasksComponent, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, DefaultNavigationFilterClass, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ReceiveMoveCompleted, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_TR4W, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController, 0x0438);
		}

		// class UBTNode : public UObject
		TEST_METHOD(Class__AIModule__BTNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_10KC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, NodeName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, TreeAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, ParentNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_O20K, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTNode, 0x0058);
		}

		// class UBTTaskNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTTaskNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, Services, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, UnknownData_7E90, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTaskNode, 0x0070);
		}

		// class UBTTask_BlackboardBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlackboardBase, 0x0098);
		}

		// class UEnvQueryNode : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, VerNum, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, UnknownData_81E4, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryNode, 0x0030);
		}

		// class UEnvQueryGenerator : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, OptionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, ItemType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, UnknownData_7WCL, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator, 0x0050);
		}

		// class UEnvQueryTest : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestPurpose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_YPD6, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestComment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextFilterOp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextScoreOp, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FilterType, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_EN5J, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, BoolValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMin, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMax, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_WFAL, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringEquation, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMinType, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMaxType, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, NormalizationType, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_BFAS, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMin, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMax, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringFactor, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ReferenceValue, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, bDefineReferenceValue, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_IHDC, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_3AG9, 0x01B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest, 0x01C0);
		}

		// class UEnvQueryContext : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryContext)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext, 0x0028);
		}

		// class UAIDataProvider : public UObject
		TEST_METHOD(Class__AIModule__AIDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider, 0x0028);
		}

		// class UAIDataProvider_QueryParams : public UAIDataProvider
		TEST_METHOD(Class__AIModule__AIDataProvider_QueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, ParamName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, FloatValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, IntValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, BoolValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, UnknownData_ZCEB, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_QueryParams, 0x0040);
		}

		// class ANavLinkProxy : public AActor
		TEST_METHOD(Class__AIModule__NavLinkProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_A26X, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, PointLinks, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SegmentLinks, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SmartLinkComp, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, bSmartLinkIsRelevant, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_UFPD, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, OnSmartLinkReached, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavLinkProxy, 0x0378);
		}

		// class UPathFollowingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_J92F, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MovementComp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_ICHB, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MyNavData, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_SU4E, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingComponent, 0x0298);
		}

		// class UAIAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AIModule__AIAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnFail, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, UnknownData_U14Y, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIAsyncTaskBlueprintProxy, 0x0068);
		}

		// class UAIBlueprintHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__AIBlueprintHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBlueprintHelperLibrary, 0x0028);
		}

		// class UAIDataProvider_Random : public UAIDataProvider_QueryParams
		TEST_METHOD(Class__AIModule__AIDataProvider_Random)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Max, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, UnknownData_G9SG, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_Random, 0x0050);
		}

		// class UAIHotSpotManager : public UObject
		TEST_METHOD(Class__AIModule__AIHotSpotManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHotSpotManager, 0x0028);
		}

		// class UAIPerceptionComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, SensesConfig, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, DominantSense, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_9QKS, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, AIOwner, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_611U, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnPerceptionUpdated, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionUpdated, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionComponent, 0x01C0);
		}

		// class UAIPerceptionListenerInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIPerceptionListenerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionListenerInterface, 0x0028);
		}

		// class UAIPerceptionStimuliSourceComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionStimuliSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, UnknownData_V8UL, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, RegisterAsSourceForSenses, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionStimuliSourceComponent, 0x0108);
		}

		// class UAIPerceptionSystem : public UObject
		TEST_METHOD(Class__AIModule__AIPerceptionSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_AB6U, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, Senses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, PerceptionAgingRate, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_CNDL, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionSystem, 0x0130);
		}

		// class UAIResourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIResourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResourceInterface, 0x0028);
		}

		// class UAIResource_Movement : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Movement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Movement, 0x0038);
		}

		// class UAIResource_Logic : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Logic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Logic, 0x0038);
		}

		// class UAISense : public UObject
		TEST_METHOD(Class__AIModule__AISense)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, DefaultExpirationAge, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, NotifyType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_X3NH, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_TJSF, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, PerceptionSystemInstance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_0PW2, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense, 0x0088);
		}

		// class UAISense_Blueprint : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerDataType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerContainer, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, UnprocessedEvents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Blueprint, 0x00B0);
		}

		// class UAISense_Damage : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Damage, RegisteredEvents, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Damage, 0x0098);
		}

		// class UAISense_Hearing : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, NoiseEvents, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, SpeedOfSoundSq, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, UnknownData_EMJN, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Hearing, 0x00F0);
		}

		// class UAISense_Prediction : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Prediction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Prediction, RegisteredEvents, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Prediction, 0x0098);
		}

		// class UAISense_Sight : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_DHC0, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTracesPerTick, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MinQueriesPerTimeSliceCheck, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTimeSlicePerTick, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, HighImportanceQueryDistanceThreshold, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_XYYD, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxQueryImportance, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, SightLimitQueryImportance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_JQPT, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Sight, 0x0160);
		}

		// class UAISense_Team : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Team)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Team, RegisteredEvents, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Team, 0x0098);
		}

		// class UAISense_Touch : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Touch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Touch, RegisteredEvents, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Touch, 0x0098);
		}

		// class UAISenseBlueprintListener : public UUserDefinedStruct
		TEST_METHOD(Class__AIModule__AISenseBlueprintListener)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseBlueprintListener, 0x00E0);
		}

		// class UAISenseConfig : public UObject
		TEST_METHOD(Class__AIModule__AISenseConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, DebugColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, MaxAge, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, UnknownData_PQN5, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig, 0x0048);
		}

		// class UAISenseConfig_Blueprint : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Blueprint, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Blueprint, 0x0050);
		}

		// class UAISenseConfig_Damage : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Damage, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Damage, 0x0050);
		}

		// class UAISenseConfig_Hearing : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, LoSHearingRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_HR25, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, DetectionByAffiliation, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Hearing, 0x0060);
		}

		// class UAISenseConfig_Prediction : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Prediction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Prediction, 0x0048);
		}

		// class UAISenseConfig_Sight : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, SightRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, LoseSightRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PeripheralVisionAngleDegrees, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, DetectionByAffiliation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, AutoSuccessRangeFromLastSeenLocation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, UnknownData_7NGR, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Sight, 0x0068);
		}

		// class UAISenseConfig_Team : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Team)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Team, 0x0048);
		}

		// class UAISenseConfig_Touch : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Touch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Touch, 0x0048);
		}

		// class UAISenseEvent : public UObject
		TEST_METHOD(Class__AIModule__AISenseEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent, 0x0028);
		}

		// class UAISenseEvent_Damage : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Damage, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Damage, 0x0058);
		}

		// class UAISenseEvent_Hearing : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Hearing, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Hearing, 0x0058);
		}

		// class UAISightTargetInterface : public UInterface
		TEST_METHOD(Class__AIModule__AISightTargetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISightTargetInterface, 0x0028);
		}

		// class UAISystem : public UAISystemBase
		TEST_METHOD(Class__AIModule__AISystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystemClassName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManagerClassName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AcceptanceRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingRegularPathPointAcceptanceRadius, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingNavLinkAcceptanceRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bFinishMoveOnGoalOverlap, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAcceptPartialPaths, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowStrafing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableBTAITasks, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowControllersAsEQSQuerier, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableDebuggerPlugin, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, DefaultSightCollisionChannel, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_NDWW, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, BehaviorTreeManager, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, EnvironmentQueryManager, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystem, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AllProxyObjects, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManager, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, NavLocalGrids, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_5GEM, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystem, 0x0130);
		}

		// class UAITask : public UGameplayTask
		TEST_METHOD(Class__AIModule__AITask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask, OwnerController, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask, 0x0070);
		}

		// class UAITask_LockLogic : public UAITask
		TEST_METHOD(Class__AIModule__AITask_LockLogic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_LockLogic, 0x0070);
		}

		// class UAITask_MoveTo : public UAITask
		TEST_METHOD(Class__AIModule__AITask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnRequestFailed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnMoveFinished, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, MoveRequest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, UnknownData_BG2G, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_MoveTo, 0x0110);
		}

		// class UAITask_RunEQS : public UAITask
		TEST_METHOD(Class__AIModule__AITask_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_RunEQS, UnknownData_8LM0, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_RunEQS, 0x00E8);
		}

		// class UBehaviorTree : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootNode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, BlackboardAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecorators, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecoratorOps, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_I41B, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTree, 0x0060);
		}

		// class UBrainComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_Q0B9, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, BlackboardComp, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, AIOwner, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_DC5E, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrainComponent, 0x0150);
		}

		// class UBehaviorTreeComponent : public UBrainComponent
		TEST_METHOD(Class__AIModule__BehaviorTreeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_QZDT, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, NodeInstances, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_J532, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeComponent, 0x02A0);
		}

		// class UBehaviorTreeManager : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, MaxDebuggerSteps, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, UnknownData_TLM0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, LoadedTemplates, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, ActiveComponents, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeManager, 0x0050);
		}

		// class UBehaviorTreeTypes : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeTypes, 0x0028);
		}

		// class UBlackboardComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BlackboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BrainComp, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BlackboardAsset, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_A5Q3, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, KeyInstances, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_503K, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardComponent, 0x01E8);
		}

		// class UBlackboardData : public UDataAsset
		TEST_METHOD(Class__AIModule__BlackboardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Parent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Keys, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, UnknownData_YM2P, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardData, 0x0050);
		}

		// class UBlackboardKeyType : public UObject
		TEST_METHOD(Class__AIModule__BlackboardKeyType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType, UnknownData_M2P2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType, 0x0030);
		}

		// class UBlackboardKeyType_Bool : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Bool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Bool, 0x0030);
		}

		// class UBlackboardKeyType_Class : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Class, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Class, 0x0038);
		}

		// class UBlackboardKeyType_Enum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, UnknownData_YMST, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Enum, 0x0050);
		}

		// class UBlackboardKeyType_Float : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Float)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Float, 0x0030);
		}

		// class UBlackboardKeyType_Int : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Int)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Int, 0x0030);
		}

		// class UBlackboardKeyType_Name : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Name)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Name, 0x0030);
		}

		// class UBlackboardKeyType_NativeEnum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_NativeEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumType, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_NativeEnum, 0x0048);
		}

		// class UBlackboardKeyType_Object : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Object, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Object, 0x0038);
		}

		// class UBlackboardKeyType_Rotator : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Rotator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Rotator, 0x0030);
		}

		// class UBlackboardKeyType_String : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_String)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_String, StringValue, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_String, 0x0040);
		}

		// class UBlackboardKeyType_Vector : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Vector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Vector, 0x0030);
		}

		// class UBTAuxiliaryNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTAuxiliaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTAuxiliaryNode, UnknownData_C0X2, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTAuxiliaryNode, 0x0060);
		}

		// class UBTCompositeNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTCompositeNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Children, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Services, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_KQYS, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_MSIW, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTCompositeNode, 0x0090);
		}

		// class UBTComposite_Selector : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Selector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Selector, 0x0090);
		}

		// class UBTComposite_Sequence : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Sequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Sequence, 0x0090);
		}

		// class UBTComposite_SimpleParallel : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_SimpleParallel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, FinishMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, UnknownData_T7TP, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_SimpleParallel, 0x0098);
		}

		// class UBTDecorator : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_P495, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, FlowAbortMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_DOKY, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator, 0x0068);
		}

		// class UBTDecorator_BlackboardBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, BlackboardKey, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlackboardBase, 0x0090);
		}

		// class UBTDecorator_Blackboard : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_Blackboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, IntValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, FloatValue, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, StringValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, CachedDescription, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, OperationType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, NotifyObserver, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, UnknownData_3LRX, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Blackboard, 0x00C0);
		}

		// class UBTDecorator_BlueprintBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, AIOwner, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ActorOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ObservedKeyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_6PSL, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_EHO9, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlueprintBase, 0x00A0);
		}

		// class UBTDecorator_CheckGameplayTagsOnActor : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CheckGameplayTagsOnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, ActorToCheck, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, TagsToMatch, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, UnknownData_WPGU, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, GameplayTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, CachedDescription, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CheckGameplayTagsOnActor, 0x00C8);
		}

		// class UBTDecorator_CompareBBEntries : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CompareBBEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, Operator, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_X1AU, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyB, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CompareBBEntries, 0x00C0);
		}

		// class UBTDecorator_ConditionalLoop : public UBTDecorator_Blackboard
		TEST_METHOD(Class__AIModule__BTDecorator_ConditionalLoop)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConditionalLoop, 0x00C0);
		}

		// class UBTDecorator_ConeCheck : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ConeCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_ADHR, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeDirection, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, Observed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_RBT1, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConeCheck, 0x00F0);
		}

		// class UBTDecorator_Cooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Cooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, CoolDownTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, UnknownData_MH7G, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Cooldown, 0x0070);
		}

		// class UBTDecorator_DoesPathExist : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_DoesPathExist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_OVUP, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, PathQueryType, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_9VK0, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, FilterClass, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_DoesPathExist, 0x00C8);
		}

		// class UBTDecorator_ForceSuccess : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ForceSuccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ForceSuccess, 0x0068);
		}

		// class UBTDecorator_IsAtLocation : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsAtLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, AcceptableRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_SIBF, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, ParametrizedAcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, GeometricDistanceType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_GETL, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_A8XC, 0x00CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsAtLocation, 0x00D0);
		}

		// class UBTDecorator_IsBBEntryOfClass : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsBBEntryOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsBBEntryOfClass, TestClass, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsBBEntryOfClass, 0x0098);
		}

		// class UBTDecorator_KeepInCone : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_KeepInCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_WCUM, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, Observed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_JE39, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_KeepInCone, 0x00C8);
		}

		// class UBTDecorator_Loop : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Loop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, NumLoops, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, bInfiniteLoop, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_P1XJ, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, InfiniteLoopTimeoutTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_3BY0, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Loop, 0x0078);
		}

		// class UBTDecorator_ReachedMoveGoal : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ReachedMoveGoal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ReachedMoveGoal, 0x0068);
		}

		// class UBTDecorator_SetTagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, UnknownData_FHUZ, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_SetTagCooldown, 0x0078);
		}

		// class UBTDecorator_TagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bActivatesCooldown, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, UnknownData_RI4R, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TagCooldown, 0x0078);
		}

		// class UBTDecorator_TimeLimit : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TimeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimit, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, UnknownData_H77D, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TimeLimit, 0x0070);
		}

		// class UBTFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__BTFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTFunctionLibrary, 0x0028);
		}

		// class UBTService : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTService)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, Interval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, RandomDeviation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, UnknownData_J9HM, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService, 0x0070);
		}

		// class UBTService_BlackboardBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlackboardBase, 0x0098);
		}

		// class UBTService_BlueprintBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_RL6T, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_X8P6, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlueprintBase, 0x0098);
		}

		// class UBTService_DefaultFocus : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_DefaultFocus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, FocusPriority, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, UnknownData_VGZ4, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DefaultFocus, 0x00A0);
		}

		// class UBTService_RunEQS : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, EQSRequest, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, UnknownData_3YO5, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_RunEQS, 0x00F0);
		}

		// class UBTTask_BlueprintBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_U9FP, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_RXZ2, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlueprintBase, 0x00A0);
		}

		// class UBTTask_FinishWithResult : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_FinishWithResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, Result, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, UnknownData_S6IY, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FinishWithResult, 0x0078);
		}

		// class UBTTask_GameplayTaskBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_GameplayTaskBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GameplayTaskBase, UnknownData_HFUH, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_GameplayTaskBase, 0x0078);
		}

		// class UBTTask_MakeNoise : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_MakeNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, Loudnes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, UnknownData_HDPD, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MakeNoise, 0x0078);
		}

		// class UBTTask_MoveTo : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, AcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_FND9, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, FilterClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, ObservedBlackboardValueTolerance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_5RDP, 0x00AE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveTo, 0x00B0);
		}

		// class UBTTask_MoveDirectlyToward : public UBTTask_MoveTo
		TEST_METHOD(Class__AIModule__BTTask_MoveDirectlyToward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, UnknownData_5UX8, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveDirectlyToward, 0x00B8);
		}

		// class UBTTask_PawnActionBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PawnActionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PawnActionBase, 0x0070);
		}

		// class UBTTask_PlayAnimation : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlayAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, AnimationToPlay, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_FX2F, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, MyOwnerComp, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, CachedSkelMesh, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_2IDS, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlayAnimation, 0x00B0);
		}

		// class UBTTask_PlaySound : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaySound, SoundToPlay, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaySound, 0x0078);
		}

		// class UBTTask_PushPawnAction : public UBTTask_PawnActionBase
		TEST_METHOD(Class__AIModule__BTTask_PushPawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PushPawnAction, Action, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PushPawnAction, 0x0078);
		}

		// class UBTTask_RotateToFaceBBEntry : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RotateToFaceBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, Precision, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_FNSM, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RotateToFaceBBEntry, 0x00A0);
		}

		// class UBTTask_RunBehavior : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, BehaviorAsset, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehavior, 0x0078);
		}

		// class UBTTask_RunBehaviorDynamic : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehaviorDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, InjectionTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, DefaultBehaviorAsset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, BehaviorAsset, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehaviorDynamic, 0x0088);
		}

		// class UBTTask_RunEQSQuery : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RunEQSQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryTemplate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryParams, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, RunMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_MVME, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSQueryBlackboardKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, bUseBBKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_2A3L, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSRequest, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_K32W, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunEQSQuery, 0x0150);
		}

		// class UBTTask_SetTagCooldown : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, bAddToExistingDuration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, UnknownData_8BRL, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownDuration, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetTagCooldown, 0x0080);
		}

		// class UBTTask_Wait : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, WaitTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, RandomDeviation, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Wait, 0x0078);
		}

		// class UBTTask_WaitBlackboardTime : public UBTTask_Wait
		TEST_METHOD(Class__AIModule__BTTask_WaitBlackboardTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_WaitBlackboardTime, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_WaitBlackboardTime, 0x00A0);
		}

		// class UCrowdAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__CrowdAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdAgentInterface, 0x0028);
		}

		// class UCrowdFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__CrowdFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_0XK5, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CharacterMovement, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CrowdAgentMoveDirection, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_V97N, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdFollowingComponent, 0x02D8);
		}

		// class UCrowdManager : public UCrowdManagerBase
		TEST_METHOD(Class__AIModule__CrowdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MyNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, AvoidanceConfig, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SamplingPatterns, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgentRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedAgents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedWalls, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, NavmeshCheckInterval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOptimizationInterval, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SeparationDirClamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOffsetRadiusMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, UnknownData_VV6N, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManager, 0x00F0);
		}

		// class ADetourCrowdAIController : public AAIController
		TEST_METHOD(Class__AIModule__DetourCrowdAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADetourCrowdAIController, 0x0438);
		}

		// class UEnvQuery : public UDataAsset
		TEST_METHOD(Class__AIModule__EnvQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, QueryName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, Options, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQuery, 0x0048);
		}

		// class UEnvQueryContext_BlueprintBase : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryContext_BlueprintBase, UnknownData_N2BA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_BlueprintBase, 0x0030);
		}

		// class UEnvQueryContext_Item : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Item)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Item, 0x0028);
		}

		// class UEnvQueryContext_Querier : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Querier)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Querier, 0x0028);
		}

		// class UEnvQueryDebugHelpers : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryDebugHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryDebugHelpers, 0x0028);
		}

		// class UEnvQueryGenerator_ActorsOfClass : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ActorsOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchedActorClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, GenerateOnlyActorsInRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchCenter, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ActorsOfClass, 0x00C0);
		}

		// class UEnvQueryGenerator_BlueprintBase : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratorsActionDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Context, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratedItemType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_MDH8, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_BlueprintBase, 0x0080);
		}

		// class UEnvQueryGenerator_Composite : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Composite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, Generators, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, UnknownData_20EN, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, ForcedItemType, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Composite, 0x0070);
		}

		// class UEnvQueryGenerator_ProjectedPoints : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ProjectedPoints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ProjectedPoints, ProjectionData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ProjectedPoints, 0x0080);
		}

		// class UEnvQueryGenerator_Cone : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Cone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AlignedPointsDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, ConeDegrees, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AngleStep, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, Range, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, CenterActor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, UnknownData_4QQW, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Cone, 0x0150);
		}

		// class UEnvQueryGenerator_CurrentLocation : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_CurrentLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_CurrentLocation, QueryContext, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_CurrentLocation, 0x0058);
		}

		// class UEnvQueryGenerator_Donut : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Donut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, InnerRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, OuterRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, NumberOfRings, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, PointsPerRing, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcDirection, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcAngle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, bUseSpiralPattern, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_5SML, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, Center, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_2IEX, 0x01A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Donut, 0x01A8);
		}

		// class UEnvQueryGenerator_OnCircle : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_OnCircle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, SpaceBetween, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, NumberOfPoints, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, PointOnCircleSpacingMethod, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_KKZI, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcDirection, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcAngle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, AngleRadians, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_NK19, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenter, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, bIgnoreAnyContextActorsWhenGeneratingCircle, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_TIFC, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenterZOffset, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, TraceData, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_RZRD, 0x01E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_OnCircle, 0x01E8);
		}

		// class UEnvQueryGenerator_SimpleGrid : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_SimpleGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GridSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, SpaceBetween, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GenerateAround, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_SimpleGrid, 0x00E8);
		}

		// class UEnvQueryGenerator_PathingGrid : public UEnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_PathingGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, PathToItem, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, NavigationFilter, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, ScanRangeMultiplier, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_PathingGrid, 0x0150);
		}

		// class UEnvQueryInstanceBlueprintWrapper : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryInstanceBlueprintWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_RHR9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_VTR8, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, ItemType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OptionIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_2LBG, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OnQueryFinishedEvent, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryInstanceBlueprintWrapper, 0x0078);
		}

		// class UEnvQueryItemType : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryItemType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryItemType, UnknownData_AKV8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType, 0x0030);
		}

		// class UEnvQueryItemType_VectorBase : public UEnvQueryItemType
		TEST_METHOD(Class__AIModule__EnvQueryItemType_VectorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_VectorBase, 0x0030);
		}

		// class UEnvQueryItemType_ActorBase : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_ActorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_ActorBase, 0x0030);
		}

		// class UEnvQueryItemType_Actor : public UEnvQueryItemType_ActorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Actor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Actor, 0x0030);
		}

		// class UEnvQueryItemType_Direction : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Direction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Direction, 0x0030);
		}

		// class UEnvQueryItemType_Point : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Point)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Point, 0x0030);
		}

		// class UEnvQueryManager : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_5ND1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, InstanceCache, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, LocalContexts, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, GCShieldedWrappers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_4UOV, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, MaxAllowedTestingTime, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, bTestQueriesUsingBreadth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_AD00, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningThreshold, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningInterval, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryManager, 0x0138);
		}

		// class UEnvQueryOption : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Tests, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryOption, 0x0040);
		}

		// class UEnvQueryTest_Distance : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Distance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, TestMode, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, UnknownData_8SWC, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, DistanceTo, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Distance, 0x01D0);
		}

		// class UEnvQueryTest_Dot : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Dot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineA, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineB, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, TestMode, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, bAbsoluteValue, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, UnknownData_YLAI, 0x0202);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Dot, 0x0208);
		}

		// class AEQSTestingPawn : public ACharacter
		TEST_METHOD(Class__AIModule__EQSTestingPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_K04M, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryTemplate, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryParams, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryConfig, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, TimeLimitPerStep, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, StepToDebugDraw, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, HighlightMode, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_D8K7, 0x0771);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_PZR1, 0x0775);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryingMode, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_LE9M, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, NavAgentProperties, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_XXUK, 0x07B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQSTestingPawn, 0x07D0);
		}

		// class UGenericTeamAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__GenericTeamAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTeamAgentInterface, 0x0028);
		}

		// class AGridPathAIController : public AAIController
		TEST_METHOD(Class__AIModule__GridPathAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGridPathAIController, 0x0438);
		}

		// class UGridPathFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__GridPathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, GridManager, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, UnknownData_Z37J, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPathFollowingComponent, 0x02C8);
		}

		// class UNavFilter_AIControllerDefault : public UNavigationQueryFilter
		TEST_METHOD(Class__AIModule__NavFilter_AIControllerDefault)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_AIControllerDefault, 0x0048);
		}

		// class UNavLocalGridManager : public UObject
		TEST_METHOD(Class__AIModule__NavLocalGridManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLocalGridManager, UnknownData_3CLX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLocalGridManager, 0x0058);
		}

		// class UPathFollowingManager : public UObject
		TEST_METHOD(Class__AIModule__PathFollowingManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingManager, 0x0028);
		}

		// class UPawnAction : public UObject
		TEST_METHOD(Class__AIModule__PawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ChildAction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ParentAction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, OwnerComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, Instigator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, BrainComp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_PHP1, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_GFQ3, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction, 0x0098);
		}

		// class UPawnAction_BlueprintBase : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_BlueprintBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_BlueprintBase, 0x0098);
		}

		// class UPawnAction_Move : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Move)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalLocation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, AcceptableRadius, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, FilterClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, UnknownData_DA69, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Move, 0x00E8);
		}

		// class UPawnAction_Repeat : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Repeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ActionToRepeat, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, RecentActionCopy, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, UnknownData_MS5C, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Repeat, 0x00B8);
		}

		// class UPawnAction_Sequence : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Sequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ActionSequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_JX7J, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, RecentActionCopy, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_VF1G, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Sequence, 0x00C0);
		}

		// class UPawnAction_Wait : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, TimeToWait, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, UnknownData_QMP3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Wait, 0x00A8);
		}

		// class UPawnActionsComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnActionsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ControlledPawn, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionStacks, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionEvents, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, CurrentAction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, UnknownData_9CWD, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnActionsComponent, 0x0128);
		}

		// class UPawnSensingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnSensingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingThreshold, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, LOSHearingThreshold, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SightRadius, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SensingInterval, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingMaxSoundAge, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, UnknownData_D970, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnSeePawn, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnHearNoise, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionAngle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionCosine, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnSensingComponent, 0x0138);
		}

		// class UVisualLoggerExtension : public UObject
		TEST_METHOD(Class__AIModule__VisualLoggerExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExtension, 0x0028);
		}

		// class UEnvQueryTest_GameplayTags : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_GameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagQueryToMatch, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, bUpdatedToUseQuery, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagsToMatch, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, UnknownData_18DA, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, GameplayTags, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_GameplayTags, 0x0230);
		}

		// class UEnvQueryTest_Overlap : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Overlap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Overlap, OverlapData, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Overlap, 0x01E0);
		}

		// class UEnvQueryTest_Pathfinding : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Pathfinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, TestMode, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_TLV0, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, Context, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, PathFromContext, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, SkipUnreachable, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, FilterClass, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Pathfinding, 0x0238);
		}

		// class UEnvQueryTest_Project : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Project)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Project, ProjectionData, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Project, 0x01F0);
		}

		// class UEnvQueryTest_Random : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Random)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Random, 0x01C0);
		}

		// class UEnvQueryTest_Trace : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Trace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceData, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceFromContext, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ItemHeightOffset, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ContextHeightOffset, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, Context, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Trace, 0x0288);
		}

		// class UEnvQueryTypes : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTypes, 0x0028);
		}

		// class UEQSQueryResultSourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__EQSQueryResultSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSQueryResultSourceInterface, 0x0028);
		}

		// class UEQSRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__AIModule__EQSRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_N4O3, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_M91C, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSRenderingComponent, 0x0590);
		}

		// class UEnvQueryTest_PathfindingBatch : public UEnvQueryTest_Pathfinding
		TEST_METHOD(Class__AIModule__EnvQueryTest_PathfindingBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_PathfindingBatch, ScanRangeMultiplier, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_PathfindingBatch, 0x0268);
		}

		// class UAnimCustomInstance : public UAnimInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimCustomInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCustomInstance, UnknownData_RYAP, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCustomInstance, 0x0360);
		}

		// class UAnimNotify_PlayMontageNotify : public UAnimNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, NotifyName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0040);
		}

		// class UAnimNotify_PlayMontageNotifyWindow : public UAnimNotifyState
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, NotifyName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0038);
		}

		// class UAnimSequencerInstance : public UAnimCustomInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x0360);
		}

		// class UKismetAnimationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0028);
		}

		// class UPlayMontageCallbackProxy : public UObject
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_DUMZ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x00A8);
		}

		// class UWidgetInteractionComponent : public USceneComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_X5HF, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_UGRN, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_Z175, 0x026B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_0AS0, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_417O, 0x0423);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x0428);
		}

		// class UVisual : public UObject
		TEST_METHOD(Class__UMG__Visual)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0028);
		}

		// class UWidget : public UVisual
		TEST_METHOD(Class__UMG__Widget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visibility, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderOpacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_T26M, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_701C, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0100);
		}

		// class UWidgetComponent : public UMeshComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Space, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TimingPolicy, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_XS94, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_UIFP, 0x059A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_FDUT, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_05MS, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x05BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bApplyGammaCorrection, 0x05BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_M0NV, 0x05BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x05ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x05EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_7H80, 0x05EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_RAOA, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_E2FN, 0x0662);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_1T04, 0x0675);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_MNFX, 0x067C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x06A0);
		}

		// class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0050);
		}

		// class UPanelWidget : public UWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_WF9Z, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0118);
		}

		// class UContentWidget : public UPanelWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0118);
		}

		// class UBackgroundBlur : public UContentWidget
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_FXQA, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_H3LP, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_ZKTQ, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x01D0);
		}

		// class UPanelSlot : public UVisual
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0038);
		}

		// class UBackgroundBlurSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_YLC7, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0060);
		}

		// class UPropertyBinding : public UObject
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0060);
		}

		// class UBoolBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0060);
		}

		// class UBorder : public UContentWidget
		TEST_METHOD(Class__UMG__Border)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_KVKF, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_LV2J, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_4WNF, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x0260);
		}

		// class UBorderSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_XB9C, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0060);
		}

		// class UBrushBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_8XV1, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0068);
		}

		// class UButton : public UContentWidget
		TEST_METHOD(Class__UMG__Button)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, PressMethod, 0x03BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, IsFocusable, 0x03BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_RFHB, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnPressed, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnReleased, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnHovered, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnUnhovered, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_WZ5U, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x0420);
		}

		// class UButtonSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_Q4CX, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0060);
		}

		// class UCanvasPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_3QS6, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0128);
		}

		// class UCanvasPanelSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_X4YG, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_I6PU, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0070);
		}

		// class UCheckBox : public UContentWidget
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_GFDD, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_LYLS, 0x0701);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_XNKB, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, IsFocusable, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_VK4S, 0x0741);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_GLBF, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x0768);
		}

		// class UCheckedStateBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_MUBH, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0068);
		}

		// class UCircularThrobber : public UWidget
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_FXRD, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_Q4SV, 0x01A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01B8);
		}

		// class UColorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_K6P2, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0068);
		}

		// class UComboBox : public UWidget
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, Items, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_WEJO, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0138);
		}

		// class UComboBoxString : public UWidget
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0BC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0BC5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_TWGF, 0x0BC6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_R03X, 0x0C49);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_92B0, 0x0C80);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0CC0);
		}

		// class UDragDropOperation : public UObject
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_UGL1, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_ENO4, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0088);
		}

		// class UDynamicEntryBox : public UWidget
		TEST_METHOD(Class__UMG__DynamicEntryBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryBoxType, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_523Y, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntrySpacing, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_65HV, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, SpacingPattern, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntrySizeRule, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryHorizontalAlignment, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryVerticalAlignment, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_QNV6, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, MaxElementSize, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_YNYV, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryWidgetClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_Y1KB, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBox, 0x01D0);
		}

		// class UEditableText : public UWidget
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Text, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_48VS, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x041B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardOptions, 0x041F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardDismissAction, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Justification, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_1GRY, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_N6MB, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x0458);
		}

		// class UEditableTextBox : public UWidget
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Text, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x09D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_I6U8, 0x09DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x09DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x09F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x09F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x09F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x09F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x09F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x09F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardOptions, 0x09F7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardDismissAction, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Justification, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x09FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_RAE4, 0x09FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_XCZA, 0x0A20);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0A30);
		}

		// class UExpandableArea : public UWidget
		TEST_METHOD(Class__UMG__ExpandableArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_JBZJ, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, Style, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, bIsExpanded, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_W59K, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, MaxHeight, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderPadding, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, AreaPadding, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, OnExpansionChanged, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderContent, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BodyContent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_CW39, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExpandableArea, 0x0330);
		}

		// class UFloatBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0060);
		}

		// class UGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_00EC, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0148);
		}

		// class UGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_G8X2, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Row, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_GGZ4, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0070);
		}

		// class UHorizontalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_LS5O, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0128);
		}

		// class UHorizontalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_H64P, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0060);
		}

		// class UImage : public UWidget
		TEST_METHOD(Class__UMG__Image)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_UFG9, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x01E8);
		}

		// class UInputKeySelector : public UWidget
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_LHX9, 0x062A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_IF1Y, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x0670);
		}

		// class UInt32Binding : public UPropertyBinding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0060);
		}

		// class UInvalidationBox : public UContentWidget
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_RCUJ, 0x011A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0130);
		}

		// class UNativeUserListEntry : public UInterface
		TEST_METHOD(Class__UMG__NativeUserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeUserListEntry, 0x0028);
		}

		// class UUserListEntry : public UNativeUserListEntry
		TEST_METHOD(Class__UMG__UserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntry, 0x0028);
		}

		// class UUserObjectListEntry : public UUserListEntry
		TEST_METHOD(Class__UMG__UserObjectListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntry, 0x0028);
		}

		// class UListViewBase : public UWidget
		TEST_METHOD(Class__UMG__ListViewBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryGenerated, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryReleased, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_O78R, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewBase, 0x0208);
		}

		// class UListView : public UListViewBase
		TEST_METHOD(Class__UMG__ListView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_KXFK, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ConsumeMouseWheel, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bClearSelectionOnClick, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_JRUZ, 0x02B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, EntrySpacing, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ListItems, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_8ZQV, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemClicked, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemDoubleClicked, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemIsHoveredChanged, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemSelectionChanged, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemScrolledIntoView, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0328);
		}

		// class UListViewDesignerPreviewItem : public UObject
		TEST_METHOD(Class__UMG__ListViewDesignerPreviewItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewDesignerPreviewItem, 0x0028);
		}

		// class UMenuAnchor : public UContentWidget
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_R6ML, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_7JDU, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0158);
		}

		// class UMouseCursorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0060);
		}

		// class UMovieScene2DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, TransformMask, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_OK5R, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_4EBR, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0550);
		}

		// class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x0080);
		}

		// class UMovieSceneMarginSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x0360);
		}

		// class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x0080);
		}

		// class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x0080);
		}

		// class UTextLayoutWidget : public UWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x0103);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_X46W, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0120);
		}

		// class UMultiLineEditableText : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Text, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_95MK, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, SelectAllTextWhenFocused, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearTextSelectionOnFocusLoss, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, RevertTextOnEscape, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearKeyboardFocusOnCommit, 0x03AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardOptions, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardDismissAction, 0x03AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_HEO1, 0x03AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_DK87, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x03E0);
		}

		// class UMultiLineEditableTextBox : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Text, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0B41);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardOptions, 0x0B42);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardDismissAction, 0x0B43);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_IHQ5, 0x0B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_7AYB, 0x0BF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0C08);
		}

		// class UNamedSlot : public UContentWidget
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_6AQY, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0128);
		}

		// class UNamedSlotInterface : public UInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0028);
		}

		// class UNativeWidgetHost : public UWidget
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_6J8I, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0110);
		}

		// class UOverlay : public UPanelWidget
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_EWU6, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0128);
		}

		// class UOverlaySlot : public UPanelSlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_KZCO, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_WAEG, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0058);
		}

		// class UProgressBar : public UWidget
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Percent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_OOUK, 0x02C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_YCOA, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0310);
		}

		// class URetainerBox : public UContentWidget
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_WEG8, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_RTNR, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_Z597, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0148);
		}

		// class URichTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Text, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextStyleSet, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DecoratorClasses, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_O5HX, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, InstanceDecorators, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_ZH2J, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x0368);
		}

		// class URichTextBlockDecorator : public UObject
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0028);
		}

		// class URichTextBlockImageDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__UMG__RichTextBlockImageDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockImageDecorator, ImageSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockImageDecorator, 0x0030);
		}

		// class USafeZone : public UContentWidget
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_NM2V, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0130);
		}

		// class USafeZoneSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_J33X, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_1LOV, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0060);
		}

		// class UScaleBox : public UContentWidget
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_QBUW, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, bSingleLayoutPass, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_SQ97, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0138);
		}

		// class UScaleBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_P4RM, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0060);
		}

		// class UScrollBar : public UWidget
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x05D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_2S2R, 0x05DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_N9H7, 0x05E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x05F8);
		}

		// class UScrollBox : public UPanelWidget
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x0821);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x0822);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_TGC1, 0x0823);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x082D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x082E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_18PE, 0x082F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_FE1U, 0x0835);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_HY6Q, 0x0848);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0860);
		}

		// class UScrollBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_WHGN, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0058);
		}

		// class USizeBox : public UContentWidget
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_ODJN, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_ICS5, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0148);
		}

		// class USizeBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_YK90, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0060);
		}

		// class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0028);
		}

		// class USlateVectorArtData : public UObject
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, Material, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0060);
		}

		// class USlider : public UWidget
		TEST_METHOD(Class__UMG__Slider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_S3Y7, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_PTSH, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MouseUsesStep, 0x047E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, RequiresControllerLock, 0x047F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_KZXD, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_EWPC, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x04E8);
		}

		// class USpacer : public UWidget
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_DXOE, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0118);
		}

		// class USpinBox : public UWidget
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_CZOO, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_GS8Q, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_GP2O, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_7L5F, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_YM5F, 0x04F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0508);
		}

		// class UTextBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_NPWV, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0068);
		}

		// class UTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Text, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bAutoWrapText, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_UCEU, 0x0206);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x0218);
		}

		// class UThrobber : public UWidget
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_0HRH, 0x0107);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_REHT, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x01A8);
		}

		// class UTileView : public UListView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryHeight, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryWidth, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, TileAlignment, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, bWrapHorizontalNavigation, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_826U, 0x0332);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x0348);
		}

		// class UTreeView : public UListView
		TEST_METHOD(Class__UMG__TreeView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_ZAIF, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnGetItemChildren, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnItemExpansionChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_NJIP, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreeView, 0x0380);
		}

		// class UUMGSequencePlayer : public UObject
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_PH70, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_MIBF, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x06E8);
		}

		// class UUniformGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_4AE8, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0140);
		}

		// class UUniformGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_LN69, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_9J3N, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0050);
		}

		// class UUserWidget : public UWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_RF2L, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Priority, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, TickFrequency, 0x01AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_LU9V, 0x01AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_FF0B, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0208);
		}

		// class UVerticalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_NEZU, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0128);
		}

		// class UVerticalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_R9SG, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0060);
		}

		// class UViewport : public UContentWidget
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_YILE, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0140);
		}

		// class UVisibilityBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0060);
		}

		// class UWidgetAnimation : public UMovieSceneSequence
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, OnAnimationStarted, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, OnAnimationFinished, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, bLegacyFinishOnStop, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_0DFW, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, DisplayLabel, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0398);
		}

		// class UWidgetBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0060);
		}

		// class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_6II4, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, TemplateAsset, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Template, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0350);
		}

		// class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0028);
		}

		// class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0028);
		}

		// class UWidgetNavigation : public UObject
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Left, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Previous, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x0118);
		}

		// class UWidgetSwitcher : public UPanelWidget
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_H2OV, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0130);
		}

		// class UWidgetSwitcherSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_M8E7, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0058);
		}

		// class UWidgetTree : public UObject
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0030);
		}

		// class UWindowTitleBarArea : public UContentWidget
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bWindowButtonsEnabled, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_0J5B, 0x011A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0138);
		}

		// class UWindowTitleBarAreaSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_CGJN, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0060);
		}

		// class UWrapBox : public UPanelWidget
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_3EGU, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0138);
		}

		// class UWrapBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_VD4U, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_EJ36, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0060);
		}

		// class UProceduralMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_C564, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_OXB5, 0x058A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_HMS3, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_PQ26, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x05F0);
		}

		// class UKismetProceduralMeshLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0028);
		}

		// class ASkullWound_Half_C : public ASkullWound_Base_C
		TEST_METHOD(BlueprintGeneratedClass__SkullWound_Half__SkullWound_Half_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkullWound_Half_C, 0x03C8);
		}

		// class ASkullWound_Front_C : public ASkullWound_Base_C
		TEST_METHOD(BlueprintGeneratedClass__SkullWound_Front__SkullWound_Front_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkullWound_Front_C, 0x03C8);
		}

		// class UWoundComponent_Prisoner_C : public UWoundComponent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__WoundComponent_Prisoner__WoundComponent_Prisoner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWoundComponent_Prisoner_C, 0x02E8);
		}

		// class UTcpMessagingSettings : public UObject
		TEST_METHOD(Class__TcpMessaging__TcpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_ACL9, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ListenEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectToEndpoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectionRetryDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_KNZ0, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTcpMessagingSettings, 0x0058);
		}

		// class UControlPointMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, UnknownData_VI21, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x05F0);
		}

		// class ALandscapeProxy : public AActor
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_GX2N, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentScreenSizeToUseSubSections, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0DistributionSetting, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistributionSetting, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSize, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UseTessellationComponentScreenSizeFalloff, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_HCRS, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSizeFalloff, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, OccluderGeometryLOD, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_979X, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_DCC5, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterialsOverride, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NegativeZBoundsExtension, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, PositiveZBoundsExtension, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, FoliageComponents, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_2T3S, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLandscapeGrass, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_7Y63, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_ZMCI, 0x044D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightingChannels, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_YEKD, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_MKBV, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilValue, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LDMaxDrawDistance, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SimpleCollisionMipLevel, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_MP3J, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_6511, 0x05D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_DR0O, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseDynamicMaterialInstance, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NavigationGeometryGatheringMode, 0x05ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x05EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_FKMX, 0x05EF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0640);
		}

		// class ALandscape : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0640);
		}

		// class ULandscapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_AG1X, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_NWUQ, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterials, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstancesDynamic, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODIndexToMaterialIndex, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialIndexToDisabledTessellationMaterial, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_N2UU, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_0BMX, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_QZC2, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_KGIS, 0x06D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterfaces, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightmapTextures, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_E8OC, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x0740);
		}

		// class ALandscapeGizmoActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0328);
		}

		// class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_UK0Z, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x0378);
		}

		// class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGizmoRenderComponent, UnknownData_G7WS, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x0560);
		}

		// class ULandscapeGrassType : public UObject
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_EHJH, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_78PC, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0060);
		}

		// class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_C7D1, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_CY2P, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_VZVB, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x0638);
		}

		// class ULandscapeInfo : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_9WSQ, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_TI3O, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0200);
		}

		// class ULandscapeInfoMap : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_Y7UQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0080);
		}

		// class ULandscapeLayerInfoObject : public UObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_FM6N, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0050);
		}

		// class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_Z5S1, 0x01E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x01F0);
		}

		// class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_KRGA, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x0650);
		}

		// class ALandscapeMeshProxyActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeMeshProxyActor, 0x0330);
		}

		// class ULandscapeMeshProxyComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_X6D7, 0x0609);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x0610);
		}

		// class ULandscapeSplinesComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, UnknownData_534P, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x0590);
		}

		// class ULandscapeSplineControlPoint : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_TA2W, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_REK6, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x0098);
		}

		// class ULandscapeSplineSegment : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_NWSK, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B0);
		}

		// class ALandscapeStreamingProxy : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, LandscapeActor, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, UnknownData_XMVE, 0x065C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeStreamingProxy, 0x0660);
		}

		// class UMaterialExpressionLandscapeGrassOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_GXWT, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_K5CW, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0058);
		}

		// class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_8QE1, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_V2AI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_PG3W, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_17KR, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_WDYC, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x0090);
		}

		// class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_1C1M, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_AP2N, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x0098);
		}

		// class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0050);
		}

		// class UImageWriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ImageWriteQueue__ImageWriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageWriteBlueprintLibrary, 0x0028);
		}

		// class ABP_FlyingHelmet_Detective_C : public ABP_FlyingHelmet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlyingHelmet_Detective__BP_FlyingHelmet_Detective_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FlyingHelmet_Detective_C, 0x0348);
		}

		// class UWoundComponent_Svt_C : public UWoundComponent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__WoundComponent_Svt__WoundComponent_Svt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWoundComponent_Svt_C, 0x02E8);
		}

		// class ABP_FlyingHelmet_RU_C : public ABP_FlyingHelmet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlyingHelmet_RU__BP_FlyingHelmet_RU_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FlyingHelmet_RU_C, 0x0348);
		}

		// class ASkullWound_Right_C : public ASkullWound_Base_C
		TEST_METHOD(BlueprintGeneratedClass__SkullWound_Right__SkullWound_Right_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkullWound_Right_C, 0x03C8);
		}

		// class UUI_Scoreboard_Player_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Scoreboard_Player__UI_Scoreboard_Player_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, Avatar, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, DeathsLabel, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, Image_60, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, Image_89, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, KillsLabel, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, LatencyText, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, PlayerName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, ScoreLabel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, TeamId, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, Local, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, UnknownData_OB5Z, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, Score, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, Kills, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, Deaths, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, Dead, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, UnknownData_MRYY, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, AvatarTexture, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, Dev, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, UnknownData_4MBR, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, Ping, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Scoreboard_Player_C, 0x02C8);
		}

		// class USynthComponent : public USceneComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_20M3, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, BusSends, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, PreEffectBusSends, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_UWMM, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerAttackTime, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerReleaseTime, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_7S35, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, OnAudioEnvelopeValue, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_E0VN, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_TXCD, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x05C0);
		}

		// class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0028);
		}

		// class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_8CUU, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, Settings, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x00B8);
		}

		// class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_AFK8, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x0088);
		}

		// class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_69C3, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x00D0);
		}

		// class USynthSound : public USoundWaveProcedural
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_AOBZ, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x0280);
		}

		// class UAchievementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0028);
		}

		// class UAchievementQueryCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_XQT1, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0060);
		}

		// class UAchievementWriteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_YIII, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0078);
		}

		// class UConnectionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_FRCS, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0070);
		}

		// class UCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_J6SI, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x0090);
		}

		// class UDestroySessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_W0CL, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x0070);
		}

		// class UEndMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_7U5S, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0078);
		}

		// class UEndTurnCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_DOU8, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0070);
		}

		// class UFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_BJGM, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x0088);
		}

		// class UFindTurnBasedMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_KTOL, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0080);
		}

		// class UInAppPurchaseCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_9MMV, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x0080);
		}

		// class UInAppPurchaseQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_JS93, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseRestoreCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_5S76, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x0090);
		}

		// class UIpConnection : public UNetConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_1PPB, 0x1918);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x1978);
		}

		// class UIpNetDriver : public UNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_FOGO, 0x0699);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_MGR4, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_MI0C, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x06D8);
		}

		// class UJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_BPUT, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0128);
		}

		// class ULeaderboardBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0028);
		}

		// class ULeaderboardFlushCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_4X7G, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0068);
		}

		// class ULeaderboardQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_O57E, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x0098);
		}

		// class ULogoutCallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_QEQB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0068);
		}

		// class AOnlineBeacon : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_DGO8, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionInitialTimeout, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionTimeout, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_7GQ9, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0350);
		}

		// class AOnlineBeaconClient : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconConnection, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, ConnectionState, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, UnknownData_2FUO, 0x0361);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x03A0);
		}

		// class AOnlineBeaconHost : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_0XEI, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_86RD, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0408);
		}

		// class AOnlineBeaconHostObject : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientBeaconActorClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientActors, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0350);
		}

		// class UOnlineEngineInterfaceImpl : public UOnlineEngineInterface
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_K9HK, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0128);
		}

		// class UOnlinePIESettings : public UDeveloperSettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_XBMZ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0050);
		}

		// class UOnlineSessionClient : public UOnlineSession
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_B056, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_Y6JH, 0x018A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x0190);
		}

		// class APartyBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_3EGA, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, DestSessionId, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, PendingReservation, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, RequestType, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bPendingReservationSent, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bCancelReservation, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_7Y1T, 0x0423);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x0450);
		}

		// class APartyBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_K6X0, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, bLogoutOnSessionTimeout, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_MQPY, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_02WB, 0x03B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x03B8);
		}

		// class UPartyBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bRestrictCrossConsole, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_J2NU, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_O84W, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0078);
		}

		// class UQuitMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_RIVV, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0070);
		}

		// class UShowLoginUICallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_T9B6, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0060);
		}

		// class ATestBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x03A0);
		}

		// class ATestBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0350);
		}

		// class UTurnBasedBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0028);
		}

		// class UVoipListenerSynthComponent : public USynthComponent
		TEST_METHOD(Class__OnlineSubsystemUtils__VoipListenerSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoipListenerSynthComponent, UnknownData_P13P, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoipListenerSynthComponent, 0x05D0);
		}

		// class UWheeledVehicleMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_Z33R, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_1RL1, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_10GS, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Mass, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_RO0T, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WheelSetups, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragCoefficient, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisWidth, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisHeight, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragArea, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, EstimatedMaxEngineSpeed, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxEngineRPM, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DebugDragMagnitude, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, InertiaTensorScale, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoad, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoadFiltered, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoad, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoadFiltered, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThresholdLongitudinalSpeed, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, LowForwardSpeedSubStepCount, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HighForwardSpeedSubStepCount, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_VOPG, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Wheels, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_J8JY, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceRadius, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceHeight, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceConsiderationRadius, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOSteeringStep, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOThrottleStep, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceUID, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceGroup, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToAvoid, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToIgnore, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceWeight, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, PendingLaunchVelocity, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ReplicatedState, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_G4XE, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawSteeringInput, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawThrottleInput, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawBrakeInput, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInput, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInput, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInput, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInput, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, IdleBrakeInput, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, StopThreshold, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WrongDirectionThreshold, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInputRate, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInputRate, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInputRate, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInputRate, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_CW31, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, OverrideController, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent, 0x02D0);
		}

		// class USimpleWheeledVehicleMovementComponent : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__SimpleWheeledVehicleMovementComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleWheeledVehicleMovementComponent, 0x02D0);
		}

		// class UTireConfig : public UDataAsset
		TEST_METHOD(Class__PhysXVehicles__TireConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_WG9D, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, TireFrictionScales, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_ZPG1, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireConfig, 0x0050);
		}

		// class UVehicleAnimInstance : public UAnimInstance
		TEST_METHOD(Class__PhysXVehicles__VehicleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_5DD1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_VIIN, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, WheeledVehicleMovementComponent, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_5PC1, 0x08F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleAnimInstance, 0x08FC);
		}

		// class UVehicleWheel : public UObject
		TEST_METHOD(Class__PhysXVehicles__VehicleWheel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, CollisionMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bDontCreateShape, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAutoAdjustCollisionSize, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_F48L, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeWidth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Mass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DampingRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SteerAngle, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAffectedByHandbrake, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_EKQO, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireConfig, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffMaxLoad, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffValue, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LongStiffValue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionForceOffset, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxRaise, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxDrop, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionNaturalFrequency, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionDampingRatio, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SweepType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_5HYG, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxBrakeTorque, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxHandBrakeTorque, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_U273, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, VehicleSim, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, WheelIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongSlip, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatSlip, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugNormalizedTireLoad, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_FZ75, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugWheelTorque, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongForce, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatForce, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Location, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, OldLocation, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Velocity, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_0TGT, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleWheel, 0x00F0);
		}

		// class AWheeledVehicle : public APawn
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, Mesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, VehicleMovement, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle, 0x0398);
		}

		// class UWheeledVehicleMovementComponent4W : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent4W)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, EngineSetup, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, DifferentialSetup, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, AckermannAccuracy, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, TransmissionSetup, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, SteeringCurve, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent4W, 0x0428);
		}

		// class ABP_GlobalPlayerEffects_C : public AGlobalPlayerEffects
		TEST_METHOD(BlueprintGeneratedClass__BP_GlobalPlayerEffects__BP_GlobalPlayerEffects_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GlobalPlayerEffects_C, UberGraphFrame, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GlobalPlayerEffects_C, 0x03D8);
		}

		// class UWoundComponent_Clown_C : public UWoundComponent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__WoundComponent_Clown__WoundComponent_Clown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWoundComponent_Clown_C, 0x02E8);
		}

		// class UHeroSkin_Prisoner_C : public UAvatarSkin
		TEST_METHOD(BlueprintGeneratedClass__HeroSkin_Prisoner__HeroSkin_Prisoner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeroSkin_Prisoner_C, 0x0170);
		}

		// class UWoundComponent_Ger_C : public UWoundComponent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__WoundComponent_Ger__WoundComponent_Ger_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWoundComponent_Ger_C, 0x02E8);
		}

		// class UDefaultLevelSequenceInstanceData : public UObject
		TEST_METHOD(Class__LevelSequence__DefaultLevelSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_8X96, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOriginActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_10PX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOrigin, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLevelSequenceInstanceData, 0x0070);
		}

		// class ULevelSequence : public UMovieSceneSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, DirectorClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x0498);
		}

		// class ULevelSequenceBurnInInitSettings : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0028);
		}

		// class ULevelSequenceBurnInOptions : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_5OIF, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, Settings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0050);
		}

		// class ALevelSequenceActor : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_TOJ4, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bAutoPlay, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_1LBB, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, PlaybackSettings, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, SequencePlayer, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, LevelSequence, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, AdditionalEventReceivers, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInOptions, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BindingOverrides, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bOverrideInstanceData, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_QFF3, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, DefaultInstanceData, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInInstance, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceActor, 0x03D0);
		}

		// class ULevelSequenceBurnIn : public UUserWidget
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x0298);
		}

		// class ULevelSequenceDirector : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceDirector, Player, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceDirector, 0x0030);
		}

		// class ULegacyLevelSequenceDirectorBlueprint : public UBlueprint
		TEST_METHOD(Class__LevelSequence__LegacyLevelSequenceDirectorBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegacyLevelSequenceDirectorBlueprint, 0x00E0);
		}

		// class ULevelSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_TVWD, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, AdditionalEventReceivers, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_JM9I, 0x0818);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x0868);
		}

		// class UAssetRegistryImpl : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_5UE6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x0710);
		}

		// class UAssetRegistryHelpers : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0028);
		}

		// class UAssetRegistry : public UInterface
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0028);
		}

		// class USoldierSkin_RU_C : public USoldierSkin
		TEST_METHOD(BlueprintGeneratedClass__SoldierSkin_RU__SoldierSkin_RU_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoldierSkin_RU_C, 0x0198);
		}

		// class ABP_BloodPuddle_C : public ABloodPuddle
		TEST_METHOD(BlueprintGeneratedClass__BP_BloodPuddle__BP_BloodPuddle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodPuddle_C, UberGraphFrame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodPuddle_C, Plane, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BloodPuddle_C, DefaultSceneRoot, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BloodPuddle_C, 0x0390);
		}

		// class USteamVRChaperoneComponent : public UActorComponent
		TEST_METHOD(Class__SteamVR__SteamVRChaperoneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamVRChaperoneComponent, OnLeaveBounds, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamVRChaperoneComponent, OnReturnToBounds, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamVRChaperoneComponent, UnknownData_W97W, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamVRChaperoneComponent, 0x0118);
		}

		// class USteamVRFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SteamVR__SteamVRFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamVRFunctionLibrary, 0x0028);
		}

		// class UEditableMesh : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_VZFV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, Adapters, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, TextureCoordinateCount, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_OW9G, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, PendingCompactCounter, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, SubdivisionCount, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_NACE, 0x043C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMesh, 0x0620);
		}

		// class UEditableMeshAdapter : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshAdapter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshAdapter, 0x0028);
		}

		// class UEditableMeshFactory : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshFactory, 0x0028);
		}

		// class UEditableStaticMeshAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableStaticMeshAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, OriginalStaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMeshLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, UnknownData_OK5A, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableStaticMeshAdapter, 0x00E0);
		}

		// class UHeroSkin_Farmer_C : public UAvatarSkin
		TEST_METHOD(BlueprintGeneratedClass__HeroSkin_Farmer__HeroSkin_Farmer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeroSkin_Farmer_C, 0x0170);
		}

		// class UWoundComponent_Farmer_C : public UWoundComponent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__WoundComponent_Farmer__WoundComponent_Farmer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWoundComponent_Farmer_C, 0x02E8);
		}

		// class UHeroSkin_Clown_C : public UAvatarSkin
		TEST_METHOD(BlueprintGeneratedClass__HeroSkin_Clown__HeroSkin_Clown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeroSkin_Clown_C, 0x0170);
		}

		// class UHeroSkin_Naked_C : public UAvatarSkin
		TEST_METHOD(BlueprintGeneratedClass__HeroSkin_Naked__HeroSkin_Naked_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeroSkin_Naked_C, 0x0170);
		}

		// class UUI_Hand_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Hand__UI_Hand_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hand_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hand_C, Scoreboard, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Hand_C, Switcher, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Hand_C, 0x0220);
		}

		// class USteamworksManager : public UObject
		TEST_METHOD(Class__Steamworks__SteamworksManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, UnknownData_88UP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, GameInstance, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, Avatars, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, PublicIpAddress, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, OnServersConnected, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, UnknownData_LZM8, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, LobbyList, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, OnAuthSessionTicketResponse, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, OnTicketValidation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, UnknownData_GIC7, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, OnServerResponded, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, OnServerFailedToRespond, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, OnServerRefreshCompleted, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, OnServerListUpdated, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, ServerList, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamworksManager, UnknownData_KJXQ, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamworksManager, 0x05A0);
		}

		// class USteamworksStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Steamworks__SteamworksStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamworksStatics, 0x0028);
		}

		// class UOculusPlatformStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OculusPlatform__OculusPlatformStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusPlatformStatics, 0x0028);
		}

		// class UMoviePlayerSettings : public UObject
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_7OYF, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0040);
		}

		// class USoldierSkin_US_C : public USoldierSkin
		TEST_METHOD(BlueprintGeneratedClass__SoldierSkin_US__SoldierSkin_US_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoldierSkin_US_C, 0x0198);
		}

		// class USteamVRControllerLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SteamVRController__SteamVRControllerLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamVRControllerLibrary, 0x0028);
		}

		// class UMovieSceneGeometryCacheSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheSection, Params, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheSection, 0x0108);
		}

		// class UMovieSceneGeometryCacheTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, AnimationSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheTrack, 0x0068);
		}

		// class UBlueprintGameplayTagLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0028);
		}

		// class UGameplayTagAssetInterface : public UInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0028);
		}

		// class UEditableGameplayTagQuery : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_8FZC, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x0098);
		}

		// class UEditableGameplayTagQueryExpression : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0028);
		}

		// class UEditableGameplayTagQueryExpression_AnyTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AllTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_NoTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AnyExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_AllExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_NoExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0038);
		}

		// class UGameplayTagsManager : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_IOCS, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_97NZ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, RestrictedGameplayTagTables, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_ZDZV, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0190);
		}

		// class UGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0048);
		}

		// class URestrictedGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__RestrictedGameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, RestrictedGameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedGameplayTagsList, 0x0048);
		}

		// class UGameplayTagsSettings : public UGameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_SNOS, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_HMVB, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, RestrictedConfigFiles, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00B0);
		}

		// class UGameplayTagsDeveloperSettings : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0038);
		}

		// class UAnalyticsBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnalyticsBlueprintLibrary__AnalyticsBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnalyticsBlueprintLibrary, 0x0028);
		}

		// class UActorSequence : public UMovieSceneSequence
		TEST_METHOD(Class__ActorSequence__ActorSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, ObjectReferences, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequence, 0x0370);
		}

		// class UActorSequenceComponent : public UActorComponent
		TEST_METHOD(Class__ActorSequence__ActorSequenceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, bAutoPlay, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, UnknownData_1Z1D, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, PlaybackSettings, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, Sequence, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, SequencePlayer, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequenceComponent, 0x0148);
		}

		// class UActorSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__ActorSequence__ActorSequencePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequencePlayer, 0x07C8);
		}

		// class UJsonUtilsLib : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__JsonUtils__JsonUtilsLib)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilsLib, 0x0028);
		}

		// class UJsonUtilsObj : public UObject
		TEST_METHOD(Class__JsonUtils__JsonUtilsObj)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsObj, UnknownData_LSB1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilsObj, 0x0038);
		}

		// class UJsonUtilsRequest : public UObject
		TEST_METHOD(Class__JsonUtils__JsonUtilsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsRequest, OnResponseReceived, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsRequest, bLogging, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsRequest, UnknownData_6MOK, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsRequest, ResponseString, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsRequest, ResponseData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsRequest, ResponseObj, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsRequest, bHasJsonResponse, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsRequest, UnknownData_5QSA, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsRequest, ResponseCode, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsRequest, URL, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsRequest, RequestHeaders, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsRequest, ResponseHeaders, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsRequest, UnknownData_0VNU, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilsRequest, 0x0130);
		}

		// class UJsonUtilsValue : public UObject
		TEST_METHOD(Class__JsonUtils__JsonUtilsValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJsonUtilsValue, UnknownData_UB8I, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilsValue, 0x0038);
		}

		// class UUI_Scoreboard_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Scoreboard__UI_Scoreboard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, UberGraphFrame, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, Image_5, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, Image_6, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, Team0List, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, Team0ScoreLabel, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, Team1Header, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, Team1List, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, Team1ScoreLabel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, TimeLabel, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, TotalPlayers, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, Team0Players, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, Team1Players, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, PlayerArray, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, Team0Score, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, Team1Score, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, Time, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Scoreboard_C, 0x02D0);
		}

		// class UButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x02A8);
		}

		// class UCheckBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x05B0);
		}

		// class UComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x0408);
		}

		// class UComboButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x03D0);
		}

		// class UEditableTextBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0828);
		}

		// class UEditableTextWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0250);
		}

		// class UProgressWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01D0);
		}

		// class UScrollBarWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0500);
		}

		// class UScrollBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0258);
		}

		// class USlateSettings : public UObject
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_PN76, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0030);
		}

		// class USpinBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x0318);
		}

		// class UTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x0218);
		}

		// class USK_VRHand_R_Skeleton_AnimBlueprint_C : public UVRHandAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__SK_VRHand_R_Skeleton_AnimBlueprint__SK_VRHand_R_Skeleton_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_R_Skeleton_AnimBlueprint_C, UberGraphFrame, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_R_Skeleton_AnimBlueprint_C, AnimGraphNode_Root_C6D8620043374F375939D2899002D694, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_R_Skeleton_AnimBlueprint_C, AnimGraphNode_LocalRefPose_97F12757437103FD2BF5E8A810D719FC, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_R_Skeleton_AnimBlueprint_C, AnimGraphNode_LocalToComponentSpace_095CC77B492550FD76CFFD861469CD65, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_R_Skeleton_AnimBlueprint_C, AnimGraphNode_TwoBoneIK_4B9E7D2C4E34CE8B3F5689B33FC35081, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_R_Skeleton_AnimBlueprint_C, AnimGraphNode_ComponentToLocalSpace_8DE4355B4272BA8C9B15BEA4B19A9238, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_R_Skeleton_AnimBlueprint_C, AnimGraphNode_ApplyAdditive_D2BD44C54745D439655500B5DE6EB40E, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_R_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_AF21E70C48133968C96283B7576F41C1, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USK_VRHand_R_Skeleton_AnimBlueprint_C, 0x08A0);
		}

		// class UWoundComponent_NT_Combined_C : public UWoundComponent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__WoundComponent_NT_Combined__WoundComponent_NT_Combined_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWoundComponent_NT_Combined_C, 0x02E8);
		}

		// class USlateWidgetStyleContainerBase : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_GCS1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0030);
		}

		// class UFontBulkData : public UObject
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_84MJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x00C0);
		}

		// class UFontFaceInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0028);
		}

		// class UFontProviderInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0028);
		}

		// class USlateTypes : public UObject
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0028);
		}

		// class USlateWidgetStyleAsset : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0030);
		}

		// class USlateWidgetStyleContainerInterface : public UInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0028);
		}

		// class UMaterialExpressionSpriteTextureSampler : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Paper2D__MaterialExpressionSpriteTextureSampler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, bSampleAdditionalTextures, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, UnknownData_F5LK, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, AdditionalSlotIndex, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, SlotDisplayName, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpriteTextureSampler, 0x0138);
		}

		// class APaperCharacter : public ACharacter
		TEST_METHOD(Class__Paper2D__PaperCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperCharacter, Sprite, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperCharacter, 0x0740);
		}

		// class UPaperFlipbook : public UObject
		TEST_METHOD(Class__Paper2D__PaperFlipbook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, FramesPerSecond, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_D7X4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, KeyFrames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, DefaultMaterial, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, CollisionSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_39QC, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbook, 0x0050);
		}

		// class APaperFlipbookActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperFlipbookActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperFlipbookActor, RenderComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperFlipbookActor, 0x0330);
		}

		// class UPaperFlipbookComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperFlipbookComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SourceFlipbook, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, Material, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, PlayRate, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, UnknownData_VDAO, 0x0595);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, AccumulatedTime, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedFrameIndex, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SpriteColor, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedBodySetup, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, OnFinishedPlaying, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, UnknownData_HMY7, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbookComponent, 0x05D0);
		}

		// class APaperGroupedSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperGroupedSpriteActor, RenderComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperGroupedSpriteActor, 0x0330);
		}

		// class UPaperGroupedSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, InstanceMaterials, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, PerInstanceSpriteData, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, UnknownData_UT6E, 0x05A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperGroupedSpriteComponent, 0x05B0);
		}

		// class UPaperRuntimeSettings : public UObject
		TEST_METHOD(Class__Paper2D__PaperRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableSpriteAtlasGroups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableTerrainSplineEditing, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bResizeSpriteDataToMatchTextures, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, UnknownData_YI64, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperRuntimeSettings, 0x0030);
		}

		// class UPaperSprite : public UObject
		TEST_METHOD(Class__Paper2D__PaperSprite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_MFZ1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SourceUV, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SourceDimension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SourceTexture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AdditionalSourceTextures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceUV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceDimension, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceTexture, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, DefaultMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterial, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, Sockets, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SpriteCollisionDomain, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_EH7K, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, PixelsPerUnrealUnit, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BodySetup, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterialSplitIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_23C4, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedRenderData, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSprite, 0x00C0);
		}

		// class APaperSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperSpriteActor, RenderComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperSpriteActor, 0x0330);
		}

		// class UPaperSpriteAtlas : public UObject
		TEST_METHOD(Class__Paper2D__PaperSpriteAtlas)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteAtlas, 0x0028);
		}

		// class UPaperSpriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__PaperSpriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteBlueprintLibrary, 0x0028);
		}

		// class UPaperSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SourceSprite, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, MaterialOverride, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SpriteColor, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteComponent, 0x05A0);
		}

		// class APaperTerrainActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTerrainActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, DummyRoot, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, SplineComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, RenderComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTerrainActor, 0x0340);
		}

		// class UPaperTerrainComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainMaterial, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bClosedSpline, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bFilledSpline, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_2K1Y, 0x0562);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, AssociatedSpline, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, RandomSeed, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SegmentOverlapAmount, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainColor, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, ReparamStepsPerSegment, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SpriteCollisionDomain, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_SEYX, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CollisionThickness, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_1TL5, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CachedBodySetup, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_2BET, 0x05A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainComponent, 0x05B0);
		}

		// class UPaperTerrainMaterial : public UDataAsset
		TEST_METHOD(Class__Paper2D__PaperTerrainMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, InteriorFill, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainMaterial, 0x0048);
		}

		// class UPaperTerrainSplineComponent : public USplineComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainSplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainSplineComponent, UnknownData_0IS1, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainSplineComponent, 0x0650);
		}

		// class UPaperTileLayer : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerWidth, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerHeight, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_YG5Q, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionThicknessOverride, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionOffsetOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerColor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedWidth, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_3NX8, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedCells, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, TileSet, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedGrid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileLayer, 0x0098);
		}

		// class UPaperTileMap : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapWidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapHeight, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileWidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileHeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, PixelsPerUnrealUnit, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileX, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerLayer, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SelectedTileSet, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, Material, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileLayers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, CollisionThickness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SpriteCollisionDomain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, ProjectionMode, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_1OT1, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, HexSideLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_ILMK, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, BodySetup, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, LayerNameIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_ZVO3, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMap, 0x00A8);
		}

		// class APaperTileMapActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTileMapActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTileMapActor, RenderComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTileMapActor, 0x0330);
		}

		// class UPaperTileMapComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperTileMapComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, MapWidth, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, MapHeight, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileWidth, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileHeight, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, DefaultLayerTileSet, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, Material, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileLayers, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMapColor, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UseSingleLayerIndex, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, bUseSingleLayer, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_ZFVD, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMap, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMapComponent, 0x05D0);
		}

		// class UPaperTileSet : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSheet, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AdditionalSourceTextures, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, BorderMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileSpacing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, DrawingOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, WidthInTiles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, HeightInTiles, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedWidth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedHeight, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Terrains, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileWidth, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileHeight, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Margin, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Spacing, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileSet, 0x00A8);
		}

		// class UTileMapBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__TileMapBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileMapBlueprintLibrary, 0x0028);
		}

		// class UNavArea : public UNavAreaBase
		TEST_METHOD(Class__NavigationSystem__NavArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DefaultCost, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, FixedAreaEnteringCost, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, SupportedAgents, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, UnknownData_EBY7, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea, 0x0048);
		}

		// class UNavRelevantComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavRelevantComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_TC8S, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_9CND, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, CachedNavParent, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantComponent, 0x0120);
		}

		// class UNavLinkCustomComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_GVDP, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, NavLinkUserId, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_CMNX, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, EnabledAreaClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, DisabledAreaClass, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeStart, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeEnd, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkDirection, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_HKXR, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_PKKW, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleOffset, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleExtent, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleAreaClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastRadius, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastInterval, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastChannel, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_QGGE, 0x0189);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomComponent, 0x01C8);
		}

		// class ANavigationData : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_BWA3, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RenderingComp, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, NavDataConfig, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_ZW2C, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RuntimeGeneration, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_PS2N, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, ObservedPathsTickInterval, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, DataVersion, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_FTTE, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, SupportedAreas, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_8P5C, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationData, 0x04E8);
		}

		// class ARecastNavMesh : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__RecastNavMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_6ESX, 0x04EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DrawOffset, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_Z2Y9, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TilePoolSize, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSizeUU, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellSize, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellHeight, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentRadius, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentHeight, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxHeight, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxSlope, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxStepHeight, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MinRegionArea, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MergeRegionSize, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimplificationError, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimultaneousTileGenerationJobsCount, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileNumberHardLimit, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefTileBits, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefNavPolyBits, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefSaltBits, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, NavMeshOriginOffset, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultDrawDistance, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxSearchNodes, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxHierarchicalSearchNodes, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionPartitioning, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerPartitioning, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_FJFR, 0x0552);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionChunkSplits, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerChunkSplits, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_J2F6, 0x055E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSetUpdateInterval, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, HeuristicScale, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, VerticalDeviationFromGroundCompensation, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_572A, 0x056C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh, 0x05A0);
		}

		// class AAbstractNavData : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__AbstractNavData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbstractNavData, 0x04E8);
		}

		// class UCrowdManagerBase : public UObject
		TEST_METHOD(Class__NavigationSystem__CrowdManagerBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManagerBase, 0x0028);
		}

		// class UNavArea_Default : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Default)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Default, 0x0048);
		}

		// class UNavArea_LowHeight : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_LowHeight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_LowHeight, 0x0048);
		}

		// class UNavArea_Null : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Null)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Null, 0x0048);
		}

		// class UNavArea_Obstacle : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Obstacle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Obstacle, 0x0048);
		}

		// class UNavAreaMeta : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta, 0x0048);
		}

		// class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta_SwitchByAgent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent0Area, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent1Area, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent2Area, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent3Area, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent4Area, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent5Area, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent6Area, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent7Area, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent8Area, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent9Area, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent10Area, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent11Area, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent12Area, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent13Area, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent14Area, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent15Area, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta_SwitchByAgent, 0x00C8);
		}

		// class UNavCollision : public UNavCollisionBase
		TEST_METHOD(Class__NavigationSystem__NavCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_PTF6, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, CylinderCollision, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, BoxCollision, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, AreaClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_90NA, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollision, 0x00D8);
		}

		// class ANavigationGraph : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__NavigationGraph)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraph, 0x04E8);
		}

		// class ANavigationGraphNode : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraphNode, 0x0328);
		}

		// class UNavigationGraphNodeComponent : public USceneComponent
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, Node, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, NextNodeComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, PrevNodeComponent, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNodeComponent, 0x0260);
		}

		// class UNavigationInvokerComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavigationInvokerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileGenerationRadius, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileRemovalRadius, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationInvokerComponent, 0x00F8);
		}

		// class UNavigationPath : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathUpdatedNotifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, RecalculateOnInvalidation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, UnknownData_V1WX, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPath, 0x0088);
		}

		// class UNavigationPathGenerator : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavigationPathGenerator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPathGenerator, 0x0028);
		}

		// class UNavigationQueryFilter : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationQueryFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, Areas, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, IncludeFlags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, ExcludeFlags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, UnknownData_E06U, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter, 0x0048);
		}

		// class UNavigationSystemV1 : public UNavigationSystemBase
		TEST_METHOD(Class__NavigationSystem__NavigationSystemV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, MainNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, AbstractNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, CrowdManagerClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_17XB, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DataGatheringMode, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_F12I, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_P9QL, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, ActiveTilesUpdateInterval, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreasUpdateFreq, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_GQI4, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataSet, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataRegistrationQueue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_3XAX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavDataRegisteredEvent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavigationGenerationFinishedDelegate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_JUDG, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OperationMode, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_SJEF, 0x01D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemV1, 0x0410);
		}

		// class UNavigationSystemModuleConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__NavigationSystem__NavigationSystemModuleConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemModuleConfig, UnknownData_E543, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemModuleConfig, 0x0050);
		}

		// class ANavigationTestingActor : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationTestingActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_FGY6, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CapsuleComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, InvokerComponent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_RFYX, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, NavAgentProps, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, QueryingExtent, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_FW3K, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MyNavData, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ProjectedLocation, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_A3DR, 0x03A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostDisplayMode, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_JJ3Q, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, TextCanvasOffset, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_5VRH, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingTime, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathCost, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingSteps, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_VBEA, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OtherActor, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, FilterClass, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ShowStepIndex, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OffsetFromCornersDistance, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_X9CY, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationTestingActor, 0x0410);
		}

		// class UNavLinkComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_57XS, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, Links, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkComponent, 0x0570);
		}

		// class UNavLinkCustomInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomInterface, 0x0028);
		}

		// class UNavLinkHostInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkHostInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkHostInterface, 0x0028);
		}

		// class UNavLinkRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkRenderingComponent, UnknownData_FNAH, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkRenderingComponent, 0x0560);
		}

		// class UNavLinkTrivial : public UNavLinkDefinition
		TEST_METHOD(Class__NavigationSystem__NavLinkTrivial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkTrivial, 0x0050);
		}

		// class ANavMeshBoundsVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavMeshBoundsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, SupportedAgents, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, UnknownData_EYXR, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavMeshBoundsVolume, 0x0368);
		}

		// class UNavMeshRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavMeshRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_Q2R5, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_HFLY, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshRenderingComponent, 0x0570);
		}

		// class UNavModifierComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavModifierComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, AreaClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, FailsafeExtent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, UnknownData_4VPS, 0x0135);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierComponent, 0x0148);
		}

		// class ANavModifierVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavModifierVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_8G8N, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, AreaClass, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavModifierVolume, 0x0370);
		}

		// class UNavNodeInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavNodeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavNodeInterface, 0x0028);
		}

		// class ANavSystemConfigOverride : public AActor
		TEST_METHOD(Class__NavigationSystem__NavSystemConfigOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, NavigationSystemConfig, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, UnknownData_5TB9, 0x0331);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavSystemConfigOverride, 0x0338);
		}

		// class UNavTestRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavTestRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavTestRenderingComponent, UnknownData_OSP3, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavTestRenderingComponent, 0x0560);
		}

		// class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
		TEST_METHOD(Class__NavigationSystem__RecastFilter_UseDefaultArea)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastFilter_UseDefaultArea, 0x0048);
		}

		// class URecastNavMeshDataChunk : public UNavigationDataChunk
		TEST_METHOD(Class__NavigationSystem__RecastNavMeshDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMeshDataChunk, UnknownData_IKFG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastNavMeshDataChunk, 0x0040);
		}

		// class UMotionControllerComponent : public UPrimitiveComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_TERH, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, MotionSource, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_XK1L, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, bDisplayDeviceModel, 0x056D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_QS2L, 0x056E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayModelSource, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CustomDisplayMesh, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayMeshMaterialOverrides, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_LKKJ, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayComponent, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_PHJK, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x0610);
		}

		// class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0028);
		}

		// class UMotionTrackedDeviceFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0028);
		}

		// class UVRNotificationsComponent : public UActorComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0180);
		}

		// class UXRAssetFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRAssetFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRAssetFunctionLibrary, 0x0028);
		}

		// class UAsyncTask_LoadXRDeviceVisComponent : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__HeadMountedDisplay__AsyncTask_LoadXRDeviceVisComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnModelLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnLoadFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, UnknownData_DEZ6, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, SpawnedComponent, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTask_LoadXRDeviceVisComponent, 0x0060);
		}

		// class UConsoleSettings : public UObject
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_OLYI, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_H21A, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_9MU4, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0070);
		}

		// class UGameMapsSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, EditorStartupMap, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, FourPlayerSplitscreenLayout, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_WY0P, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x0108);
		}

		// class UGameNetworkManagerSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_U8FF, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_LV0S, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0058);
		}

		// class UGameSessionSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_N8MF, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0038);
		}

		// class UGeneralEngineSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0028);
		}

		// class UGeneralProjectSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInAR, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bSupportAR, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, UnknownData_5XL5, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0118);
		}

		// class UHudSettings : public UObject
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_OBH8, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0040);
		}

		// class USK_VRHand_L_Skeleton_AnimBlueprint_C : public UVRHandAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__SK_VRHand_L_Skeleton_AnimBlueprint__SK_VRHand_L_Skeleton_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_L_Skeleton_AnimBlueprint_C, UberGraphFrame, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_L_Skeleton_AnimBlueprint_C, AnimGraphNode_Root_5F22F6FE45800C08C92B95BFA0DD74D0, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_L_Skeleton_AnimBlueprint_C, AnimGraphNode_LocalRefPose_4DE4139748D175CE509305B53F67600B, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_L_Skeleton_AnimBlueprint_C, AnimGraphNode_LocalToComponentSpace_E164471A4F90FFC7C6A7B89190AE6D9F, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_L_Skeleton_AnimBlueprint_C, AnimGraphNode_TwoBoneIK_80B6FCEF49CDF5C60AAEBCB17F0EA15D, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_L_Skeleton_AnimBlueprint_C, AnimGraphNode_ComponentToLocalSpace_6817C940442B3005B779F78C64FCC5D5, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_L_Skeleton_AnimBlueprint_C, AnimGraphNode_ApplyAdditive_6B4F614C49226F7424C546937B9AC9F6, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_VRHand_L_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_3E3DFFBF4D7E2D1B9E63EDB93D5535D8, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USK_VRHand_L_Skeleton_AnimBlueprint_C, 0x08A0);
		}

		// class UAudioCaptureComponent : public USynthComponent
		TEST_METHOD(Class__AudioCapture__AudioCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, JitterLatencyFrames, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, UnknownData_I8NO, 0x05C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureComponent, 0x0670);
		}

		// class UUI_Scoreboard_Player_Titles_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Scoreboard_Player_Titles__UI_Scoreboard_Player_Titles_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_Titles_C, Image_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_Titles_C, Score, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_Titles_C, TextBlock_2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_Titles_C, TextBlock_9, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_Titles_C, TextBlock_10, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_Titles_C, TeamId, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Scoreboard_Player_Titles_C, 0x0234);
		}

		// class UClothingAssetBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0048);
		}

		// class UClothingSimulationFactory : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0028);
		}

		// class UClothingSimulationInteractor : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractor, UnknownData_VR06, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractor, 0x0030);
		}

		// class UWoundComponent_PoliceGuard_Combined_C : public UWoundComponent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__WoundComponent_PoliceGuard_Combined__WoundComponent_PoliceGuard_Combined_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWoundComponent_PoliceGuard_Combined_C, 0x02E8);
		}

		// class UMeshReconstructorBase : public UObject
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0028);
		}

		// class UMRMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_C8TC, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, Material, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bCreateMeshProxySections, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bUpdateNavMeshOnMeshUpdate, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_RDL1, 0x056A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_H88A, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x05A0);
		}

		// class UDmgTypeBP_Environmental_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0040);
		}

		// class UBP_SoundMixingSettings_C : public USoundMixingSettings
		TEST_METHOD(BlueprintGeneratedClass__BP_SoundMixingSettings__BP_SoundMixingSettings_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SoundMixingSettings_C, 0x0060);
		}

		// class UWoundComponent_RU_Combined_C : public UWoundComponent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__WoundComponent_RU_Combined__WoundComponent_RU_Combined_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWoundComponent_RU_Combined_C, 0x02E8);
		}

		// class USoundVisualizationStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SoundVisualizations__SoundVisualizationStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundVisualizationStatics, 0x0028);
		}

		// class UGeometryCache : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_OPTU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Tracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_VIT5, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, StartFrame, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, EndFrame, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCache, 0x0060);
		}

		// class AGeometryCacheActor : public AActor
		TEST_METHOD(Class__GeometryCache__GeometryCacheActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCacheActor, GeometryCacheComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCacheActor, 0x0330);
		}

		// class UGeometryCacheCodecBase : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecBase, TopologyRanges, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecBase, 0x0038);
		}

		// class UGeometryCacheCodecRaw : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecRaw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, DummyProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, UnknownData_EBPT, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecRaw, 0x0040);
		}

		// class UGeometryCacheCodecV1 : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecV1, UnknownData_0CPV, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecV1, 0x0040);
		}

		// class UGeometryCacheComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCache__GeometryCacheComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, GeometryCache, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bRunning, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bLooping, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_DLKC, 0x058A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, StartTimeOffset, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, PlaybackSpeed, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, NumTracks, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, ElapsedTime, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_4VAM, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, Duration, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bManualTick, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_V54J, 0x05D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheComponent, 0x05E0);
		}

		// class UGeometryCacheTrack : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, Duration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, UnknownData_LLTT, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack, 0x0058);
		}

		// class UGeometryCacheTrack_FlipbookAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_FlipbookAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, NumMeshSamples, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, UnknownData_GE6E, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_FlipbookAnimation, 0x0080);
		}

		// class UGeometryCacheTrackStreamable : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrackStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, Codec, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_37UA, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, StartSampleTime, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_N1Y5, 0x0184);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrackStreamable, 0x0188);
		}

		// class UGeometryCacheTrack_TransformAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformAnimation, UnknownData_CIBW, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformAnimation, 0x0100);
		}

		// class UGeometryCacheTrack_TransformGroupAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformGroupAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformGroupAnimation, UnknownData_TZAN, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformGroupAnimation, 0x0100);
		}

		// class UClothingAssetCustomData : public UObject
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingAssetCustomData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0028);
		}

		// class UClothingAsset : public UClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, PhysicsAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, ClothConfig, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UnknownData_1TQ4, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, LODData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, LodMap, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UsedBoneNames, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UsedBoneIndices, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, ReferenceBoneIndex, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UnknownData_Z8M4, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, CustomData, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAsset, 0x0178);
		}

		// class UClothingSimulationFactoryNv : public UClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingSimulationFactoryNv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0028);
		}

		// class UClothingSimulationInteractorNv : public UClothingSimulationInteractor
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingSimulationInteractorNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractorNv, UnknownData_CKJF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractorNv, 0x0040);
		}

		// class ACameraRig_Crane : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitch, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYaw, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneArmLength, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountPitch, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountYaw, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, UnknownData_3KYF, 0x0336);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, TransformComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYawControl, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitchControl, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneCameraMount, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Crane, 0x0358);
		}

		// class ACameraRig_Rail : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, CurrentPositionOnRail, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, bLockOrientationToRail, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, UnknownData_YXLO, 0x032D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, TransformComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailSplineComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailCameraMount, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Rail, 0x0348);
		}

		// class ACineCameraActor : public ACameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, LookatTrackingSettings, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, UnknownData_0JZI, 0x0870);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCameraActor, 0x0880);
		}

		// class UCineCameraComponent : public UCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_HHQ2, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_7OJ1, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x084C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x0850);
		}

		// class ACableActor : public AActor
		TEST_METHOD(Class__CableComponent__CableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACableActor, CableComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACableActor, 0x0330);
		}

		// class UCableComponent : public UMeshComponent
		TEST_METHOD(Class__CableComponent__CableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bAttachStart, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bAttachEnd, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_YR4X, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndTo, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndToSocketName, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, EndLocation, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableLength, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSegments, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SubstepTime, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SolverIterations, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableStiffness, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableCollision, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_Z83O, 0x05C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CollisionFriction, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableForce, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableGravityScale, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableWidth, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSides, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, TileMaterial, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_3GG0, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCableComponent, 0x0600);
		}

		// class UWoundComponent_Naked_C : public UWoundComponent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__WoundComponent_Naked__WoundComponent_Naked_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWoundComponent_Naked_C, 0x02E8);
		}

		// class ABP_ZAICharacter_C : public AZAICharacter
		TEST_METHOD(BlueprintGeneratedClass__BP_ZAICharacter__BP_ZAICharacter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ZAICharacter_C, UberGraphFrame, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ZAICharacter_C, TextRender, 0x0838);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ZAICharacter_C, 0x0840);
		}

		// class UPhononGeometryComponent : public UActorComponent
		TEST_METHOD(Class__SteamAudio__PhononGeometryComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononGeometryComponent, ExportAllChildren, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononGeometryComponent, UnknownData_XOC8, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononGeometryComponent, NumVertices, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononGeometryComponent, NumTriangles, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononGeometryComponent, UnknownData_F7J0, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhononGeometryComponent, 0x0100);
		}

		// class UPhononMaterialComponent : public UActorComponent
		TEST_METHOD(Class__SteamAudio__PhononMaterialComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononMaterialComponent, MaterialIndex, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononMaterialComponent, MaterialPreset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononMaterialComponent, UnknownData_4BYG, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononMaterialComponent, LowFreqAbsorption, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononMaterialComponent, MidFreqAbsorption, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononMaterialComponent, HighFreqAbsorption, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononMaterialComponent, LowFreqTransmission, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononMaterialComponent, MidFreqTransmission, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononMaterialComponent, HighFreqTransmission, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononMaterialComponent, Scattering, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononMaterialComponent, UnknownData_T203, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhononMaterialComponent, 0x0118);
		}

		// class UPhononOcclusionSourceSettings : public UOcclusionPluginSourceSettingsBase
		TEST_METHOD(Class__SteamAudio__PhononOcclusionSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononOcclusionSourceSettings, DirectOcclusionMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononOcclusionSourceSettings, DirectOcclusionMethod, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononOcclusionSourceSettings, UnknownData_YFWV, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononOcclusionSourceSettings, DirectOcclusionSourceRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononOcclusionSourceSettings, DirectAttenuation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononOcclusionSourceSettings, AirAbsorption, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononOcclusionSourceSettings, UnknownData_LLAJ, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhononOcclusionSourceSettings, 0x0038);
		}

		// class UPhononProbeComponent : public USceneComponent
		TEST_METHOD(Class__SteamAudio__PhononProbeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononProbeComponent, ProbeLocations, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononProbeComponent, UnknownData_U9DQ, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhononProbeComponent, 0x0270);
		}

		// class APhononProbeVolume : public AVolume
		TEST_METHOD(Class__SteamAudio__PhononProbeVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhononProbeVolume, PlacementStrategy, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhononProbeVolume, UnknownData_MWEX, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhononProbeVolume, HorizontalSpacing, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhononProbeVolume, HeightAboveFloor, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhononProbeVolume, NumProbes, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhononProbeVolume, ProbeDataSize, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhononProbeVolume, UnknownData_RUCO, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhononProbeVolume, BakedDataInfo, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhononProbeVolume, PhononProbeComponent, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhononProbeVolume, ProbeBoxFileName, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhononProbeVolume, ProbeBatchFileName, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhononProbeVolume, 0x03B0);
		}

		// class USubmixEffectReverbPluginPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__SteamAudio__SubmixEffectReverbPluginPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPluginPreset, UnknownData_0GC8, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPluginPreset, Settings, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPluginPreset, UnknownData_5VTR, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPluginPreset, 0x0070);
		}

		// class UPhononReverbSourceSettings : public UReverbPluginSourceSettingsBase
		TEST_METHOD(Class__SteamAudio__PhononReverbSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononReverbSourceSettings, IndirectSimulationType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononReverbSourceSettings, UnknownData_ODUI, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononReverbSourceSettings, IndirectContribution, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhononReverbSourceSettings, 0x0030);
		}

		// class UPhononSourceComponent : public USceneComponent
		TEST_METHOD(Class__SteamAudio__PhononSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononSourceComponent, UnknownData_EIQK, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononSourceComponent, UniqueIdentifier, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononSourceComponent, UnknownData_6TRH, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhononSourceComponent, 0x0250);
		}

		// class UPhononSpatializationSourceSettings : public USpatializationPluginSourceSettingsBase
		TEST_METHOD(Class__SteamAudio__PhononSpatializationSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononSpatializationSourceSettings, SpatializationMethod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononSpatializationSourceSettings, HrtfInterpolationMethod, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhononSpatializationSourceSettings, UnknownData_6JXJ, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhononSpatializationSourceSettings, 0x0030);
		}

		// class USteamAudioSettings : public UObject
		TEST_METHOD(Class__SteamAudio__SteamAudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, AudioEngine, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, ConvolutionType, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, UnknownData_IRKH, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, MinComputeUnits, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, MaxComputeUnits, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, ExportBSPGeometry, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, ExportLandscapeGeometry, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, StaticMeshMaterialPreset, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, UnknownData_J1WY, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, StaticMeshLowFreqAbsorption, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, StaticMeshMidFreqAbsorption, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, StaticMeshHighFreqAbsorption, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, StaticMeshLowFreqTransmission, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, StaticMeshMidFreqTransmission, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, StaticMeshHighFreqTransmission, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, StaticMeshScattering, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, BSPMaterialPreset, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, UnknownData_JV3N, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, BSPLowFreqAbsorption, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, BSPMidFreqAbsorption, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, BSPHighFreqAbsorption, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, BSPLowFreqTransmission, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, BSPMidFreqTransmission, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, BSPHighFreqTransmission, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, BSPScattering, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, LandscapeMaterialPreset, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, UnknownData_MKCC, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, LandscapeLowFreqAbsorption, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, LandscapeMidFreqAbsorption, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, LandscapeHighFreqAbsorption, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, LandscapeLowFreqTransmission, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, LandscapeMidFreqTransmission, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, LandscapeHighFreqTransmission, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, LandscapeScattering, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, IndirectImpulseResponseOrder, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, IndirectImpulseResponseDuration, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, IndirectSpatializationMethod, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, ReverbSimulationType, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, UnknownData_Y332, 0x009E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, IndirectContribution, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, MaxSources, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, TANIndirectImpulseResponseOrder, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, TANIndirectImpulseResponseDuration, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, TANMaxSources, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, RealtimeQualityPreset, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, UnknownData_EY1G, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, RealtimeBounces, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, RealtimeRays, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, RealtimeSecondaryRays, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, BakedQualityPreset, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, UnknownData_QT9F, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, BakedBounces, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, BakedRays, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, BakedSecondaryRays, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamAudioSettings, UnknownData_QXGR, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamAudioSettings, 0x00D8);
		}

		// class UActionGunState : public UVRGunState
		TEST_METHOD(Class__Pavlov__ActionGunState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionGunState, Action, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionGunState, UnknownData_6RKR, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionGunState, OnActionChanged, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionGunState, OnOpenAction, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionGunState, OnCloseAction, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActionGunState, 0x01A0);
		}

		// class AAirdropPlane : public AActor
		TEST_METHOD(Class__Pavlov__AirdropPlane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirdropPlane, DropRadius, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirdropPlane, DropHeightOffset, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirdropPlane, PlaneFlightTime, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirdropPlane, AirdropDetails, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirdropPlane, CurrentTravelTime, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirdropPlane, UnknownData_28WK, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAirdropPlane, 0x0358);
		}

		// class AAirplaneRoyale : public AActor
		TEST_METHOD(Class__Pavlov__AirplaneRoyale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirplaneRoyale, UnknownData_1GN6, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirplaneRoyale, SpawnLocation, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirplaneRoyale, Traveled, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirplaneRoyale, bTraveling, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirplaneRoyale, UnknownData_FXUQ, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirplaneRoyale, TravelSpeed, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAirplaneRoyale, UnknownData_JFZX, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAirplaneRoyale, 0x0348);
		}

		// class AAmmoBox : public AVRItem
		TEST_METHOD(Class__Pavlov__AmmoBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmoBox, UnknownData_WRD8, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmoBox, AmmoCount, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmoBox, MaxAmmoCount, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmoBox, PurchaseAmmoCount, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmoBox, UnknownData_UZLK, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmoBox, SurfaceFX, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmoBox, AmmoType, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmmoBox, UnknownData_LQEY, 0x04F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmmoBox, 0x0500);
		}

		// class UAmmoPouchComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Pavlov__AmmoPouchComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmmoPouchComponent, UnknownData_4UU1, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmmoPouchComponent, GrabHaptic, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmmoPouchComponent, GrabSound, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmmoPouchComponent, LastMagazineHaptic, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmmoPouchComponent, EmptyGrabHaptic, 0x0608);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmmoPouchComponent, 0x0610);
		}

		// class AAttachment : public AVRItem
		TEST_METHOD(Class__Pavlov__Attachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, bGunTickActive, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, bNeedsGunTick, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, bLocalGunTickOnly, 0x04D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, UnknownData_05V6, 0x04D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, AttachOffset, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, Compatibility, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, UnknownData_1IYP, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, AttachSound, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, DettachSound, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, EnterSlideModeSound, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, AttachmentSlot, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, bAttaching, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, bCanSlide, 0x0502);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, UnknownData_ABCU, 0x0503);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, RailSpacer, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, SlideGun, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, SlideHaptics, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, UnknownData_CYPI, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, SlideSound, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, SlideHapticsLimit, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachment, AttachDistance, 0x0524);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAttachment, 0x0528);
		}

		// class AAttachmentAccessory : public AAttachment
		TEST_METHOD(Class__Pavlov__AttachmentAccessory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory, UnknownData_FBYO, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory, MinToggleTime, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory, ToggleAttachmentSound, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory, PowerUpSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory, PowerDownSound, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory, LastToggleTime, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory, bLocalPlayer, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory, bPredicting, 0x054D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory, UnknownData_6RH6, 0x054E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory, Drop_Handle, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory, LastGun, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAttachmentAccessory, 0x0560);
		}

		// class AAttachmentAccessory_Bayonet : public AAttachmentAccessory
		TEST_METHOD(Class__Pavlov__AttachmentAccessory_Bayonet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, BayonetMesh, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, BayonetVelocity, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, UnknownData_OVC9, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, StabStartSocket, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, StabEndSocket, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, SlashSoundFX, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, StabSoundFX, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, SwingSoundFX, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, SwingSoundFrequency, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, SwingSoundVelocity, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, bDoubleSidedBayonet, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, bRotatedOnGun, 0x05AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, UnknownData_TZ2G, 0x05AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, LastLocation, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, LastDmgTime, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, bBloody, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, UnknownData_IUTX, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, LastSwingSound, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, PreviousForcedLodModel, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Bayonet, UnknownData_LORM, 0x05CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAttachmentAccessory_Bayonet, 0x05D0);
		}

		// class AAttachmentAccessory_Flashlight : public AAttachmentAccessory
		TEST_METHOD(Class__Pavlov__AttachmentAccessory_Flashlight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Flashlight, FlashlightMesh, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Flashlight, FlashlightBeam, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Flashlight, FlashlightSource, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Flashlight, FlashlightCookie, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Flashlight, SpotLight, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Flashlight, FlashlightBeamMaterial, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Flashlight, FlashlightCookieMaterial, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Flashlight, MaxDistance, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Flashlight, Thickness, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Flashlight, BeamLengthMultiplier, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Flashlight, Color, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Flashlight, Brightness, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Flashlight, SpotlightPowerMultiplier, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Flashlight, CookiePowerWhenLit, 0x05BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAttachmentAccessory_Flashlight, 0x05C0);
		}

		// class AAttachmentAccessory_Laser : public AAttachmentAccessory
		TEST_METHOD(Class__Pavlov__AttachmentAccessory_Laser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, LaserMesh, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, LaserSourceMesh, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, LaserTargetMesh, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, LaserBeamMesh, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, MaxDistance, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, Brightness, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, Color, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, DustPower, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, NoisePower, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, Thickness, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, OverExposure, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, OverExposureWhitepoint, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, UnknownData_XFZR, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, LaserBeamMaterial, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentAccessory_Laser, UnknownData_A9JH, 0x05B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAttachmentAccessory_Laser, 0x05C0);
		}

		// class AAttachmentCanted : public AAttachment
		TEST_METHOD(Class__Pavlov__AttachmentCanted)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentCanted, UnknownData_KLC3, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAttachmentCanted, 0x0530);
		}

		// class AAttachmentGrip : public AAttachment
		TEST_METHOD(Class__Pavlov__AttachmentGrip)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentGrip, UnknownData_PEXO, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentGrip, UnknownData_HRE5, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentGrip, VerticalRecoilMul, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentGrip, SideToSideRecoilMul, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentGrip, GripSequence, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAttachmentGrip, 0x0570);
		}

		// class AAttachmentSight : public AAttachment
		TEST_METHOD(Class__Pavlov__AttachmentSight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, SceneCapture, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, ZeroMaterial, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, ShowOnlyComp, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, GlobalEffects, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, bCaptureScene, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, bHideGunOnCapture, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, bHideSelfOnCapture, 0x054A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, UnknownData_JXH8, 0x054B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, CaptureTexture, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, CaptureOffset, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, LenseOffset, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, ActivateDist, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, ActivateDistLine, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, BaseFOV, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, MulFOV, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, DivFOV, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, ScopeFOV, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, bZeroMaterial, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, UnknownData_YB6O, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, ZeroParamName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, ZeroingTable, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, FlashCurve, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSight, UnknownData_LCKS, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAttachmentSight, 0x05B0);
		}

		// class AAttachmentSuppressor : public AAttachment
		TEST_METHOD(Class__Pavlov__AttachmentSuppressor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachmentSuppressor, UnknownData_QD6P, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAttachmentSuppressor, 0x0530);
		}

		// class AAttachProxy : public AActor
		TEST_METHOD(Class__Pavlov__AttachProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachProxy, UnknownData_LM7N, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachProxy, AttachInfo, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachProxy, SpawnItemClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachProxy, bRunOwnerAttach, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAttachProxy, UnknownData_6NY1, 0x0389);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAttachProxy, 0x0390);
		}

		// class UAvatarSkin : public UActorComponent
		TEST_METHOD(Class__Pavlov__AvatarSkin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, UsedComponents, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, WoundComponent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, UnknownData_ZX5T, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, BaseMesh, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, HandMesh, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, InventoryVestLight, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, InventoryVestHeavy, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, FlyingHelmetClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, PelvisZOffset, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, UnknownData_UMHT, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, EyeLidSequence, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, WoundClass, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, SkullSocket, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, PipeOffset, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, bIsWW2Skin, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, UnknownData_KKMS, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkin, MeshComponents, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvatarSkin, 0x0170);
		}

		// class UAvatarSkinCustom : public UAvatarSkin
		TEST_METHOD(Class__Pavlov__AvatarSkinCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkinCustom, CustomMesh, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkinCustom, BarehandMesh, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkinCustom, NATOHandMesh, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSkinCustom, RussianHandMesh, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvatarSkinCustom, 0x0190);
		}

		// class AAzureGameMode : public AGameMode
		TEST_METHOD(Class__Pavlov__AzureGameMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAzureGameMode, 0x0410);
		}

		// class AAzureGameState : public AGameState
		TEST_METHOD(Class__Pavlov__AzureGameState)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAzureGameState, 0x0388);
		}

		// class UAzureServer : public UObject
		TEST_METHOD(Class__Pavlov__AzureServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, UnknownData_WAH1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, NoPlayersTimer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, EndGraceTimer, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, UnknownData_BP7X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, bReady, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, bMatchOver, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, UnknownData_J14P, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, SessionId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, Region, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, IPV4Address, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, SessionCookie, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, QueueName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, TravelURL, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, MaxWaitTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, TickRate, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, bBackfillEnabled, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, bUseAccurateBackfill, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, bMatchmakingServer, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, UnknownData_ARKV, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAzureServer, OnReady, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAzureServer, 0x00F8);
		}

		// class APavlovGameMode : public AGameMode
		TEST_METHOD(Class__Pavlov__PavlovGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, Bots, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, UnknownData_WDVS, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, BotPersonalities, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, DynTeam0SpawnTimer, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, DynTeam1SpawnTimer, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, DynSpawnPoint0, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, DynSpawnPoint1, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, UnknownData_HZ3J, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, SwitchMapId, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, SwitchGameMode, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, UnknownData_A8C5, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, RoundTimer, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, UnknownData_DYON, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, VoiceManager, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, NameCounter, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bSwapSpawns, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bFillWithBots, 0x051D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bNoTeams, 0x051E);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bAlwaysScore, 0x051F);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bForceNoScoring, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bForceNoBots, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bTeamLocked, 0x0522);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, RoundState, 0x0523);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, Difficulty, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bSecure, 0x0525);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, UnknownData_SJ1N, 0x0526);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, PavlovGameState, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, GameModeType, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, UnknownData_5OUK, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, BotControllerClass, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, GhostClass, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, HandMenuClass, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, BotPersonalityTable, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, EquipmentCostTable, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, MaxPlayers, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, MaximumCash, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, CashKillReward, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, CashTeamKillPenalty, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bIncrementTeamScore, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bAutoRespawn, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bKeepBodies, 0x0572);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bKeepPawnIfAlive, 0x0573);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, BodyPool, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, ShackBodyDespawnTime, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, RespawnMaxDelay, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, InactivityInterval, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, InactivityThreashold, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, InactivityDormantThreashold, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bDynamicSpawns, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bSpawnGhostOnLogin, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, UnknownData_293W, 0x058E);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, RoundDuration, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, TeamLockDuration, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bAllowRoundDurationOverride, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bAllowWeaponFilter, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bAllowCompetitive, 0x059A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bKillfeedDisabled, 0x059B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bAllowVehicles, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bPunishSuicide, 0x059D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, UnknownData_A793, 0x059E);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, PunishSuicideTime, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bAutoKickOnTK, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, UnknownData_QLUM, 0x05A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, TKKickThreshold, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, bCanUploadStats, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, UnknownData_QK97, 0x05AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, BombClass, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, BuyRestrictions, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, BuyMenuScriptFilename, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, WeaponFilterData, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, OutOfBoundsComponentClass, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, CustomItemClass, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, UnknownData_ULM8, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameMode, StatsManager, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovGameMode, 0x0738);
		}

		// class ABattlegroundsGameMode : public APavlovGameMode
		TEST_METHOD(Class__Pavlov__BattlegroundsGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattlegroundsGameMode, UnknownData_ZTCB, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattlegroundsGameMode, ServerType, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattlegroundsGameMode, UnknownData_B9N4, 0x074A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattlegroundsGameMode, MasterServerUrl, 0x0750);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABattlegroundsGameMode, 0x0760);
		}

		// class UBeltFedGunState : public UVRGunState
		TEST_METHOD(Class__Pavlov__BeltFedGunState)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBeltFedGunState, 0x0168);
		}

		// class ABloodPuddle : public AActor
		TEST_METHOD(Class__Pavlov__BloodPuddle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPuddle, DecalComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPuddle, UnknownData_F4XI, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPuddle, Threashold, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPuddle, PoolNum, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPuddle, UnknownData_RVGS, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPuddle, DecalMaterial, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPuddle, DecalSize, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPuddle, ZBias, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPuddle, MaxLifeSpan, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPuddle, FadeOutDuration, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPuddle, bKeepAlive, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodPuddle, UnknownData_QVP4, 0x0371);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABloodPuddle, 0x0378);
		}

		// class ABloodSplat : public AActor
		TEST_METHOD(Class__Pavlov__BloodSplat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodSplat, MaxProjection, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodSplat, UnknownData_6XYX, 0x032C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABloodSplat, 0x0330);
		}

		// class ABloodSplatGeometry : public ABloodSplat
		TEST_METHOD(Class__Pavlov__BloodSplatGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodSplatGeometry, MaterialInstance, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodSplatGeometry, UnknownData_5LDL, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodSplatGeometry, ImpactEffect, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodSplatGeometry, Sound, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodSplatGeometry, Materials, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodSplatGeometry, Scale, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodSplatGeometry, Duration, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodSplatGeometry, FadeOutRate, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABloodSplatGeometry, UnknownData_GPEB, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABloodSplatGeometry, 0x0370);
		}

		// class ABomb : public AVRItem
		TEST_METHOD(Class__Pavlov__Bomb)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, UnknownData_HX5P, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, Mesh, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, UnknownData_QS6Y, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, BombInstigator, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, UnknownData_4S6B, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, bOccluded, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, State, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, UnknownData_4CXA, 0x0612);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, Timer, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, NextDigit, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, UnknownData_S4BY, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, Code, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, DetonatorDelay, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, GraceDuration, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, DefuseSound, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, GraceSound, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, PlantedSound, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, DetonationSound, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, BeepSiteASound, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, BeepSiteBSound, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, BeepIntervalCurve, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, DigitExpireDelay, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, KeyPadOffset, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, KeyDistance, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, UnknownData_QY02, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, KeySound, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, ErrorSound, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, SuccessSound, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, SurfaceFX, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, ExplosionFX, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, ShackExplosionFX, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, ExplosionFXScale, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, UnknownData_X5SM, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, WireStates, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, Wires, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, CutMaxDist, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, Damage, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, MinDamage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, DamageInnerRadius, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, DamageOuterRadius, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, DamageFalloff, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, TraceChannel, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, bAllowUseByAnyone, 0x06F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, UnknownData_GZYR, 0x06FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, LastDropLocation, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, BombDrop_Handle, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, bAutoResetBomb, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, UnknownData_GNHG, 0x0711);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, ResetToNavTime, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, OnBombDetonation, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, OnBombDefused, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABomb, UnknownData_RTZC, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABomb, 0x0740);
		}

		// class UBombAnimInstance : public UAnimInstance
		TEST_METHOD(Class__Pavlov__BombAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, UnknownData_C50P, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, Button02, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, Button03, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, Button04, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, Button05, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, Button06, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, Button07, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, Button08, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, Button09, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, Button00, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, ButtonX1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, ButtonX2, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, bRedCableCut, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, bYellowCableCut, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, bWhiteCableCut, 0x038A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombAnimInstance, UnknownData_AIVT, 0x038B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBombAnimInstance, 0x0390);
		}

		// class ABombPlantSpot : public AVRItem
		TEST_METHOD(Class__Pavlov__BombPlantSpot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombPlantSpot, Collision, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombPlantSpot, Mesh, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombPlantSpot, bIsB, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombPlantSpot, bPlantedHere, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombPlantSpot, bSpotEnabled, 0x04E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombPlantSpot, UnknownData_CR0R, 0x04E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombPlantSpot, OnBombPlanted, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABombPlantSpot, UnknownData_HN3P, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABombPlantSpot, 0x0500);
		}

		// class ABootGameMode : public AGameModeBase
		TEST_METHOD(Class__Pavlov__BootGameMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABootGameMode, 0x03C8);
		}

		// class ABullet : public AVRBullet
		TEST_METHOD(Class__Pavlov__Bullet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, TimeSpawned, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, Latency, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, ArmourDamage, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, ArmourPenetration, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, HelmetDamage, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, HelmetBleed, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, FalloffModifier, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, MinFalloffDist, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, MaxFalloffDist, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, UnknownData_TP6B, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, SurfaceFX, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, ShackImpactParticle, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, HeadshotProbability, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, WoundScale, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, WoundRate, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, UnknownData_9J2U, 0x0505);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, WoundRateByDistance, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, SphereMesh, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, BulletMaterial, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, bUseTracer, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, UnknownData_QGB9, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, TracersLength, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, TracerGirth, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, TracerTimeScaleSpeed, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, bAuthDmg, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, UnknownData_KDRZ, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, TracerTimer, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, TracerDraws, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, UnknownData_HMJ0, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABullet, TracerOpacityCurve, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABullet, 0x0548);
		}

		// class ABulletHoleManager : public AActor
		TEST_METHOD(Class__Pavlov__BulletHoleManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABulletHoleManager, MeshInstances, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABulletHoleManager, Needles, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABulletHoleManager, MaxHoles, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABulletHoleManager, DecalScale, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABulletHoleManager, DepthOffset, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABulletHoleManager, UnknownData_FZSA, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABulletHoleManager, 0x0358);
		}

		// class AUberWheel : public AActor
		TEST_METHOD(Class__Pavlov__UberWheel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, UnknownData_61CZ, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, bWheelEnabled, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, UnknownData_3D41, 0x032D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, CenterRadius, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, UnknownData_VDLL, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, EnableSound, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, DisableSound, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, CommitSound, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, SelectSound, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, HoverSound, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, ErrorSound, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, ToggleCurve, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, ToggleDuration, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, bHolding, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, UnknownData_3YAQ, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, PositionX, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, PositionY, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, Selection, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, UnknownData_XKEA, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUberWheel, OnWheelUpdate, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUberWheel, 0x0398);
		}

		// class ABuyMenu : public AUberWheel
		TEST_METHOD(Class__Pavlov__BuyMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuyMenu, PlaneMesh, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuyMenu, CohtmlComponent, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuyMenu, EquipmentList, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuyMenu, CashAvailable, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuyMenu, bIsShack, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuyMenu, UnknownData_MF9M, 0x03BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuyMenu, GameState, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuyMenu, LocalPlayerState, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuyMenu, UnknownData_EOFF, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuyMenu, BuySound, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuyMenu, Transition1Sound, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuyMenu, Transition2Sound, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuyMenu, 0x03F0);
		}

		// class UBuyMenuData : public UDataAsset
		TEST_METHOD(Class__Pavlov__BuyMenuData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuyMenuData, BuyMenuData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuyMenuData, 0x0040);
		}

		// class ABuyZone : public ATriggerVolume
		TEST_METHOD(Class__Pavlov__BuyZone)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuyZone, 0x0360);
		}

		// class UChamberComponent : public UPhysicsConstraintComponent
		TEST_METHOD(Class__Pavlov__ChamberComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, MeshInstance, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, ConstrainedMesh, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, Volume, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, Gun, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, GunState, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, UnknownData_HV1P, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, bRemoving, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, bAllowRemoval, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, UnknownData_DDMO, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, ChamberIndex, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, LiveRound, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, EmptyShell, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, CapsuleRadius, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, CapsuleLength, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, CapsuleOffset, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, ConstraintLimit, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, ConstraintOffset, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, UnknownData_RLDX, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, RemoveSound, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, InsertSound, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, InsertHaptic, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, EjectForce, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, UnknownData_G03E, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, MagSlideInfo, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChamberComponent, UnknownData_6MEG, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChamberComponent, 0x0520);
		}

		// class AUIView : public AActor
		TEST_METHOD(Class__Pavlov__UIView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIView, UnknownData_PI8R, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIView, PlaneMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIView, CohtmlComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIView, UnknownData_1WS9, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIView, Sounds, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIView, UnknownData_S20M, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIView, SoundLibs, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUIView, HapticLibrary, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUIView, 0x0378);
		}

		// class AMenuUniverseView : public AUIView
		TEST_METHOD(Class__Pavlov__MenuUniverseView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, UnknownData_LOOE, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, bDisabled, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, UnknownData_KJEF, 0x03CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, ID, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, UnknownData_GTN0, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, ViewURL, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, DrawSize, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, TextureScale, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, Scale, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, ZIndex, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, SortPriority, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, Dock, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, UnknownData_5FZ2, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, DockOrder, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, AnimationSpeed, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, Pivot, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, PivotRotation, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, PivotLocation, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, ActualDrawSize, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverseView, ControllerObject, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenuUniverseView, 0x0438);
		}

		// class AContentView : public AMenuUniverseView
		TEST_METHOD(Class__Pavlov__ContentView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AContentView, SortedPlayerArray, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AContentView, Globals, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AContentView, UnknownData_LOAF, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AContentView, 0x0488);
		}

		// class APlayOnlineView : public AContentView
		TEST_METHOD(Class__Pavlov__PlayOnlineView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayOnlineView, UnknownData_SYXM, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayOnlineView, ServerBrowser, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayOnlineView, ServerBrowserModel, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayOnlineView, LobbyStatusModel, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayOnlineView, UnknownData_D2EJ, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayOnlineView, LobbyModel, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayOnlineView, UnknownData_CHRM, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayOnlineView, 0x0580);
		}

		// class AConnectingView : public APlayOnlineView
		TEST_METHOD(Class__Pavlov__ConnectingView)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConnectingView, 0x0580);
		}

		// class AModalView : public AContentView
		TEST_METHOD(Class__Pavlov__ModalView)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AModalView, 0x0488);
		}

		// class AConnectSpinnerModalView : public AModalView
		TEST_METHOD(Class__Pavlov__ConnectSpinnerModalView)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConnectSpinnerModalView, 0x0488);
		}

		// class ACosmeticTickActor : public AActor
		TEST_METHOD(Class__Pavlov__CosmeticTickActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACosmeticTickActor, 0x0328);
		}

		// class UCosmeticTickManagerComponent : public UActorComponent
		TEST_METHOD(Class__Pavlov__CosmeticTickManagerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCosmeticTickManagerComponent, UnknownData_U4P2, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCosmeticTickManagerComponent, 0x0100);
		}

		// class ACustomItem : public AVRItem
		TEST_METHOD(Class__Pavlov__CustomItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomItem, RootMesh, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomItem, CustomProxy, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomItem, ReattachDelay, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACustomItem, UnknownData_HBG2, 0x04E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACustomItem, 0x04F0);
		}

		// class UDamageEffectComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Pavlov__DamageEffectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageEffectComponent, DamageEffectMat, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageEffectComponent, PavPawn, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageEffectComponent, DamageEffects, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageEffectComponent, EffectCurve, 0x0608);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageEffectComponent, 0x0610);
		}

		// class UDamageTrackerComponent : public UActorComponent
		TEST_METHOD(Class__Pavlov__DamageTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTrackerComponent, InfoList, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageTrackerComponent, 0x0100);
		}

		// class UDamageType_Pavlov : public UDamageType
		TEST_METHOD(Class__Pavlov__DamageType_Pavlov)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType_Pavlov, IconLookup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType_Pavlov, bPlayClientEffects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType_Pavlov, UnknownData_K94Q, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_Pavlov, 0x0050);
		}

		// class UDamageType_BackBlast : public UDamageType_Pavlov
		TEST_METHOD(Class__Pavlov__DamageType_BackBlast)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_BackBlast, 0x0050);
		}

		// class UDamageType_Bayonet : public UDamageType_Pavlov
		TEST_METHOD(Class__Pavlov__DamageType_Bayonet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_Bayonet, 0x0050);
		}

		// class UDamageType_Bayonet_Held : public UDamageType_Bayonet
		TEST_METHOD(Class__Pavlov__DamageType_Bayonet_Held)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_Bayonet_Held, 0x0050);
		}

		// class UDamageType_Chicken : public UDamageType_Pavlov
		TEST_METHOD(Class__Pavlov__DamageType_Chicken)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_Chicken, 0x0050);
		}

		// class UDamageType_Fire : public UDamageType_Pavlov
		TEST_METHOD(Class__Pavlov__DamageType_Fire)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_Fire, 0x0050);
		}

		// class UDamageType_KillVolume : public UDamageType_Pavlov
		TEST_METHOD(Class__Pavlov__DamageType_KillVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_KillVolume, 0x0050);
		}

		// class UDamageType_PushBomb : public UDamageType_Pavlov
		TEST_METHOD(Class__Pavlov__DamageType_PushBomb)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_PushBomb, 0x0050);
		}

		// class UDamageType_RunOver : public UDamageType_Pavlov
		TEST_METHOD(Class__Pavlov__DamageType_RunOver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_RunOver, 0x0050);
		}

		// class UDamageType_RunOver_Tank : public UDamageType_RunOver
		TEST_METHOD(Class__Pavlov__DamageType_RunOver_Tank)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_RunOver_Tank, 0x0050);
		}

		// class UDamageType_SNDBomb : public UDamageType_Pavlov
		TEST_METHOD(Class__Pavlov__DamageType_SNDBomb)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_SNDBomb, 0x0050);
		}

		// class UDamageType_VehicleExplosion : public UDamageType_Pavlov
		TEST_METHOD(Class__Pavlov__DamageType_VehicleExplosion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_VehicleExplosion, 0x0050);
		}

		// class UDamageType_VehicleExplosion_Tank : public UDamageType_VehicleExplosion
		TEST_METHOD(Class__Pavlov__DamageType_VehicleExplosion_Tank)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_VehicleExplosion_Tank, 0x0050);
		}

		// class UDecorationSkeletalMeshComponent : public USkeletalMeshComponent
		TEST_METHOD(Class__Pavlov__DecorationSkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecorationSkeletalMeshComponent, UnknownData_NL03, 0x0B28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecorationSkeletalMeshComponent, 0x0B30);
		}

		// class UDedicatedServer : public UObject
		TEST_METHOD(Class__Pavlov__DedicatedServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, UnknownData_8LX8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, BuiltinDepot, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, UnknownData_0D6P, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, bInitialized, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, bEnabled, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, UnknownData_TTEW, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, ServerName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, MapRotation, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, Password, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, MaxPlayers, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, TickRate, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, DepotURL, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, bSecured, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, UnknownData_11DF, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, ApiKey, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, bCustomServer, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, bWhitelist, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, UnknownData_B35B, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, RefreshListTime, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, TimeLimit, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, LimitedAmmoType, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, bCompetitive, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, bBroadcast, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, UnknownData_X99S, 0x0192);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, BalanceTableURL, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, bVerboseLogging, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, bRotating, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, UnknownData_BZG0, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, RotationIndex, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, Blacklist, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, ModList, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServer, Whitelist, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDedicatedServer, 0x01E0);
		}

		// class UPavlovObject : public UObject
		TEST_METHOD(Class__Pavlov__PavlovObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovObject, UnknownData_14NW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovObject, 0x0048);
		}

		// class UDepot : public UPavlovObject
		TEST_METHOD(Class__Pavlov__Depot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDepot, UnknownData_HWX8, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDepot, DepotContentPath, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDepot, Port, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDepot, UnknownData_J0WF, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDepot, 0x0070);
		}

		// class ADestroyedVehicle : public AActor
		TEST_METHOD(Class__Pavlov__DestroyedVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestroyedVehicle, CleanUpTime, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestroyedVehicle, UnknownData_KWH8, 0x032C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestroyedVehicle, 0x0330);
		}

		// class ADestructible : public AActor
		TEST_METHOD(Class__Pavlov__Destructible)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestructible, 0x0328);
		}

		// class UDoubleBarrelGunState : public UVRGunState
		TEST_METHOD(Class__Pavlov__DoubleBarrelGunState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoubleBarrelGunState, bBarrelOpen, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoubleBarrelGunState, UnknownData_IZN6, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoubleBarrelGunState, OnBarrelChanged, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleBarrelGunState, 0x0180);
		}

		// class AFiltersView : public APlayOnlineView
		TEST_METHOD(Class__Pavlov__FiltersView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFiltersView, UnknownData_S5J7, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFiltersView, 0x05B8);
		}

		// class AFlickerTracer : public AActor
		TEST_METHOD(Class__Pavlov__FlickerTracer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlickerTracer, BulletArray, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlickerTracer, UnknownData_ONOK, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlickerTracer, SphereMesh, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlickerTracer, MaterialInstance, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlickerTracer, bEnabled, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlickerTracer, UnknownData_JYO1, 0x0351);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFlickerTracer, 0x0358);
		}

		// class AFlyingHelmet : public AActor
		TEST_METHOD(Class__Pavlov__FlyingHelmet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlyingHelmet, UnknownData_8EHN, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlyingHelmet, Mesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlyingHelmet, ImpulsePower, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlyingHelmet, ImpulseOffset, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlyingHelmet, SurfaceFX, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFlyingHelmet, 0x0348);
		}

		// class UFootstepAnimNotify : public UAnimNotify
		TEST_METHOD(Class__Pavlov__FootstepAnimNotify)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFootstepAnimNotify, 0x0038);
		}

		// class AFriendsView : public AContentView
		TEST_METHOD(Class__Pavlov__FriendsView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFriendsView, UnknownData_WZ96, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFriendsView, 0x0498);
		}

		// class UGameSessionServer : public UPavlovObject
		TEST_METHOD(Class__Pavlov__GameSessionServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, UnknownData_LDH2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, DownloadProgress, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, GameMap, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, GameMapId, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, GameMapLabel, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, GameMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, ID, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, Key, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, State, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, UnknownData_LKV1, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, ServerKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, MasterServerUrl, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, Region, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, MaxAttempts, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, TickRate, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionServer, UnknownData_F1WD, 0x00FA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionServer, 0x0100);
		}

		// class UGestureComponent : public UActorComponent
		TEST_METHOD(Class__Pavlov__GestureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGestureComponent, Gestures, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGestureComponent, OnGesturePerformed, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGestureComponent, 0x0110);
		}

		// class APavlovItemController : public AVRItemController
		TEST_METHOD(Class__Pavlov__PavlovItemController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, UI, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, PointerMesh, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, HandMenu, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, Killfeed, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, UnknownData_V9DJ, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, TwoHandReloadBasis, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, TwoHandReloadRefGun, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, TwoHandGripRefGun, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, SelectionHandMesh, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, UnknownData_3DTX, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, KnockZombies, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, UnknownData_PY3V, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, bBypassMovement, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, UnknownData_TX9F, 0x077A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, TouchPadXValue, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, TouchPadYValue, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, UnknownData_ZFQC, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, Selection, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, bDominant, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, bTouchPadLocomotion, 0x0791);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, UnknownData_D1E3, 0x0792);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, TwoHandPickOffset, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, TwoHandDirection, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, bMenuPressed, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, UnknownData_SWII, 0x07AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, WheelInstance, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, TalkHeadDistance, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, FingerPointOffset, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, UnknownData_5E92, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, SelectionOffset, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, SelectionMaterial, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, SelectionObjectType, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, UnknownData_F1V5, 0x0809);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, SelectionSphereRadius, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, SelectionHandMeshAsset, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, SelectionHandMeshScale, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, UnknownData_X62Q, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, SelectionSoundCue, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, SelectionHandLeftMaterial, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, SelectionHandRightMaterial, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, BashCooldown, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, BashAcumMomentumDuration, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, BashDistanceThreashold, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, BashBeginRadius, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, BashVolumeRadius, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, BashPulsationInterval, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, BashSound, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, WheelClass, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, HandMenuClass, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, KillfeedClass, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, OnSnapTurn, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovItemController, OnBuywheelChanged, 0x0880);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovItemController, 0x0890);
		}

		// class AGhostItemController : public APavlovItemController
		TEST_METHOD(Class__Pavlov__GhostItemController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostItemController, PointMode, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostItemController, UnknownData_07BS, 0x0891);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGhostItemController, 0x08A0);
		}

		// class APavlovPawnBase : public AVRPawn
		TEST_METHOD(Class__Pavlov__PavlovPawnBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovPawnBase, 0x0AF0);
		}

		// class AGhostPawn : public APavlovPawnBase
		TEST_METHOD(Class__Pavlov__GhostPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, SpectatorTags, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, SpectatorRoomInstance, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, FreeViewSpeedMul, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, UnknownData_7TYG, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, KillCamClass, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, KillCam, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, bInSpectatorRoom, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, bIsOnGrace, 0x0B21);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, bHighlightActive, 0x0B22);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, UnknownData_MEE1, 0x0B23);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, SpectatorTVCameraClass, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, SpectatorTagClass, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, SpectatorRoomClass, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, GraceDuration, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, FreeViewSpeed, 0x0B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, VoiceSoundClass, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, VoiceChatAttenuation, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGhostPawn, UnknownData_PBJ0, 0x0B58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGhostPawn, 0x0B60);
		}

		// class AGlobalPlayerEffects : public AInfo
		TEST_METHOD(Class__Pavlov__GlobalPlayerEffects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, FlashedMaterialInstance, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, SupressedMaterialInstance, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, PostProcess, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, UnknownData_T7WF, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, BuzzingSound, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, WindSound, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, MasterLimiterSubmix, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, UnknownData_6IUF, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, State, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, UnknownData_EOY7, 0x0372);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, Time, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, bDisabled, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, UnknownData_040T, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, GhostMaterial, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, GhostSoundMix, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, FlashedMaterial, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, FlashedSphereMaterial, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, FlashedSoundMix, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, TankSoundMix, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, FlashedOpacityCurve, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, SupressedMaterial, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, SupressedSoundMix, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGlobalPlayerEffects, ExplosionSoundMix, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGlobalPlayerEffects, 0x03D0);
		}

		// class UDamageType_Explotion : public UDamageType
		TEST_METHOD(Class__Pavlov__DamageType_Explotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_Explotion, 0x0040);
		}

		// class AGrenade : public AVRItem
		TEST_METHOD(Class__Pavlov__Grenade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, Mesh, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, ProjectileMovement, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, UnknownData_YZ35, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, TrailProxy, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, PinHandleComponent, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, GrenadeDetonation_Handle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, DetonationInstigator, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, State, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, bProjectileActive, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, DropOnPreRoundExploit, 0x050A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, UnknownData_2U3C, 0x050B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, ProjectileThreashold, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, ProjectileSpeedMul, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, PinPullRatio, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, DetonatorDelay, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, DetonatedLifeSpan, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, bHideOnDetonation, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, bDisablePhysics, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, UnknownData_N4JL, 0x0522);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, LeverMesh, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, LeverImpulse, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, LeverAngularImpulse, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, LeverSurfaceFX, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, FuseIgniteSound, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, bSpawnLeverReleaseSoundAttached, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, UnknownData_IEFH, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, LeverReleaseSound, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, DryLeverReleaseSound, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, SafetyPinRemovedSound, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, DetonationSound, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, GrenadeType, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, bDealDamage, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, UnknownData_CE9U, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, Damage, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, MinDamage, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, DamageInnerRadius, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, DamageOuterRadius, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, DamageFalloff, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenade, UnknownData_OW1S, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGrenade, 0x05A0);
		}

		// class UGrenadeAnimInstance : public UVRControllerAnimInstance
		TEST_METHOD(Class__Pavlov__GrenadeAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, GrenadeState, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, UnknownData_WP75, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, PinPullRatio, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, PullPinVectorTarget, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, bShouldSimulateRing, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, bGrabbedByPin, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, UnknownData_GK1L, 0x03E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, PullPinVector, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, PinScale, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, LeverScale, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrenadeAnimInstance, UnknownData_NDDC, 0x040C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGrenadeAnimInstance, 0x0410);
		}

		// class AGrenadeLever : public AActor
		TEST_METHOD(Class__Pavlov__GrenadeLever)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeLever, UnknownData_K4V6, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeLever, GrenadeLeverMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeLever, SurfaceFX, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGrenadeLever, 0x0340);
		}

		// class AGrenadeTrailProxy : public AActor
		TEST_METHOD(Class__Pavlov__GrenadeTrailProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeTrailProxy, Trail, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeTrailProxy, Team0Material, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeTrailProxy, Team1Material, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeTrailProxy, TeamId, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGrenadeTrailProxy, UnknownData_W1N8, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGrenadeTrailProxy, 0x0348);
		}

		// class AGun : public AVRGun
		TEST_METHOD(Class__Pavlov__Gun)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_WSVG, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, GripRefLocation, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bHasLegacyGrip, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_H2JJ, 0x0959);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, SourceBusComp, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, AudioVolume, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, ReverbSubmix, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_3QBC, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bCanRemoveAttachments, 0x09E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_L954, 0x09EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, LastCheckedAttachmentRemoval, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_7B65, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, LastTwoHandDirection, 0x09F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, TwoHandPickOffset, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_MJFG, 0x0A0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bKeepTwoHand, 0x0A0E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_VLWR, 0x0A0F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, AdditionalHandOffset, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bSideGun, 0x0A1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bGenerateMagBoltReleaseEvents, 0x0A1D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bCustomCocking, 0x0A1E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bDeltaCocking, 0x0A1F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bNeedsTwoHands, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_XHAW, 0x0A21);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, StockDuration, 0x0A24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bTwoHandSupportOnly, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bTwoHandReload, 0x0A29);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_IQUV, 0x0A2A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, TwoHandGripSound, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bDropByRecoil, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bSupportsAutoUngrip, 0x0A39);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bSupportsMagRelease, 0x0A3A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bSingleShotDrop, 0x0A3B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, MaxTwoHandGripDistance, 0x0A3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, GripOffset, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, MagneticGripDistance, 0x0A4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, MagneticGripSequence, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, NoMagazineMagneticGripSequence, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, AccessoryGripSequence, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, TriggerAngle, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnsteadyRecoilAngleMul, 0x0A6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnsteadyRecoilTraslationMul, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnsteadySpraySpreadMul, 0x0A74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, MaxUngrippedRecoil, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, MaxUngrippedDuration, 0x0A7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, GrippedCounterRecoilLimitMul, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_FBI4, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, ExploitSound, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, ShotConcurrencyQuality, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, HitSurfaceFX, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bUseChamberEjectFX, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_VP7C, 0x0AC9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, ChamberEjectSurfaceFX, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, RattlePoints, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, SpeedModifier, 0x0ADC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, CrouchAcuracy, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, StandingAcuracy, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, MovingAcuracy, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_4GA6, 0x0AEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, BobCurve, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, BobSpeed, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, BobMultiplier, 0x0AFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, BobBlendSpeed, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, ADSSpeedMultiplier, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, StrafingMultiplier, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, CrouchSideRecoilMul, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bHapticsRecoil, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bScopeIsLongerThanGun, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_4JFO, 0x0B19);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, LastHapticTime, 0x0B1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, Suppresor, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, Sight, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, Grip, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, Accessory, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, Canted, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, PicatinnySocket, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, PicatinnyLength, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, SightCompatibility, 0x0B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, GripSocket, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, GripCompatibility, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_BLBI, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, SuppressorSocket, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, SuppressorCompatibility, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_7KUL, 0x0B74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, AccessorySocket, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, AccessoryCompatibility, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_Q5ZW, 0x0B84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, CantedSocket, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, CantedCompatibility, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_CEFA, 0x0B94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, DefaultAttachments, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, AttachmentModeRange, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, LowEndSightReplacement, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, AttachmentModeHoldTime, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, AttachModeTime, 0x0BDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bHideIronOverride, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, bPlayManualCockSound, 0x0BE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_VREB, 0x0BE2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, OnMagBoltRelease, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGun, UnknownData_3GXQ, 0x0BF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGun, 0x0C00);
		}

		// class UGunbHapticsRecoil : public UDataAsset
		TEST_METHOD(Class__Pavlov__GunbHapticsRecoil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunbHapticsRecoil, RightChestMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunbHapticsRecoil, LeftChestMap, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunbHapticsRecoil, RightArmMap, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunbHapticsRecoil, LeftArmMap, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGunbHapticsRecoil, 0x0170);
		}

		// class USkinComponent : public UActorComponent
		TEST_METHOD(Class__Pavlov__SkinComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinComponent, SkinMap, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinComponent, 0x0140);
		}

		// class UGunSkinComponent : public USkinComponent
		TEST_METHOD(Class__Pavlov__GunSkinComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunSkinComponent, bSwapMagazineSkin, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunSkinComponent, bUseMagazineMap, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunSkinComponent, UnknownData_2CUT, 0x0142);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunSkinComponent, MagazineMap, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunSkinComponent, BulletMaterialIndex, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunSkinComponent, UnknownData_SBBN, 0x019C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGunSkinComponent, 0x01A0);
		}

		// class AHandMenu : public AActor
		TEST_METHOD(Class__Pavlov__HandMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHandMenu, ShowSound, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHandMenu, HideSound, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHandMenu, 0x0338);
		}

		// class UHealEffectComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Pavlov__HealEffectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealEffectComponent, HealMaterial, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealEffectComponent, TotalHealTime, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealEffectComponent, HealTimeAlpha, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealEffectComponent, HealingCurve, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealEffectComponent, 0x0600);
		}

		// class UHighlightInterface : public UInterface
		TEST_METHOD(Class__Pavlov__HighlightInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHighlightInterface, 0x0028);
		}

		// class ARatAIController : public AAIController
		TEST_METHOD(Class__Pavlov__RatAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARatAIController, TargetPawn, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARatAIController, TargetLocation, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARatAIController, UnknownData_RPWX, 0x044C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARatAIController, 0x0450);
		}

		// class URatAnimInstance : public UAnimInstance
		TEST_METHOD(Class__Pavlov__RatAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URatAnimInstance, UnknownData_SY3F, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::URatAnimInstance, UnknownData_L62N, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::URatAnimInstance, MovingSpeedReference, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::URatAnimInstance, MovingSpeed, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::URatAnimInstance, PelvisRotation, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::URatAnimInstance, SpineRotation, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::URatAnimInstance, SpineLerpExp, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::URatAnimInstance, bMoving, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::URatAnimInstance, bFalling, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::URatAnimInstance, bLookAt, 0x0396);
			CHEAT_GEAR_CHECK_OFFSET(CG::URatAnimInstance, UnknownData_JQIL, 0x0397);
			CHEAT_GEAR_CHECK_OFFSET(CG::URatAnimInstance, LookAtLocation, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::URatAnimInstance, UnknownData_HS9Q, 0x03A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URatAnimInstance, 0x03B0);
		}

		// class ARconPawn : public ASpectatorPawn
		TEST_METHOD(Class__Pavlov__RconPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARconPawn, PawnRoot, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARconPawn, PawnCamera, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARconPawn, UnknownData_SWNN, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARconPawn, 0x03E8);
		}

		// class ARepairTool : public AVRItem
		TEST_METHOD(Class__Pavlov__RepairTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARepairTool, 0x04D0);
		}

		// class UReplayManager : public UObject
		TEST_METHOD(Class__Pavlov__ReplayManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplayManager, UnknownData_71SF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplayManager, ReplayList, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplayManager, OnReplayListUpdated, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplayManager, OnReplayPlay, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplayManager, 0x0068);
		}

		// class AReplayPawn : public APawn
		TEST_METHOD(Class__Pavlov__ReplayPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReplayPawn, 0x0388);
		}

		// class AReplayPlayerController : public APlayerController
		TEST_METHOD(Class__Pavlov__ReplayPlayerController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReplayPlayerController, 0x0688);
		}

		// class AReviveTool : public AVRItem
		TEST_METHOD(Class__Pavlov__ReviveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReviveTool, 0x04D0);
		}

		// class URevolverGunState : public UVRGunState
		TEST_METHOD(Class__Pavlov__RevolverGunState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolverGunState, bCylinderOpen, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolverGunState, UnknownData_NQT4, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolverGunState, OnRevolverCylinderChanged, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolverGunState, 0x0180);
		}

		// class URifleGunState : public UActionGunState
		TEST_METHOD(Class__Pavlov__RifleGunState)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URifleGunState, 0x01A0);
		}

		// class URockerLauncherGunState : public UVRGunState
		TEST_METHOD(Class__Pavlov__RockerLauncherGunState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URockerLauncherGunState, LauncherState, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::URockerLauncherGunState, UnknownData_G8LA, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::URockerLauncherGunState, OnLauncherStateChanged, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URockerLauncherGunState, 0x0180);
		}

		// class UHitBoxProxyComponent : public UActorComponent
		TEST_METHOD(Class__Pavlov__HitBoxProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitBoxProxyComponent, UnknownData_6RF9, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitBoxProxyComponent, BoundingBox, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitBoxProxyComponent, NumSamples, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitBoxProxyComponent, SampleInterval, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitBoxProxyComponent, HitBoxDefinitions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitBoxProxyComponent, SkeletonMesh, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitBoxProxyComponent, UnknownData_S0Q7, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitBoxProxyComponent, History, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitBoxProxyComponent, 0x0138);
		}

		// class UHolsterComponent : public USphereComponent
		TEST_METHOD(Class__Pavlov__HolsterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHolsterComponent, UnknownData_8HK2, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHolsterComponent, AttachSocket, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHolsterComponent, AllowedClasses, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHolsterComponent, bDisabled, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHolsterComponent, bMirrorable, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHolsterComponent, bRightHanded, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHolsterComponent, UnknownData_TYSJ, 0x05A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHolsterComponent, HolsteredItem, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHolsterComponent, 0x05B0);
		}

		// class UIconRemover : public UActorComponent
		TEST_METHOD(Class__Pavlov__IconRemover)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIconRemover, Icons, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIconRemover, 0x0100);
		}

		// class UImpairInterface : public UInterface
		TEST_METHOD(Class__Pavlov__ImpairInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImpairInterface, 0x0028);
		}

		// class AInfoView : public AContentView
		TEST_METHOD(Class__Pavlov__InfoView)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfoView, 0x0488);
		}

		// class UInstancedSourceBusComponent : public USceneComponent
		TEST_METHOD(Class__Pavlov__InstancedSourceBusComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedSourceBusComponent, SourceBusInstance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedSourceBusComponent, AudioComp, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedSourceBusComponent, SoundCache, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedSourceBusComponent, PlayingAudioComponents, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedSourceBusComponent, UnknownData_JI2K, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedSourceBusComponent, SourceBus, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedSourceBusComponent, SilenceDelay, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedSourceBusComponent, bNoSilencing, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedSourceBusComponent, bAllowAttenuation, 0x02BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedSourceBusComponent, UnknownData_DU2Y, 0x02BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedSourceBusComponent, ConcurrencyOverride, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedSourceBusComponent, UnknownData_7Z1E, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedSourceBusComponent, 0x02D0);
		}

		// class AKillCam : public AActor
		TEST_METHOD(Class__Pavlov__KillCam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillCam, BulletTrace, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillCam, ImpactPoint, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillCam, KillerInfo, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillCam, KillInfo, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillCam, TraceScaleMul, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillCam, MinInfoDistance, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillCam, FactorScale, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillCam, MinScale, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillCam, MaxScale, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillCam, RefInfoScale, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillCam, InfoOffset, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillCam, UnknownData_AEIR, 0x03D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillCam, 0x03D8);
		}

		// class AStereoOverlay : public AActor
		TEST_METHOD(Class__Pavlov__StereoOverlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStereoOverlay, Mode, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStereoOverlay, UnknownData_23MS, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStereoOverlay, Distance, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStereoOverlay, Height, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStereoOverlay, Tilt, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStereoOverlay, Duration, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStereoOverlay, bForce, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStereoOverlay, bDominant, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStereoOverlay, UnknownData_DRFI, 0x033E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStereoOverlay, SidearmLength, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStereoOverlay, SidearmHeight, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStereoOverlay, SidearmSmoothRatio, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStereoOverlay, UnknownData_B0D9, 0x034C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStereoOverlay, 0x0350);
		}

		// class AKillfeed : public AStereoOverlay
		TEST_METHOD(Class__Pavlov__Killfeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillfeed, bDisplayInArm, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillfeed, bKillfeedVisible, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillfeed, UnknownData_H754, 0x0352);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillfeed, FadeRatio, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillfeed, FadeSpeed, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillfeed, RelativeOffset, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillfeed, KillfeedTilt, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKillfeed, UnknownData_IM2V, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillfeed, 0x0370);
		}

		// class UDamageType_Knife : public UDamageType
		TEST_METHOD(Class__Pavlov__DamageType_Knife)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType_Knife, 0x0040);
		}

		// class AKnife : public AVRItem
		TEST_METHOD(Class__Pavlov__Knife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, Mesh, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, BladeProxy, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, UnknownData_0JKE, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, bBloody, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, UnknownData_85Z2, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, BladeVelocity, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, KnifeDamageTable, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, Damage, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, MinDamage, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, MaxDamage, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, SpeedReference, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, StabSound, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, ThrowLoopSound, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, StabParticle, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, ParticleOffset, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, bGrabCooldown, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, UnknownData_ZNAL, 0x053D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, ProxyKnifeClass, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, MinThrowSoundSpeed, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, UnknownData_4SRM, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, LatestInstigator, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, bHasSpawnedProxy, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, UnknownData_AED1, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, Throw_Handle, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, ThrowAudioComp, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, bThrowIsSlow, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, UnknownData_J0FG, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, ThrowTime, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKnife, UnknownData_3G36, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKnife, 0x0580);
		}

		// class AKOTHObjective : public AActor
		TEST_METHOD(Class__Pavlov__KOTHObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, HillRoot, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, HillMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, HillMarker, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, KOTHState, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, UnknownData_DIEG, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, MaxPointsToAward, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, MaxSecondsActive, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, HillUpdateFrequency, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, bCanSpawnLootCrate, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, UnknownData_H4UF, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, IncreaseToBoundsScale, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, HillActiveSoundVolume, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, UnknownData_8WYM, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, ActiveSound, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, OnKOTHStateChanged, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, OnKOTHTeamScored, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, OnKOTHObjectiveInactive, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, HillTimer_Handle, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, HillTicks, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, TotalAwardedPoints, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, TotalTimeActive, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, UnknownData_TYY8, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKOTHObjective, KOTHProxy, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKOTHObjective, 0x03B8);
		}

		// class ULimitedAmmoComponent : public UActorComponent
		TEST_METHOD(Class__Pavlov__LimitedAmmoComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitedAmmoComponent, AmmoCounterClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitedAmmoComponent, AmmoCounter, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULimitedAmmoComponent, 0x0100);
		}

		// class ULimitedAmmoBoxesComponent : public ULimitedAmmoComponent
		TEST_METHOD(Class__Pavlov__LimitedAmmoBoxesComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULimitedAmmoBoxesComponent, 0x0100);
		}

		// class ULimitedAmmoBoxlessComponent : public ULimitedAmmoComponent
		TEST_METHOD(Class__Pavlov__LimitedAmmoBoxlessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitedAmmoBoxlessComponent, MaxAmmoLimits, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitedAmmoBoxlessComponent, AmmoCount, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULimitedAmmoBoxlessComponent, 0x0160);
		}

		// class ALimitedAmmoCounter : public AActor
		TEST_METHOD(Class__Pavlov__LimitedAmmoCounter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALimitedAmmoCounter, 0x0328);
		}

		// class ULimitedAmmoCustomComponent : public ULimitedAmmoComponent
		TEST_METHOD(Class__Pavlov__LimitedAmmoCustomComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULimitedAmmoCustomComponent, 0x0100);
		}

		// class ULoadoutData : public UDataAsset
		TEST_METHOD(Class__Pavlov__LoadoutData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadoutData, LoadoutProperties, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadoutData, 0x0080);
		}

		// class UUIModel : public UObject
		TEST_METHOD(Class__Pavlov__UIModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIModel, UnknownData_8ROS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUIModel, 0x0040);
		}

		// class ULobbyStatusModel : public UUIModel
		TEST_METHOD(Class__Pavlov__LobbyStatusModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyStatusModel, Message, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyStatusModel, bDownloading, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyStatusModel, UnknownData_9B5G, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyStatusModel, Progress, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyStatusModel, Timestamp, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULobbyStatusModel, 0x0068);
		}

		// class ALootSpawner : public AActor
		TEST_METHOD(Class__Pavlov__LootSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootSpawner, LootIndex, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALootSpawner, UnknownData_BOPJ, 0x0329);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALootSpawner, 0x0330);
		}

		// class AMagazine : public AVRMagazine
		TEST_METHOD(Class__Pavlov__Magazine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagazine, SurfaceFX, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagazine, UnknownData_X86I, 0x0638);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagazine, 0x0640);
		}

		// class AMainMenu : public AHandMenu
		TEST_METHOD(Class__Pavlov__MainMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu, UI, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu, bScoreboard, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu, bOverrideUpdateScoreboard, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu, UnknownData_2HUU, 0x0342);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainMenu, 0x0348);
		}

		// class AMainMenuView : public AContentView
		TEST_METHOD(Class__Pavlov__MainMenuView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuView, UnknownData_D1BM, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainMenuView, 0x04A0);
		}

		// class AMapBrowserModalView : public AModalView
		TEST_METHOD(Class__Pavlov__MapBrowserModalView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapBrowserModalView, MapBrowserModel, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMapBrowserModalView, 0x0490);
		}

		// class UMapBrowserModel : public UUIModel
		TEST_METHOD(Class__Pavlov__MapBrowserModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBrowserModel, UnknownData_T61V, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBrowserModel, Workshop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBrowserModel, UnknownData_CRAE, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBrowserModel, bBusy, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBrowserModel, bFavoritesOnly, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBrowserModel, bIsDownloading, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBrowserModel, UnknownData_CO0P, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBrowserModel, DownloadProgress, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBrowserModel, Selection, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBrowserModel, Section, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBrowserModel, NumPages, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBrowserModel, CurrentPage, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBrowserModel, UnknownData_AF3S, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBrowserModel, Maps, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBrowserModel, 0x00E8);
		}

		// class AMapValidator : public AActor
		TEST_METHOD(Class__Pavlov__MapValidator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapValidator, SceneRoot, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapValidator, DebugDrawTime, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapValidator, ReflectionBounds, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapValidator, ReflectionGridSize, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapValidator, UnknownData_VAAN, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMapValidator, RandomColors, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMapValidator, 0x0360);
		}

		// class UMatchmaking : public UObject
		TEST_METHOD(Class__Pavlov__Matchmaking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, Status, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, bPartyWaiting, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, bUpdatingPartyList, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, UnknownData_H1CD, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, PartyList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, Settings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, AzureServer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, OnStatusChanged, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, OnPartyCreated, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, OnPartyLeave, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, OnPartyUpdated, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, OnCreatePartyFailed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, OnPartyListUpdated, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, OnPartyMemberSpeakChanged, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatchmaking, 0x00E0);
		}

		// class UMatchmakingParty : public UObject
		TEST_METHOD(Class__Pavlov__MatchmakingParty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmakingParty, SerializedNetworkDescriptor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmakingParty, bCreatedLocally, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmakingParty, RemoteStatus, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmakingParty, UnknownData_KNSA, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmakingParty, Members, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatchmakingParty, 0x0090);
		}

		// class AMatchmakingView : public AMenuUniverseView
		TEST_METHOD(Class__Pavlov__MatchmakingView)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatchmakingView, 0x0438);
		}

		// class AMenuUniverse : public AActor
		TEST_METHOD(Class__Pavlov__MenuUniverse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, Facing, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, CameraComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, CameraPivot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, HiddenActors, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, Views, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, MainMenuView, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, InfoView, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, PrimaryView, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, SecondaryView, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, UnknownData_O3H3, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, bCanBeClosed, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, UnknownData_CML6, 0x03C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, HeightOffset, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, Distance, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, Scale, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, UnknownData_C60O, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, ScrollHaptics, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, ScrollHapticThreashold, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, UnknownData_56C0, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, PointerMesh, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, PointerLineMesh, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, PointerScale, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, PointerLineScale, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, PointerPitch, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, PointerDistance, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, PointerChannel, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, bDebugPointer, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, UnknownData_BBH5, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuUniverse, PausePawn, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenuUniverse, 0x0468);
		}

		// class UMenuUniverseController : public UMotionControllerComponent
		TEST_METHOD(Class__Pavlov__MenuUniverseController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuUniverseController, UnknownData_AJ68, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuUniverseController, Stick, 0x0618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuUniverseController, 0x0620);
		}

		// class UModal : public UObject
		TEST_METHOD(Class__Pavlov__Modal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModal, View, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModal, ViewContent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModal, ViewClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModal, bAllowContent, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModal, bHideForeground, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModal, bPersistent, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModal, UnknownData_82FQ, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModal, ContextValue, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModal, ContextValueStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModal, OnCommit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModal, OnDestroyed, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModal, 0x0080);
		}

		// class UModalMessageBox : public UModal
		TEST_METHOD(Class__Pavlov__ModalMessageBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalMessageBox, Type, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalMessageBox, UnknownData_RWWG, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalMessageBox, Message, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalMessageBox, Progress, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModalMessageBox, UnknownData_MHHT, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModalMessageBox, 0x00A8);
		}

		// class AModerationView : public AContentView
		TEST_METHOD(Class__Pavlov__ModerationView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AModerationView, StaticModel, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AModerationView, 0x0490);
		}

		// class AMuzzleExploitBlocker : public ATriggerBox
		TEST_METHOD(Class__Pavlov__MuzzleExploitBlocker)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMuzzleExploitBlocker, 0x0330);
		}

		// class UNameTag : public UActorComponent
		TEST_METHOD(Class__Pavlov__NameTag)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameTag, 0x00F0);
		}

		// class USpriteWidgetComponent : public UWidgetComponent
		TEST_METHOD(Class__Pavlov__SpriteWidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpriteWidgetComponent, FaceToTargetOverride, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpriteWidgetComponent, UnknownData_PJ6Y, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpriteWidgetComponent, 0x06B0);
		}

		// class UNameTagComponent : public USpriteWidgetComponent
		TEST_METHOD(Class__Pavlov__NameTagComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameTagComponent, 0x06B0);
		}

		// class UNameTagWidget : public UNameTag
		TEST_METHOD(Class__Pavlov__NameTagWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidget, WidgetClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidget, UnknownData_CCCU, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidget, DefaultRelativeTransform, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidget, WidgetDrawSize, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidget, bManuallyRedraw, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidget, UnknownData_ZOV9, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidget, RedrawTime, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidget, NameTag, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidget, LocalPlayerState, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidget, OwnerPlayerState, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidget, PavGameState, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameTagWidget, 0x0160);
		}

		// class UNameTagWidgetTTT : public UNameTagWidget
		TEST_METHOD(Class__Pavlov__NameTagWidgetTTT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidgetTTT, RoleMesh, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidgetTTT, UnknownData_Z7EL, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidgetTTT, RoleDefaultTransform, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidgetTTT, RoleDefaultMesh, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidgetTTT, bOverrideUpdateVisibility, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNameTagWidgetTTT, UnknownData_VZRJ, 0x01A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameTagWidgetTTT, 0x01B0);
		}

		// class UOculusInputBinding : public UObject
		TEST_METHOD(Class__Pavlov__OculusInputBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusInputBinding, 0x0028);
		}

		// class UOnlineAuthentication : public UPavlovObject
		TEST_METHOD(Class__Pavlov__OnlineAuthentication)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineAuthentication, UnknownData_5A8K, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineAuthentication, Credential, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineAuthentication, UnknownData_Q7XN, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineAuthentication, CredentialClass, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineAuthentication, bAllowReLoginAttempts, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineAuthentication, UnknownData_GL9X, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineAuthentication, OnLoginStatusChanged, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineAuthentication, 0x00A0);
		}

		// class UOnlineCredential : public UPavlovObject
		TEST_METHOD(Class__Pavlov__OnlineCredential)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineCredential, UnknownData_UPXZ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineCredential, 0x00C8);
		}

		// class UOnlineCredentialDevice : public UOnlineCredential
		TEST_METHOD(Class__Pavlov__OnlineCredentialDevice)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineCredentialDevice, 0x00C8);
		}

		// class UOnlineCredentialEpic : public UOnlineCredential
		TEST_METHOD(Class__Pavlov__OnlineCredentialEpic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineCredentialEpic, UnknownData_ULAE, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineCredentialEpic, OnLoginCodeGranted, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineCredentialEpic, 0x00F0);
		}

		// class UOnlineCredentialSteam : public UOnlineCredential
		TEST_METHOD(Class__Pavlov__OnlineCredentialSteam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineCredentialSteam, UnknownData_8C99, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineCredentialSteam, 0x00F0);
		}

		// class UOnlineLeaderboards : public UPavlovObject
		TEST_METHOD(Class__Pavlov__OnlineLeaderboards)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLeaderboards, UnknownData_6MD7, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLeaderboards, OnLeaderboardQueryComplete, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineLeaderboards, 0x0060);
		}

		// class UOnlineLobby : public UPavlovObject
		TEST_METHOD(Class__Pavlov__OnlineLobby)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLobby, UnknownData_XH15, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLobby, Talkers, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLobby, LocalUserTalkTimer, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLobby, UnknownData_9TYQ, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLobby, Members, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLobby, Info, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLobby, VoiceVolume, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLobby, bLightModeEnabled, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLobby, UnknownData_NIZF, 0x019D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineLobby, 0x01A0);
		}

		// class UOnlineManager : public UPavlovObject
		TEST_METHOD(Class__Pavlov__OnlineManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, UnknownData_RV0I, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, Requests, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, UnknownData_BX1H, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, LobbyInstance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, UnknownData_AOO0, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, Platform, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, Authentication, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, Stats, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, Leaderboards, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, LobbyClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, OnLobbyListUpdated, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, OnLobbyUpdated, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, OnLobbyEnter, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, OnLobbyLeave, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, OnLobbyCreated, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, OnLobbyMembersUpdate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, OnError, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, OnLobbySearchComplete, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, OnLobbyStatusMessage, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineManager, OnJoinServerStateChanged, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineManager, 0x01A0);
		}

		// class UOnlinePlatform : public UPavlovObject
		TEST_METHOD(Class__Pavlov__OnlinePlatform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePlatform, UnknownData_ZVDT, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePlatform, FailoverAvatarTexture, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePlatform, AvatarTextures, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePlatform, UnknownData_AW5Z, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePlatform, Friends, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePlatform, OnRichPresenceUpdated, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePlatform, OnAvatarUpdated, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePlatform, 0x0198);
		}

		// class UOnlinePlatformOculus : public UOnlinePlatform
		TEST_METHOD(Class__Pavlov__OnlinePlatformOculus)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePlatformOculus, 0x0198);
		}

		// class UOnlinePlatformSteam : public UOnlinePlatform
		TEST_METHOD(Class__Pavlov__OnlinePlatformSteam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePlatformSteam, UnknownData_KREM, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePlatformSteam, 0x01A0);
		}

		// class UOnlineRequest : public UPavlovObject
		TEST_METHOD(Class__Pavlov__OnlineRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineRequest, UnknownData_JK7U, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineRequest, 0x00F8);
		}

		// class UOnlineStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Pavlov__OnlineStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineStatics, 0x0028);
		}

		// class UOnlineStats : public UPavlovObject
		TEST_METHOD(Class__Pavlov__OnlineStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineStats, UnknownData_2FAH, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineStats, OnIngestStatsComplete, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineStats, OnQueryStatsComplete, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineStats, 0x0070);
		}

		// class UOutOfBoundsComponent : public UActorComponent
		TEST_METHOD(Class__Pavlov__OutOfBoundsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfBoundsComponent, DamageGraceTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfBoundsComponent, DamagePerTick, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfBoundsComponent, DamageTickRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfBoundsComponent, DamageScale, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfBoundsComponent, GuideMesh, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfBoundsComponent, VignetteMesh, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfBoundsComponent, SphereMesh, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfBoundsComponent, VignetteMaterial, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfBoundsComponent, OutOfBoundsInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfBoundsComponent, DamageTick_Handle, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOutOfBoundsComponent, 0x0140);
		}

		// class APainkillers : public AVRItem
		TEST_METHOD(Class__Pavlov__Painkillers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainkillers, 0x04D0);
		}

		// class APavlovAIController : public AAIController
		TEST_METHOD(Class__Pavlov__PavlovAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, UnknownData_H2VI, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, LastKnownAimTarget, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, UnknownData_HIXM, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, SuppresionSources, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, bTargetVisible, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, UnknownData_90M7, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, TargetDistance, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, bCanEngage, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, EngageState, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, UnknownData_LL04, 0x04C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, SkillRatio, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, SkillMultiplier, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, UnknownData_5IR9, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, Personality, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, SwitchTargetCooldown, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, VisibilityCheckInterval, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, SuppresedThreashold, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, SuppresionCleanUpInterval, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, ReactionDelay, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovAIController, OutOfSightShootingDuration, 0x050C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovAIController, 0x0510);
		}

		// class UPavlovAvatarAnimInstance : public UVRAvatarAnimInstance
		TEST_METHOD(Class__Pavlov__PavlovAvatarAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, MovingRotationTarget, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, MovingRotationLerpRatio, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, bSprinting, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, UnknownData_SX8Y, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, MovingRotation, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, JointPickup, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, JointGun, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, JointGunGripped, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, HandBlendExp, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, FingerLerpExp, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, bRightHanded, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, bIsGrippingGun, 0x04ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, bHasPickupRight, 0x04EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, bHasGunRight, 0x04EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, bHasPickupLeft, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, bHasGunLeft, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, UnknownData_0GVE, 0x04F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, HandBlendLeft, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, HandBlendRight, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, HTR0, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, HTR1, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, HTR2, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, HTR3, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, HTR4, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, HTL0, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, HTL1, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, HTL2, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, HTL3, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, HTL4, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, bSupportsFingerTracking, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, bInVehicle, 0x0525);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, UnknownData_0C7O, 0x0526);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, SeatRot, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, UnknownData_6UNL, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovAvatarAnimInstance, SeatAnim, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovAvatarAnimInstance, 0x0540);
		}

		// class APavlovCustomGameMode : public APavlovGameMode
		TEST_METHOD(Class__Pavlov__PavlovCustomGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovCustomGameMode, ZSpawnCMP, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovCustomGameMode, CustomGameLogic, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovCustomGameMode, PlayerSkins, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovCustomGameMode, ChickenClass, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovCustomGameMode, BanList, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovCustomGameMode, Whitelist, 0x07B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovCustomGameMode, 0x07C0);
		}

		// class UPavlovGameInstance : public UGameInstance
		TEST_METHOD(Class__Pavlov__PavlovGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, SteamworksManager, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_BKGX, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, PlayerEffectsClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_OB8O, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, Tutorial, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, ServerBrowser, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, ServerBrowserV2, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, OculusScale, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_8VQT, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, BuildLabel, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, HiddenMaps, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, HiddenMapsShack, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_UBWN, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, ReverbSubmixGarage, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, ReverbSubmixWarehouse, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, ReverbSubmixTunnel, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UIManager, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, Matchmaking, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, OnlineManager, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, VoiceSource, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, GameSessionServer, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, SoundMixingSettings, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, SoundMixingSettingsClass, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, LocalVoiceModeration, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, ObjectRefBucket, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_SSID, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, BuildVersionStatus, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, bTV, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_83PK, 0x030A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, ReplayManager, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, Exp, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_2SAN, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, DedicatedServer, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, ServerStatusHelper, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_BLGA, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, bFirstBoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_R9UO, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, MasterServerSessionId, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, bStopFindingGameServer, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_DGP2, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, ServerList, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, MatchmakingState, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_LLZX, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, MasterServerUrl, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, ServerQueryInterval, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_2G0K, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, PatreonList, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, OnMenuUniverseChanged, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, OnMatchmakingStateChanged, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, OnQuickmatchFailed, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, OnLobbyStateChanged, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, OnServerListUpdated, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, OnGetMapListAdvancedResult, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, OnServerConnectFailure, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, OnBuildVersionStatusChanged, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, ConnectorInstance, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, SplashScreenTextures, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, SplashScreenIndex, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_7Y7O, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, SplashScreenHide_Handle, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_JQII, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, MapDefinitions, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_4546, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, GameSessionState, 0x05AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, UnknownData_BVNX, 0x05AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, Workshop, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameInstance, AdvancedMapList, 0x05B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovGameInstance, 0x05C8);
		}

		// class APavlovGameState : public AGameState
		TEST_METHOD(Class__Pavlov__PavlovGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, TempPlayerArray, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, EquipmentDataByClassMap, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, PreloadedSkins, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, Settings, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, bNoTeams, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, bMovementDisabled, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, bNoFallDamage, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, bLimitedAmmo, 0x046B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, Team0Score, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, Team1Score, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, RoundDuration, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, RoundTime, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, AttackingTeam, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, RoundWinner, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, RoundsLeft, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, bMatchTimePaused, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, UnknownData_2VWE, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, MatchTime, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, EquipmentCosts, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, ScoreboardClass, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, HandMenuClass, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, NameTagClass, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, bShowNameTags, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, CompetitiveMode, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, bPreventGrenadePin, 0x04B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, bCanReviveEnemies, 0x04B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, GameModeType, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, UnknownData_NZAL, 0x04B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, BuyRestrictions, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, BuyMenuScript, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, BalancingCSV, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, EquipmentTable, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, VehicleTable, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, LootMeshTable, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, EquipmentIndexCache, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, Killfeed, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, CosmeticTickManager, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, AsyncLoader, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, MaxPlayers, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, bPinProtected, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, Holiday, 0x0665);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, UnknownData_W1FX, 0x0666);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, OnKillfeedEntry, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovGameState, GlobalInfo, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovGameState, 0x0680);
		}

		// class UPavlovGameUserSettings : public UGameUserSettings
		TEST_METHOD(Class__Pavlov__PavlovGameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, PlayerHeight, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, PlayerCrouchHeight, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bPlayerRightHanded, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bCalibrated, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bOOBLocomotion, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bTwoHandToggle, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bAutoUngrip, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bLegacyGrip, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bSnapTurnEnabled, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bMountFriendly, 0x0127);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, PrimaryRegion, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bHideFullServers, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bHideEmptyServers, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bHidePinLockedServers, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, ServerSearchType, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, ServerSortType, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, UnknownData_UIIK, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, GMFilters, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, GMFiltersV2, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, FavoriteServers, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, RegionFilters, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bForceNoPostProcess, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bAutoSwapHands, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bLeftEyeRendering, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bSwapControllers, 0x0173);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bVirtualStock, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, GripModeVive, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, GripModeOculus, 0x0176);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bSmoothTurn, 0x0177);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, SmoothTurnRate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, MainHandAction, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, OffHandAction, 0x017D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bAutoSprint, 0x017E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bLiteFootStepHaptics, 0x017F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bLockInventory, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bHeadLocomotion, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bFreeSpectating, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, UnknownData_6RM7, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, SpectatorViews, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bInvertTouchpad, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bArmKillfeed, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, UnknownData_WPC5, 0x019A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, VoiceDevice, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, FavoriteMaps, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bRealTimeReverb, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bUseAudioThread, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bNoAmbisonics, 0x01C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bSwapMenuScoreboard, 0x01C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, GripMode, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, SmoothLocomotionMode, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, GoreLevel, 0x01C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, UnknownData_QJQM, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, GrabForceThreashold, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bUseGrabForce, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, UnknownData_56W2, 0x01CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, StartUpMap, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bForceTubeHaptics, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bHapticsSuit, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bUseAdvancedVehicleInput, 0x01E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bHideAmmoCounter, 0x01E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bMicMuted, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, bOnScreenEffects, 0x01E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, UnknownData_1PSG, 0x01E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, PavlovVersion, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, UnknownData_SNFN, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, OnHandsSwitched, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, OnVirtualStockChanged, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, OnArmKillfeedChanged, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, OnAdvancedVehicleInputChanged, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, OnScreenEffectsChanged, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovGameUserSettings, MutedPlayers, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovGameUserSettings, 0x0250);
		}

		// class UPavlovHandAnimInstance : public UVRControllerAnimInstance
		TEST_METHOD(Class__Pavlov__PavlovHandAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovHandAnimInstance, IndexSafeTriggerTimer, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovHandAnimInstance, UnknownData_AT6R, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovHandAnimInstance, IKTriggerLocation, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovHandAnimInstance, bIKTriggerAvailable, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovHandAnimInstance, UnknownData_9FPI, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovHandAnimInstance, TriggerFingerRotation, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovHandAnimInstance, bImmersiveMode, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovHandAnimInstance, UnknownData_KZHU, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovHandAnimInstance, DefaultImmersiveSequence, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovHandAnimInstance, 0x0450);
		}

		// class APavlovHUD : public AHUD
		TEST_METHOD(Class__Pavlov__PavlovHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovHUD, 0x0418);
		}

		// class APavlovInventory : public AVRInventory
		TEST_METHOD(Class__Pavlov__PavlovInventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovInventory, OnLowAmmo, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovInventory, MagazineGrabSound, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovInventory, OutOfAmmoSound, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovInventory, LastMagazineGrabSound, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovInventory, MagazineGrabHaptic, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovInventory, 0x0478);
		}

		// class APavlovLevelScriptActor : public ALevelScriptActor
		TEST_METHOD(Class__Pavlov__PavlovLevelScriptActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovLevelScriptActor, 0x0330);
		}

		// class UPavlovLobby : public UOnlineLobby
		TEST_METHOD(Class__Pavlov__PavlovLobby)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, UnknownData_UQ1H, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, GameInstance, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, LocalState, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, UnknownData_D31T, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, HostLocallyTimer, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, SanityTimer, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, UnknownData_EB3Z, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, bHostLocally, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, UnknownData_MSVY, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, ServerSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, GameMode, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, Map, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, MapLabel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, State, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, HostingType, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, bFillWithBots, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, bConnecting, 0x028B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovLobby, CompetitiveMode, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovLobby, 0x0290);
		}

		// class UPavlovLocalPlayer : public ULocalPlayer
		TEST_METHOD(Class__Pavlov__PavlovLocalPlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovLocalPlayer, 0x01C8);
		}

		// class APavlovMinimalGameMode : public AGameMode
		TEST_METHOD(Class__Pavlov__PavlovMinimalGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovMinimalGameMode, GhostPawnClass, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovMinimalGameMode, bUseAsyncLoader, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovMinimalGameMode, UnknownData_996R, 0x0419);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovMinimalGameMode, 0x0420);
		}

		// class APavlovMinimalGameState : public APavlovGameState
		TEST_METHOD(Class__Pavlov__PavlovMinimalGameState)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovMinimalGameState, 0x0680);
		}

		// class UFallDamageType : public UDamageType
		TEST_METHOD(Class__Pavlov__FallDamageType)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFallDamageType, 0x0040);
		}

		// class UPavlovMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__Pavlov__PavlovMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, UnknownData_X8K3, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, LastSeatYaw, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, UnknownData_SEX7, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, ParachuteState, 0x074D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, UnknownData_6LVQ, 0x074E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, FallDamage, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, bVehicleReCenter, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, bVehicleRecenterRotation, 0x0755);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, bApplyFallDamage, 0x0756);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, UnknownData_F5Y3, 0x0757);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, AiSpeedMultiplier, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, bRoomScaleLocomotion, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, UnknownData_79QJ, 0x075D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, FreeFallThreashold, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, FreeFallMaxLateralSpeed, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, FreeFallAirControlBoost, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, FallDamagePerSecond, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, MinimumFallDamage, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, AutoParachuteAltitude, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, ParachuteDeceleration, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, ParachuteTerminalVelocity, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, ParachuteAirControlBoost, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, DeploymentDuration, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, DeploymentSound, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, SprintSpeedMultiplier, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, SprintAccelerationMultiplier, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, ADSSpeedMultiplier, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, bAllowParachuteMode, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, UnknownData_700M, 0x079D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, SeatOffset, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, LastHMDLocation, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, HMDSpeed, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovMovementComponent, UnknownData_AHMH, 0x07B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovMovementComponent, 0x07C0);
		}

		// class APavlovPawn : public APavlovPawnBase
		TEST_METHOD(Class__Pavlov__PavlovPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_0CSA, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, Avatar, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HealthComponent, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, PlayerInfo, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, SelectionComponent, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, DamageTracker, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, FootStepAudio, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, LeftCameraAudio, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, RightCameraAudio, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, AvatarSkin, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_WST4, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, EquipmentToLoad, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_S5V8, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, FingerTrackingSent, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_0K30, 0x0BC3);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, LatestKillInfo, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_0HB6, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, StopSprintTimer, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, PlaySpaceExploitKillTimer, 0x0C44);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, MainWeaponHolster, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, WatchComponent, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, Voice, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_2FSX, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, DelayedWoundInfoList, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HeadshotParticleInstances, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HeadshotSoundInstances, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_UWHC, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, NameTag, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, FingerTracking, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_XROC, 0x0CCB);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, AvatarSkinInfo, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, SlowTimer, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, CorpseTime, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, bInvulnerable, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, RadioChannel, 0x0CE9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_3XPX, 0x0CEA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, Armour, 0x0CEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HelmetArmour, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, TeamId, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, bVoiceActive, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_5NKQ, 0x0CF9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, ImpactWeight, 0x0CFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, ImpactCurve, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, BloodSplatClass, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, BloodSplatClassShack, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, MaxBloodSplats, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_MX9J, 0x0D1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HeadshotParticle, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HeadshotBleedParticle, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HeadshotBleedSound, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HeadshotSound, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HeadshotSound2D, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, FallDamageSound, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HeadBoneName, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, ChestBoneName, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HelmetHitParticle, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HelmetHitSound, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, SpawnProtectionDuration, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, PlaySpaceLimits, 0x0D74);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, bUnderPlaySpaceExploit, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_YMFF, 0x0D81);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, PlaySpaceExploitKillDelay, 0x0D84);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, bCameraClipProtectionEnabled, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_ME5C, 0x0D89);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, CameraClipThreashold, 0x0D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, CameraClipMaxDuration, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_2FHU, 0x0D94);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, WearArmourSound, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, WearHelmetSound, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, MaxSlowDuration, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HitSlowDuration, 0x0DAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, SlowMultiplier, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_T5PA, 0x0DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, SlowBones, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HitSound, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HitSoundVictim, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HitSoundShooter, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, ZombieHitSound, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HitEffect, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HitEffectVictim, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, HitMontages, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, RogerSound, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, WatchClass, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, ADSZThreashold, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_KQHA, 0x0E1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, XRayMaterialTeam0, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, XRayMaterialTeam1, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, VoiceAttenuation, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, VoiceSoundClass, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, VoiceEffectChain, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, VoiceVolumeCurve, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, RadioSourceBus, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, RadioSoundClass, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, bPickDisableOnDead, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, bXRayEnabled, 0x0E61);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, bForceFirstPerson, 0x0E62);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_RTEC, 0x0E63);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, DefaultAvatarSkins, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, DefaultNameTagClass, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, RevivePlayerState, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, TazerClass, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, GenerateHitGunClasses, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, PlayerbHaptics, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, LimitedAmmoComps, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, DamageEffectComp, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, OnVoiceChanged, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, OnRadioToggle, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, OnAvatarSkinChanged, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, OnFlashed, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, OnOwnerImpactDamage, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, OnGrenadeCooked, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, WorkshopProxy, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, AvatarSkinTable, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, AISlotManager, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, LastMagGrabTime, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_4G5N, 0x0F7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, TeleportHandle, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, TimeSinceLastFootStep, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, FootStepTimer, 0x0F8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, SprintFootStepCount, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, bArmorRattlePlayed, 0x0F94);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_7UUE, 0x0F95);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, FootStepSneak, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, FootStepWalk, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, FootStepRun, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, ArmorRattleSound, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, DefaultFootStepSound, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, DefaultRunFootStepSound, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, ConcreteFootStepSound, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, ConcreteRunFootStepSound, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, MetalFootStepSound, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, MetalRunFootStepSound, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, CarpetFootStepSound, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, CarpetRunFootStepSound, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, FabricFootStepSound, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, FabricRunFootStepSound, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, WoodFootStepSound, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, WoodRunFootStepSound, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, GlassFootStepSound, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, GlassRunFootStepSound, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, WaterFootStepSound, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, WaterRunFootStepSound, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, DirtFootStepSound, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, DirtRunFootStepSound, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, FootStepHaptic, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, FootStepInterval, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, MinFootStepInterval, 0x1054);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, SneakSpeedMul, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_GJ9I, 0x105C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, LastTeleport, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_QCZS, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, RagdollMinDamping, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, RagdollLifeDuration, 0x108C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, RagdollLife, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_WMJY, 0x1094);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, ConstraintDefaultProfiles, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPawn, UnknownData_P5D9, 0x10A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovPawn, 0x10B0);
		}

		// class UPavlovPhysicsCollisionHandler : public UPhysicsCollisionHandler
		TEST_METHOD(Class__Pavlov__PavlovPhysicsCollisionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovPhysicsCollisionHandler, MaxDistance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovPhysicsCollisionHandler, UnknownData_VDOK, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovPhysicsCollisionHandler, 0x0048);
		}

		// class APavlovPlayerCameraManager : public APlayerCameraManager
		TEST_METHOD(Class__Pavlov__PavlovPlayerCameraManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovPlayerCameraManager, 0x2470);
		}

		// class APavlovPlayerController : public APlayerController
		TEST_METHOD(Class__Pavlov__PavlovPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, UnknownData_08E1, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, AuthTimeout, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, UnknownData_TW51, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, VoiceRouter, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, PassengerPawn, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, bBuyingEnabled, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, bSkipHeadsetScale, 0x0701);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, bHasBoughtSomething, 0x0702);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, UnknownData_QLDO, 0x0703);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, EquipmentSnapshot, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, bHasEquipmentSnapshot, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, bRestoreEquipment, 0x0799);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, UnknownData_CS36, 0x079A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, LastWeaponBuy, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, LastSecondaryWeaponBuy, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, TeamKiller, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, MessageClass, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, KillPingSound, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, RussianAvatarSkinClass, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, OnBuyingChanged, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, OnTeamKilled, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, OnHeadsetScaleChanged, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerController, UnknownData_OG2C, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovPlayerController, 0x0810);
		}

		// class APavlovPlayerState : public APlayerState
		TEST_METHOD(Class__Pavlov__PavlovPlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, TeamId, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, Kills, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, Deaths, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, Assists, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, Cash, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, Exp, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, Progress, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, UnknownData_HG7K, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, PlatformId, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, bDead, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, bDev, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, Flair, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, UnknownData_ABST, 0x0423);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, RespawnCountdown, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, PlayerHeight, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, bRightHanded, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, bVirtualStock, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, bCanVote, 0x042E);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, bSpeaking, 0x042F);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, Purchases, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, bAuthenticated, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, UnknownData_S7LJ, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, LifeTeamKillCount, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, ExtraRespawnCountdown, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, DeadTime, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, EquippedSkins, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, bSpawnGhost, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, UnknownData_YXOH, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, OnCashUpdated, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, bHasPlayerProxy, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, UnknownData_24WM, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovPlayerState, SkinOverride, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovPlayerState, 0x0508);
		}

		// class UPavlovSimpleVehicleMovement : public USimpleWheeledVehicleMovementComponent
		TEST_METHOD(Class__Pavlov__PavlovSimpleVehicleMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovSimpleVehicleMovement, RightWheels, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovSimpleVehicleMovement, LeftWheels, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovSimpleVehicleMovement, TurnTorqueBone, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovSimpleVehicleMovement, TurnTorque, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovSimpleVehicleMovement, RightWheelsInput, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovSimpleVehicleMovement, LeftWheelsInput, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovSimpleVehicleMovement, UnknownData_S8D8, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovSimpleVehicleMovement, 0x0310);
		}

		// class APavlovSpectatorPawn : public ASpectatorPawn
		TEST_METHOD(Class__Pavlov__PavlovSpectatorPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovSpectatorPawn, UnknownData_J91V, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovSpectatorPawn, bIsScrubing, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovSpectatorPawn, UnknownData_IKAH, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovSpectatorPawn, Cycler, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovSpectatorPawn, 0x03D0);
		}

		// class UPavlovStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Pavlov__PavlovStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovStatics, 0x0028);
		}

		// class UPavlovStickComponent : public UVRStickComponent
		TEST_METHOD(Class__Pavlov__PavlovStickComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovStickComponent, 0x0460);
		}

		// class APavlovVehicle : public AWheeledVehicle
		TEST_METHOD(Class__Pavlov__PavlovVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, UnknownData_8Y83, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, MaxSeats, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, UnknownData_U7BC, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, SeatOccupantClasses, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, VehicleInteriorClasses, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, VehicleMaxVelocity, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, CriticalTime, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, VehicleDespawnTime, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, UnknownData_AHLE, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, ExplosionDamageSocket, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, DestroyedVehicleMesh, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, DestroyedVehicleRelativeRot, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, DestroyImpulse, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, SurfaceFX, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, bEngineOn, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, bIsVehicleOccupied, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, UnknownData_XCP1, 0x044A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, DamageHitMap, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, VehicleExplosionDamageClass, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, bAutoEject, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, UnknownData_AH53, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, MaxHealth, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, RepairHealthAmount, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, VehicleDamageState, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, UnknownData_R8B5, 0x04B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, EngineOffDelay, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, EngineFadeTime, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, EngineStartSound, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, EngineStopSound, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, EnterVehicleSound, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, ExitVehicleSound, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, VehicleCriticalSound, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, VehicleCriticalSoundLQ, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, VehicleDestroyedSound, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, VehicleDestroyedSoundLQ, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, RepairSound, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, ZombieHitSound, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, CriticalDamageAlarm, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, CriticalSoundComp, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, DestroyFXSocket, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, VehicleCriticalFX, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, VehicleCriticalFXLQ, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, VehicleDestroyedFX, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, VehicleDestroyedFXLQ, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, CriticalFXComp, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, bEnableDebug, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, UnknownData_TMMJ, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, ExitPoints, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, ExitRadius, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, PawnRadius, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, ExitAngle, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, ExitZHeight, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, OnVehicleDamageStateChanged, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, OnEnterExitVehicle, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, Occupants, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, TeamId, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, UnknownData_365Y, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, Health, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, UnknownData_22VK, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, EngineOff_Handle, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, CriticalDamage_Handle, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, OutOfBounds_Handle, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, Despawn_Handle, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, FlipEject_Handle, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, LastFlipAlpha, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, UnknownData_AGXW, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, KilledByInstigator, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, KilledByActor, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, bOutOfBounds, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle, UnknownData_3U8L, 0x0639);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovVehicle, 0x0640);
		}

		// class APavlovVehicle_4w : public APavlovVehicle
		TEST_METHOD(Class__Pavlov__PavlovVehicle_4w)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovVehicle_4w, 0x0640);
		}

		// class APavlovVehicle_Simple : public APavlovVehicle
		TEST_METHOD(Class__Pavlov__PavlovVehicle_Simple)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovVehicle_Simple, 0x0640);
		}

		// class APavlovVehicle_Tank : public APavlovVehicle
		TEST_METHOD(Class__Pavlov__PavlovVehicle_Tank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, RedrawTime, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TankTrackSpeed, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TankTrackOffset, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, LeftTrackMaterialIndex, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, RightTrackMaterialIndex, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, UnknownData_2RP8, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, RightTrackInstance, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, LeftTrackInstance, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, MinMaxTurretPitch, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretYawSpeedMinMax, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretPitchSpeedMinMax, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretYawSpeed, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretPitchSpeed, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretBulletClass, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretDamageClass, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretSocket, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretCooldown, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, LastTurretFireTime, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretFireMontage, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerBulletClass, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerDamageClass, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerShellClass, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerSocket, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerShellSocket, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerFireRate, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerConeAngle, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerCooldown, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerHeatBuildup, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerHeat, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, bGunnerOverheating, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, UnknownData_OA1L, 0x06F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerFire_Handle, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunneCooldown_Handle, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, EngineRPMs, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, UnknownData_UZU0, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretFireSound, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretFire2DTailSound, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerFireSound, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerFire2DTailSound, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerOverheatSound, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretFireSoundLQ, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretFire2DTailSoundLQ, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerFireSoundLQ, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerFire2DTailSoundLQ, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerOverheatSoundLQ, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, EngineSoundRPMScale, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, RPMSoundAccelSpeed, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, RPMSoundDecelSpeed, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, UnknownData_V15A, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretTurnSocket, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretTurnLoopSound, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretTurnEndSound, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretTurnAudioComp, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, OverheatSoundComponent, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretFireFX, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretFireFXLQ, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerMuzzleFlashDuration, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, UnknownData_J7P8, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerFireFX, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerFireFXLQ, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerFireFXComponent, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, GunnerFireFX_Handle, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, OnGunnerOverheat, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, OnTurretFired, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, OnGunnerFired, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretRotation, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretAudioTurnSpeed, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretInput, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, MachineGunRotation, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, bWasTurretMoving, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, UnknownData_0YJV, 0x0821);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TimeSinceRedraw, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, UnknownData_W49K, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, LastTransform, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, LeftTrackOffset, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, RightTrackOffset, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, LastSoundRPM, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, EngineSoundMaxRPMs, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, TurretYaw, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, bTurretEmpty, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovVehicle_Tank, UnknownData_MOX5, 0x0875);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovVehicle_Tank, 0x0880);
		}

		// class UPavlovVehicleAnimInstance : public UVehicleAnimInstance
		TEST_METHOD(Class__Pavlov__PavlovVehicleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovVehicleAnimInstance, KMPH, 0x08FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovVehicleAnimInstance, 0x0900);
		}

		// class UPavlovVehicleMovementComponent : public UWheeledVehicleMovementComponent4W
		TEST_METHOD(Class__Pavlov__PavlovVehicleMovementComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovVehicleMovementComponent, 0x0428);
		}

		// class UPavlovVOIPTalker : public UVOIPTalker
		TEST_METHOD(Class__Pavlov__PavlovVOIPTalker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovVOIPTalker, UnknownData_I3MU, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPavlovVOIPTalker, RadioSourceBus, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovVOIPTalker, 0x0138);
		}

		// class APavlovWheeledVehicle : public AWheeledVehicle
		TEST_METHOD(Class__Pavlov__PavlovWheeledVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovWheeledVehicle, EngineAudio, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovWheeledVehicle, RollingAudio, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovWheeledVehicle, UnknownData_BQ8G, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovWheeledVehicle, EngineSound, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovWheeledVehicle, EngineStartSound, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovWheeledVehicle, EngineOffSound, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovWheeledVehicle, EngineReverseSound, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovWheeledVehicle, EngineSocket, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APavlovWheeledVehicle, RollingSound, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APavlovWheeledVehicle, 0x03F0);
		}

		// class UPavlovZSpawnCMP : public UZSpawn
		TEST_METHOD(Class__Pavlov__PavlovZSpawnCMP)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPavlovZSpawnCMP, 0x0178);
		}

		// class UPivotComponent : public USceneComponent
		TEST_METHOD(Class__Pavlov__PivotComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPivotComponent, UnknownData_FY67, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPivotComponent, VRPawn, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPivotComponent, UnknownData_PUW0, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPivotComponent, 0x0250);
		}

		// class UPlayerCycler : public UObject
		TEST_METHOD(Class__Pavlov__PlayerCycler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCycler, UnknownData_YVXV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerCycler, 0x0048);
		}

		// class APlayerSpawnPoint : public APlayerStart
		TEST_METHOD(Class__Pavlov__PlayerSpawnPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSpawnPoint, TeamId, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSpawnPoint, bDynamic, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSpawnPoint, bOnlyTeam, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSpawnPoint, bAutoUnStack, 0x035E);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSpawnPoint, UnknownData_KW7P, 0x035F);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSpawnPoint, CountHalfExtent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSpawnPoint, SpawnCount, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSpawnPoint, VisibilityCountTeam0, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerSpawnPoint, VisibilityCountTeam1, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerSpawnPoint, 0x0378);
		}

		// class UPushPlayerDialog : public UDataAsset
		TEST_METHOD(Class__Pavlov__PushPlayerDialog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, Revived, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, LowHealth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, LowAmmo, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, MineDeployed, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, AmmoDeployed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, MedkitDeployed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, OutOfBounds, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, ObjectiveLost, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, ObjectiveComplete, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, OofSound, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, DeathSound, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, GrenadeOut, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, SmokeOut, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, Chants, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, DialogPriority, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDialog, DialogBuffers, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPushPlayerDialog, 0x0148);
		}

		// class UPushPlayerStateComponent : public UActorComponent
		TEST_METHOD(Class__Pavlov__PushPlayerStateComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerStateComponent, LoadoutId, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerStateComponent, AllowedMine, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerStateComponent, UnknownData_6P0G, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerStateComponent, HipSlotItemClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerStateComponent, HipSlotType, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerStateComponent, UnknownData_ANJT, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerStateComponent, LastLowHealthTime, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPushPlayerStateComponent, 0x0110);
		}

		// class URadioToggleComponent : public UBoxComponent
		TEST_METHOD(Class__Pavlov__RadioToggleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioToggleComponent, UnknownData_IB9L, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioToggleComponent, ToggleHaptic, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioToggleComponent, ToggleSound, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioToggleComponent, RogerSound, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadioToggleComponent, 0x05A0);
		}

		// class ARat : public ACharacter
		TEST_METHOD(Class__Pavlov__Rat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARat, HealthComponent, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARat, UnknownData_4QTS, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARat, ImpactWeight, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARat, ImpactCurve, 0x0748);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARat, 0x0750);
		}

		// class APlayOfflineView : public AContentView
		TEST_METHOD(Class__Pavlov__PlayOfflineView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayOfflineView, StaticModel, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayOfflineView, 0x0490);
		}

		// class APliers : public AVRItem
		TEST_METHOD(Class__Pavlov__Pliers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APliers, Mesh, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APliers, State, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APliers, UnknownData_LO8M, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APliers, CutDelay, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APliers, ReleaseDelay, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APliers, UnknownData_9ITL, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APliers, CutSound, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APliers, CuttingSound, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APliers, ReleaseSound, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APliers, CutLocationSocket, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APliers, CutHaptics, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APliers, 0x0510);
		}

		// class APostMatchSummary : public AStereoOverlay
		TEST_METHOD(Class__Pavlov__PostMatchSummary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostMatchSummary, 0x0350);
		}

		// class UPumpActionGunState : public UActionGunState
		TEST_METHOD(Class__Pavlov__PumpActionGunState)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPumpActionGunState, 0x01A0);
		}

		// class APushBomb : public AVRItem
		TEST_METHOD(Class__Pavlov__PushBomb)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBomb, BombState, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBomb, UnknownData_MHCT, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBomb, BombCheckTimer, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APushBomb, 0x04E0);
		}

		// class APushBombObjective : public AVRItem
		TEST_METHOD(Class__Pavlov__PushBombObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, OnPushBombObjectiveStateChanged, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, MeshComponent, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, BombOverlap, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, ObjectiveId, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, ObjectiveMarker, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, UnknownData_Z5F1, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, BombExplosionTime, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, BombTimerAlpha, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, Damage, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, MinDamage, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, DamageFalloff, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, DamageOuterRadius, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, KillRadius, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, UnknownData_NZ00, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, ObjectiveArmed, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, ExplosionFX, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, ExplosionFXLQ, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, ExplosionSound, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, DestroyedFX, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, ObjectiveState, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, UnknownData_JA3V, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, PushObjectiveProxy, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, AttachedPushBomb, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, BombTimer, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, DestroyedFXComp, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, ObjectiveArmedAudioComp, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, PlantInstigator, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, PlantedTime, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushBombObjective, UnknownData_66IW, 0x057C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APushBombObjective, 0x0580);
		}

		// class APushLoadout : public AActor
		TEST_METHOD(Class__Pavlov__PushLoadout)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, DefaultLoadouts, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, Loadouts, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, KnifeClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, ModernKnifeClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, MedKitClass, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, ModernMedkitClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, AmmoCrateClass, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, RepairToolClass, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, MedsClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, ModernMedsClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, SyringeClass, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, ModernSyringeClass, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, AntiTankMineClass, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, AntiPersonnelMineClass, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, BombClass, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, ShackSmokeReplacement, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, LootLockerClass, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, PushPlayerDataClass, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, MaxLootLockers, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, TeamId, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, PushProxy, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, MeshesToLoad, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, LoadedMeshes, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, RetryLoad_Handle, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, bUseWW2Items, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLoadout, UnknownData_S2CL, 0x0481);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APushLoadout, 0x0488);
		}

		// class APushLootLocker : public AActor
		TEST_METHOD(Class__Pavlov__PushLootLocker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLootLocker, LockerMesh, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLootLocker, PrimaryHandMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLootLocker, PrimaryBackMesh, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLootLocker, SecondaryMesh, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLootLocker, KnifeMesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLootLocker, MedsMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLootLocker, SyringeMesh, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLootLocker, MineMesh, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLootLocker, BombMesh, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLootLocker, LoadoutId, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APushLootLocker, LoadoutCount, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APushLootLocker, 0x0380);
		}

		// class UPushManagerComponent : public UActorComponent
		TEST_METHOD(Class__Pavlov__PushManagerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, OnGracePeriodEnded, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, ActiveObjectiveId, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, AttackerTickets, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, DefenderTickets, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, MaxAttackerTickets, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, TicketsPerWave, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, UnknownData_7D41, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, Team0Loadout, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, Team1Loadout, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, LastObjectiveId, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, UnknownData_X5J8, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, MoveSpawnTime, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, WinCondition, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, UnknownData_68L5, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, BombObjectives, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, GracePeriod, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, LoadoutRefreshTime, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, LoadoutHandle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushManagerComponent, OOBGraceHandle, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPushManagerComponent, 0x0168);
		}

		// class UPushPlayerDataComponent : public UActorComponent
		TEST_METHOD(Class__Pavlov__PushPlayerDataComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, LoadoutId, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, AllowedMine, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, HipSlotType, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, UnknownData_XSC4, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, HipSlotItemClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, PlayerDialog, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, HipSlot_Handle, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, LowHealthTimer, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, DialogBufferTimer, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, LastLowAmmoTime, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, LastOofTime, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, LastGrenadeTime, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, CurrentChantIndex, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, LastDialogPlayed, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, DialogQueue, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushPlayerDataComponent, UnknownData_CBUY, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPushPlayerDataComponent, 0x0150);
		}

		// class UShootingRangeTargetComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Pavlov__ShootingRangeTargetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShootingRangeTargetComponent, OnTargetHit, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShootingRangeTargetComponent, UVChannel, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShootingRangeTargetComponent, UnknownData_4I1G, 0x05FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShootingRangeTargetComponent, 0x0600);
		}

		// class UShowOnlyComponent : public UActorComponent
		TEST_METHOD(Class__Pavlov__ShowOnlyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowOnlyComponent, PlayerController, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowOnlyComponent, UnknownData_4LPR, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowOnlyComponent, 0x0108);
		}

		// class USkinAsset : public UDataAsset
		TEST_METHOD(Class__Pavlov__SkinAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinAsset, DefinitionId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinAsset, UnknownData_MG3L, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinAsset, For, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinAsset, bSimplified, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinAsset, UnknownData_K9SI, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinAsset, MaterialOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinAsset, MaterialOverrideIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinAsset, UnknownData_2N51, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinAsset, 0x0058);
		}

		// class USkinFamily : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Pavlov__SkinFamily)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinFamily, 0x0028);
		}

		// class USoldierSkin : public UAvatarSkin
		TEST_METHOD(Class__Pavlov__SoldierSkin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoldierSkin, ArmorMeshComp, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoldierSkin, UnknownData_KFSS, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoldierSkin, bAlwaysOnArmor, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoldierSkin, bCombinedPlayerMeshes, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoldierSkin, UnknownData_VP6D, 0x017B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoldierSkin, Vest, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoldierSkin, Helmet, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoldierSkin, Combined, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoldierSkin, 0x0198);
		}

		// class USoundMixingSettings : public UPavlovObject
		TEST_METHOD(Class__Pavlov__SoundMixingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMixingSettings, SoundMix, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMixingSettings, Channels, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMixingSettings, 0x0060);
		}

		// class USoundNodeOutdoor : public USoundNode
		TEST_METHOD(Class__Pavlov__SoundNodeOutdoor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOutdoor, Alpha, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOutdoor, FadeDuration, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOutdoor, bInvertCondition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOutdoor, UnknownData_T3I7, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOutdoor, 0x0048);
		}

		// class ASpectatorTag : public AActor
		TEST_METHOD(Class__Pavlov__SpectatorTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, Pivot, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, NamePivot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, VerticalLine, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, Widget, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, UnknownData_0L3C, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, bRaised, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, bFadingOut, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, UnknownData_K9HM, 0x0352);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, RaiseTime, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, RaiseDuration, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, RaiseHeight, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, LineGirth, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, UnknownData_EO0A, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, RaiseCurve, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, FadeOutDuration, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, UnknownData_4QPR, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, FadeOutCurve, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTag, RaiseSound, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorTag, 0x0388);
		}

		// class ASpectatorTV : public AActor
		TEST_METHOD(Class__Pavlov__SpectatorTV)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorTV, 0x0328);
		}

		// class ASpectatorTVCamera : public AActor
		TEST_METHOD(Class__Pavlov__SpectatorTVCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTVCamera, UnknownData_6DNA, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTVCamera, SceneCapture, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTVCamera, UnknownData_7X1K, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTVCamera, FocusedPawn, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTVCamera, TeamId, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTVCamera, bTeamOnly, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTVCamera, bAutoCycle, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTVCamera, UnknownData_CQA1, 0x034E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTVCamera, YawExp, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorTVCamera, AutoCycleRate, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorTVCamera, 0x0358);
		}

		// class UStaticModel : public UUIModel
		TEST_METHOD(Class__Pavlov__StaticModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticModel, SettingsTab, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticModel, UnknownData_V535, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticModel, OfflineActivity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticModel, bOfflineBots, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticModel, UnknownData_8KOL, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticModel, OfflineMap, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticModel, TrainingCourse, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticModel, 0x0080);
		}

		// class UStatsManager : public UActorComponent
		TEST_METHOD(Class__Pavlov__StatsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsManager, KValue, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsManager, UnknownData_Y1HX, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsManager, PlayerStats, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsManager, bHasPosted, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsManager, UnknownData_IPY1, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatsManager, ExperienceMultiplier, 0x014C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatsManager, 0x0150);
		}

		// class UStencilSuppressionComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Pavlov__StencilSuppressionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStencilSuppressionComponent, FlashMaterial, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStencilSuppressionComponent, bMenuOpen, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStencilSuppressionComponent, UnknownData_QRN2, 0x05F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStencilSuppressionComponent, 0x0600);
		}

		// class AStereoMessage : public AStereoOverlay
		TEST_METHOD(Class__Pavlov__StereoMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStereoMessage, Message, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStereoMessage, 0x0360);
		}

		// class AStripperClipCosmetic : public AVRStripperClipCosmetic
		TEST_METHOD(Class__Pavlov__StripperClipCosmetic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStripperClipCosmetic, UnknownData_S3ZZ, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStripperClipCosmetic, SurfaceFX, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStripperClipCosmetic, 0x0348);
		}

		// class USurfaceFXAsset : public UDataAsset
		TEST_METHOD(Class__Pavlov__SurfaceFXAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, DefaultSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, ConcreteSound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, MetalSound, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, CarpetSound, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, FabricSound, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, WoodSound, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, GlassSound, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, WaterSound, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, DirtSound, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, MudSound, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, SnowSound, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, VehicleSound, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, WorldFleshSound, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, DefaultParticle, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, ConcreteParticle, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, MetalParticle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, CarpetParticle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, FabricParticle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, WoodParticle, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, GlassParticle, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, WaterParticle, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, DirtParticle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, MudParticle, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, SnowParticle, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, VehicleParticle, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, WorldFleshParticle, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, DefaultParticleLowQuality, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, ConcreteParticleLowQuality, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, MetalParticleLowQuality, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, CarpetParticleLowQuality, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, FabricParticleLowQuality, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, WoodParticleLowQuality, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, GlassParticleLowQuality, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, WaterParticleLowQuality, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, DirtParticleLowQuality, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, MudParticleLowQuality, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, SnowParticleLowQuality, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, VehicleParticleLowQuality, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurfaceFXAsset, WorldFleshParticleLowQuality, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurfaceFXAsset, 0x0168);
		}

		// class USurfaceFXInterface : public UInterface
		TEST_METHOD(Class__Pavlov__SurfaceFXInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurfaceFXInterface, 0x0028);
		}

		// class UTankInteriorAnimInstance : public UAnimInstance
		TEST_METHOD(Class__Pavlov__TankInteriorAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankInteriorAnimInstance, UnknownData_X32E, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankInteriorAnimInstance, LeftLeverRotation, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankInteriorAnimInstance, RightLeverRotation, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankInteriorAnimInstance, EngineRPMs, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankInteriorAnimInstance, KMPH, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankInteriorAnimInstance, UnknownData_KFNV, 0x037C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTankInteriorAnimInstance, 0x0380);
		}

		// class UTankVehicleMovement : public UWheeledVehicleMovementComponent4W
		TEST_METHOD(Class__Pavlov__TankVehicleMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankVehicleMovement, bUseSteeringWheel, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankVehicleMovement, UnknownData_TL65, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankVehicleMovement, TankThrottleInput, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankVehicleMovement, TankLeftTrustInput, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankVehicleMovement, TankRightTrustInput, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankVehicleMovement, LastLeftThrustInput, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankVehicleMovement, LastRightThrustInput, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankVehicleMovement, LastThrottleInput, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTankVehicleMovement, LastBumperPushTime, 0x0444);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTankVehicleMovement, 0x0448);
		}

		// class UTextureWidgetComponent : public UWidgetComponent
		TEST_METHOD(Class__Pavlov__TextureWidgetComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureWidgetComponent, 0x06A0);
		}

		// class AToolTip : public AActor
		TEST_METHOD(Class__Pavlov__ToolTip)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, Context, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, ContextLocation, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, State, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, bCompleted, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, UnknownData_M87Y, 0x033E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, Timer, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, UnknownData_RYKU, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, ID, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, bInsist, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, UnknownData_W8C5, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, TransitionDuration, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, ShowSound, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, TerminateSound, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, TerminateCompletedSound, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, bAutoAttach, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, UnknownData_OPUS, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AToolTip, SelfDestroyDuration, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AToolTip, 0x0378);
		}

		// class UTrailComponent : public UCustomMeshComponent
		TEST_METHOD(Class__Pavlov__TrailComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailComponent, UnknownData_G2FJ, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailComponent, PointLifeSpan, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailComponent, PointRate, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailComponent, PointDistance, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailComponent, TrailGirth, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailComponent, bStopped, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailComponent, UnknownData_M5ZR, 0x05C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrailComponent, 0x05D0);
		}

		// class ATrainingView : public AContentView
		TEST_METHOD(Class__Pavlov__TrainingView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingView, StaticModel, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrainingView, 0x0490);
		}

		// class UTTTGameInfo : public UActorComponent
		TEST_METHOD(Class__Pavlov__TTTGameInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTTTGameInfo, 0x00F0);
		}

		// class UTutorial : public UObject
		TEST_METHOD(Class__Pavlov__Tutorial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorial, ToolTipsCompleted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorial, UnknownData_BPTK, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorial, Instance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorial, ToolTipLibrary, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorial, 0x00E8);
		}

		// class UTwoHandGripComponent : public UBoxComponent
		TEST_METHOD(Class__Pavlov__TwoHandGripComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwoHandGripComponent, UnknownData_7DY2, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwoHandGripComponent, 0x0590);
		}

		// class UUIHapticLibrary : public UDataAsset
		TEST_METHOD(Class__Pavlov__UIHapticLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIHapticLibrary, HapticEffects, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUIHapticLibrary, 0x0040);
		}

		// class UUIManager : public UObject
		TEST_METHOD(Class__Pavlov__UIManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, ModalInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, UnknownData_8GHE, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, MenuUniverseClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, MatchmakingView, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, FriendGamesView, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, UnknownData_G8SJ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, MatchmakingViewClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, FriendGamesViewClass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, Models, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, VotePromptModal, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, PinPromptModal, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, ConnectSpinnerModal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, Interface, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, UnknownData_2C3Z, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, SideInterfaceMap, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, UnknownData_5YP1, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, ConnectingTo, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, OnUserInterfaceChanged, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, OnSideUserInterfaceChanged, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, bMenuUniverseEnabled, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, bShowMOTD, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIManager, UnknownData_4KP6, 0x017A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUIManager, 0x0180);
		}

		// class UUISoundLibrary : public UDataAsset
		TEST_METHOD(Class__Pavlov__UISoundLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUISoundLibrary, Namespace, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUISoundLibrary, Definitions, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUISoundLibrary, 0x0090);
		}

		// class UVehicleBumper : public UBoxComponent
		TEST_METHOD(Class__Pavlov__VehicleBumper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleBumper, KillVelocity, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleBumper, DamageVelocity, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleBumper, PushVelocity, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleBumper, MinorHitDamageAmount, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleBumper, LaunchMultiplier, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleBumper, MaxZLaunch, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleBumper, MaxLaunchForce, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleBumper, bFrontBumper, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleBumper, bTruckBed, 0x059D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleBumper, UnknownData_1LS3, 0x059E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleBumper, RunoverDamageClass, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleBumper, UnknownData_4G7K, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleBumper, 0x05B0);
		}

		// class AVehicleInterior : public AActor
		TEST_METHOD(Class__Pavlov__VehicleInterior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleInterior, AttachSocket, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleInterior, SceneCapture, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleInterior, bCaptureScene, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleInterior, UnknownData_IPEY, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleInterior, CaptureSocket, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleInterior, CaptureTarget, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleInterior, FOVMinMax, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleInterior, FOVZoomRate, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleInterior, UnknownData_NQYE, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVehicleInterior, 0x0360);
		}

		// class UVehicleOccupant : public UActorComponent
		TEST_METHOD(Class__Pavlov__VehicleOccupant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant, UnknownData_0E73, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant, bIgnoreSeatRot, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant, UnknownData_TJYI, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant, SeatRotationMax, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant, bHideVehicle, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant, bHidePawn, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant, bHideInventory, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant, bCanBeDamagedInSeat, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant, bCanPullPin, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant, UnknownData_4WVB, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant, VehicleInterior, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant, bUseInVehicleSoundMix, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant, UnknownData_VDTK, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant, Vehicle, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleOccupant, 0x0118);
		}

		// class UVehicleOccupant_Prototyping : public UVehicleOccupant
		TEST_METHOD(Class__Pavlov__VehicleOccupant_Prototyping)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleOccupant_Prototyping, 0x0118);
		}

		// class UVehicleOccupant_Tank_Driver : public UVehicleOccupant
		TEST_METHOD(Class__Pavlov__VehicleOccupant_Tank_Driver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Driver, bBindTriggerInput, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Driver, UnknownData_WHGD, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Driver, LeftLever, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Driver, RightLever, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Driver, ThrottleInput, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleOccupant_Tank_Driver, 0x0128);
		}

		// class UVehicleOccupant_Tank_Gunner : public UVehicleOccupant
		TEST_METHOD(Class__Pavlov__VehicleOccupant_Tank_Gunner)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleOccupant_Tank_Gunner, 0x0118);
		}

		// class UVehicleOccupant_Tank_Turret : public UVehicleOccupant
		TEST_METHOD(Class__Pavlov__VehicleOccupant_Tank_Turret)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Turret, OnTriggerDown, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Turret, bUseAdvancedInput, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Turret, UnknownData_D1SN, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Turret, YawHapticThreshold, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Turret, PitchHapticThreshold, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Turret, UnknownData_83UL, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Turret, YawHapticsEffect, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Turret, PitchHapticsEffect, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Turret, InputTurretRotation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Turret, LastSentInput, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Turret, LastScopeFOVAlpha, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Turret, YawInputHaptics, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Turret, PitchInputHaptics, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleOccupant_Tank_Turret, UnknownData_PK68, 0x0164);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleOccupant_Tank_Turret, 0x0168);
		}

		// class UVehicleSeat : public USceneComponent
		TEST_METHOD(Class__Pavlov__VehicleSeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleSeat, UnknownData_78TU, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleSeat, CameraOffset, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleSeat, SeatBounds, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleSeat, MaxZDistance, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleSeat, ThirdPersonSeatOffset, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleSeat, PelvisOffset, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleSeat, SeatAnim, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleSeat, 0x0270);
		}

		// class AVehicleSpawner : public AActor
		TEST_METHOD(Class__Pavlov__VehicleSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawner, SpawnMarker, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawner, ArrowComp, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawner, VehicleSpawnList, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawner, VehicleRespawnTime, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawner, InitialRespawnTime, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawner, VehicleTeamID, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawner, VehicleDespawnTime, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawner, bOnlySpawnInPush, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawner, UnknownData_QPJL, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawner, ObjectiveId, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawner, SpawnVehicle_Handle, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVehicleSpawner, LastSpawnedVehicle, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVehicleSpawner, 0x0370);
		}

		// class UVoiceComponent : public USceneComponent
		TEST_METHOD(Class__Pavlov__VoiceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceComponent, AudioComp, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceComponent, Sound, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceComponent, UnknownData_8PSH, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceComponent, bTalking, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceComponent, UnknownData_EI90, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceComponent, IdleTime, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceComponent, Volume, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceComponent, UnknownData_OYVA, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceComponent, Attenuation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceComponent, PreEffectBusSends, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceComponent, SourceEffectChain, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceComponent, SoundClass, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceComponent, UnknownData_GSTR, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceComponent, 0x0290);
		}

		// class ARocket : public ABullet
		TEST_METHOD(Class__Pavlov__Rocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARocket, bDebugRocket, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARocket, bIsTankRound, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARocket, UnknownData_1YRW, 0x054A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARocket, MinDamage, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARocket, DamageInnerRadius, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARocket, DamageOuterRadius, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARocket, DamageFalloff, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARocket, UnknownData_04CW, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARocket, SmokeTrailFX, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARocket, SmokeTrailFXLQ, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARocket, SmokeTrail, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARocket, bIsLocalCopy, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARocket, UnknownData_IB8N, 0x0579);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARocket, 0x0580);
		}

		// class URotationHandle : public UVRHandleComponent
		TEST_METHOD(Class__Pavlov__RotationHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationHandle, bTopDownRotation, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationHandle, UnknownData_DS4I, 0x06D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationHandle, CenterSocket, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationHandle, HandleOffsetType, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationHandle, UnknownData_BDB6, 0x06E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationHandle, StartingAngle, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationHandle, OnHandleRotation, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotationHandle, UnknownData_YBSF, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotationHandle, 0x0700);
		}

		// class AScoreboard : public AHandMenu
		TEST_METHOD(Class__Pavlov__Scoreboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, PlaneMesh, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, CohtmlComponent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, UnknownData_PTXH, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, Team0Slots, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, Team1Slots, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, MaxPlayers, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, Team0Score, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, Team1Score, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, RoundsLeft, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, GameModeType, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, UnknownData_GJ6J, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, AttackingTeam, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, LocalTeam, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, VerticalSlots, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, bNoTeams, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, UnknownData_4IUW, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, RoundTime, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, RoundDuration, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreboard, UnknownData_3F8G, 0x03A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScoreboard, 0x03A8);
		}

		// class UServerBrowser : public UObject
		TEST_METHOD(Class__Pavlov__ServerBrowser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, bUseNewPingMethod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, UnknownData_B9T6, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, bUpdating, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, bNotFull, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, bNotEmpty, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, bNoPassword, 0x0083);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, UnknownData_GGY1, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, GMFilter, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, ServerList, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowser, OnUpdate, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerBrowser, 0x00B8);
		}

		// class UServerBrowserModel : public UUIModel
		TEST_METHOD(Class__Pavlov__ServerBrowserModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserModel, bBusy, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserModel, UnknownData_HVTM, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserModel, ActiveEntryId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserModel, SortType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserModel, Scroll, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserModel, NeedlePosition, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserModel, Entries, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerBrowserModel, 0x0080);
		}

		// class UServerBrowserV2 : public UObject
		TEST_METHOD(Class__Pavlov__ServerBrowserV2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, OnBrowserUpdated, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, bUpdating, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, ServerSearchType, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, bHideFull, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, bHideEmpty, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, bHidePasswordProtected, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, bUpdateFavoritesOnly, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, UnknownData_CAQ3, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, RegionFilters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, GMFilters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, ServerSortType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, UnknownData_CR9Z, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, ServerList, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, FavoriteServers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, UpdateCount, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, UnknownData_X6OE, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, CommunityServerPingList, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, LobbyServerPingList, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, PingHelper, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBrowserV2, LastUpdateTime, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerBrowserV2, 0x0140);
		}

		// class UServerConnector : public UPavlovObject
		TEST_METHOD(Class__Pavlov__ServerConnector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerConnector, UnknownData_0ARJ, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerConnector, StatusHelper, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerConnector, UnknownData_5FT6, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerConnector, FailureReason, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerConnector, UnknownData_WCRR, 0x00AE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerConnector, 0x00D8);
		}

		// class UServerContainer : public UObject
		TEST_METHOD(Class__Pavlov__ServerContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerContainer, OnPingUpdated, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerContainer, ServerContainerInfo, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerContainer, bOfflineContainer, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerContainer, UnknownData_VWA3, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerContainer, LastPingAlpha, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerContainer, LastUpdateAlpha, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerContainer, UnknownData_3OL4, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerContainer, 0x0138);
		}

		// class UServerStatusHelper : public UObject
		TEST_METHOD(Class__Pavlov__ServerStatusHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatusHelper, OnRecServerResponse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatusHelper, OnServerResponseTimeout, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatusHelper, bClient, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatusHelper, UnknownData_SKDY, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatusHelper, GameInstance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatusHelper, ResponseTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatusHelper, bClientRecievedResponse, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatusHelper, UnknownData_H0X2, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatusHelper, AutoCloseHandle, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerStatusHelper, 0x0080);
		}

		// class ASettingsView : public AContentView
		TEST_METHOD(Class__Pavlov__SettingsView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASettingsView, StaticModel, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASettingsView, UnknownData_ETBM, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASettingsView, 0x04C8);
		}

		// class AShell : public AActor
		TEST_METHOD(Class__Pavlov__Shell)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AShell, SurfaceFX, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShell, 0x0330);
		}

		// class AVoiceManager : public AActor
		TEST_METHOD(Class__Pavlov__VoiceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVoiceManager, VoicePackets, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVoiceManager, 0x0378);
		}

		// class UVoiceModerationInstance : public UPavlovObject
		TEST_METHOD(Class__Pavlov__VoiceModerationInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceModerationInstance, UnknownData_WXYH, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceModerationInstance, 0x0088);
		}

		// class AVoiceRouter : public AActor
		TEST_METHOD(Class__Pavlov__VoiceRouter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVoiceRouter, UnknownData_OGV3, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVoiceRouter, bAllMuted, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVoiceRouter, UnknownData_AE0S, 0x034D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVoiceRouter, 0x0350);
		}

		// class UVoiceSource : public UPavlovObject
		TEST_METHOD(Class__Pavlov__VoiceSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceSource, UnknownData_RHWY, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceSource, 0x00F0);
		}

		// class AVote : public AStereoOverlay
		TEST_METHOD(Class__Pavlov__Vote)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, UnknownData_LGU4, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, YesVotes, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, NoVotes, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, TimeLeft, 0x03A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, State, 0x03A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, CensusNum, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, UnknownData_NP8I, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, TeamId, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, UnknownData_UIM3, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, VoteInstigatorName, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, VoteInstigator, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, Param1, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, Param2, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, VoteTimer, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, Percentage, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, bTeamVote, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, UnknownData_0B62, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, VoteDuration, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, Cooldown, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, GraceDuration, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, bIgnoreModerators, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, UnknownData_3ZHA, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AVote, OnVoteEnd, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVote, 0x0410);
		}

		// class UWatch : public UTextureWidgetComponent
		TEST_METHOD(Class__Pavlov__Watch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWatch, UnknownData_RQIG, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWatch, Health, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWatch, Armor, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWatch, bHasHelmet, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWatch, UnknownData_B7S9, 0x06BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWatch, VictimAvatar, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWatch, KillConfirmationOpacity, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWatch, KillConfirmationDuration, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWatch, KillConfirmationFadeSpeed, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWatch, UnknownData_EAGJ, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWatch, KillConfirmationSound, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWatch, KillConfirmationFailoverAvatar, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWatch, UnknownData_QR6I, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWatch, 0x06F0);
		}

		// class AWaypoint : public AActor
		TEST_METHOD(Class__Pavlov__Waypoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypoint, WaypointInfos, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypoint, UnknownData_FS7I, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypoint, NextA, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaypoint, NextB, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWaypoint, 0x0350);
		}

		// class UWeaponFilterData : public UDataAsset
		TEST_METHOD(Class__Pavlov__WeaponFilterData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponFilterData, RiflesOnlyClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponFilterData, PistolsOnlyClasses, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponFilterData, GrenadesOnlyClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponFilterData, KnivesOnlyClass, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponFilterData, 0x0060);
		}

		// class UWebleyGunState : public URevolverGunState
		TEST_METHOD(Class__Pavlov__WebleyGunState)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebleyGunState, 0x0180);
		}

		// class UWorkshop : public UObject
		TEST_METHOD(Class__Pavlov__Workshop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, UnknownData_1BKJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, MapPreviews, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, UnknownData_89YG, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, bQueryingCustomMaps, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, UnknownData_ONG1, 0x03A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, CustomMaps, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, bSteamServerConnected, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, UnknownData_PYLV, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, Instance, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, UnknownData_PWMT, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, OnCustomMapDownloadCompleted, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, OnSpecificCustomMapQueryCompleted, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, OnCustomMapQueryCompleted, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, OnSubscriptionChanged, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, OnDownloadBegin, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, OnDownloadProgress, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, OnPreviewLoaded, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, OnRequestUserVote, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkshop, UnknownData_M0L7, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorkshop, 0x04A0);
		}

		// class AWoundAux : public AActor
		TEST_METHOD(Class__Pavlov__WoundAux)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoundAux, WoundInfo, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoundAux, PreBakedName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoundAux, PreBakedData, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWoundAux, WoundComponent, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoundAux, 0x03B8);
		}

		// class UWoundComponent : public UActorComponent
		TEST_METHOD(Class__Pavlov__WoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, GoreMeshComp, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, SkullMeshComp, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, WoundAuxs, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, BoneStates, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, MaterialType, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, UnknownData_N7EJ, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, MinorWounds, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, MajorWounds, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, MasterPoseComponent, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, Instances, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, MinorHitCount, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, MaxMinorHits, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, MinorWoundScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, MajorHitCount, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, MaxMajorHits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, bAllowMajorHitRecycle, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, bAllowDynamicLookup, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, UnknownData_ZDDZ, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, MaterialMap, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, BloodPuddleClass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, PreBakedWounds, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, HeadBoneName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, GoreMesh, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, DismemberSound, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, DismemberParticle, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, MemberFXSetup, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, OnDismember, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWoundComponent, OnMaterialCreated, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWoundComponent, 0x02E8);
		}

		// class AZombie : public AZAICharacter
		TEST_METHOD(Class__Pavlov__Zombie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, WoundComponent, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, UnknownData_GFDR, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, Health, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, UnknownData_2FGF, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, LastHitInfo, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, BalanceTable, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, MaxHealth, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, UnknownData_RTJP, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, HitSound, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, HitSoundShooter, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, HitEffect, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, HeadshotSound, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, HeadshotSound2D, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, ThirdPersonKnockBackSound, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, HeadshotParticle, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, SprintFootStepFX, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, JockeyFootStepFX, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, WalkFootStepFX, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, LandedFX, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZombie, WoundClass, 0x0928);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZombie, 0x0930);
		}

		// class AZombieAIController : public AAIController
		TEST_METHOD(Class__Pavlov__ZombieAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZombieAIController, 0x0438);
		}

		// class UZombieAnimInstance : public UAnimInstance
		TEST_METHOD(Class__Pavlov__ZombieAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieAnimInstance, UnknownData_UWG9, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZombieAnimInstance, 0x0360);
		}

		// class UZombieSkeletalMeshComponent : public USkeletalMeshComponent
		TEST_METHOD(Class__Pavlov__ZombieSkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieSkeletalMeshComponent, UnknownData_99VZ, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZombieSkeletalMeshComponent, UnknownData_9G4U, 0x0B30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZombieSkeletalMeshComponent, 0x0B60);
		}

		// class USoundSimple : public USoundBase
		TEST_METHOD(Class__SoundUtilities__SoundSimple)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSimple, Variations, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSimple, SoundWave, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSimple, 0x00C0);
		}

		// class USoundUtilitiesBPFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SoundUtilities__SoundUtilitiesBPFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundUtilitiesBPFunctionLibrary, 0x0028);
		}

		// class UForceTubeVRFunctions : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ForceTubeVRForUE4__ForceTubeVRFunctions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceTubeVRFunctions, 0x0028);
		}

		// class APlayerControllerCppExample : public APlayerController
		TEST_METHOD(Class__ForceTubeVRForUE4__PlayerControllerCppExample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerControllerCppExample, UnknownData_A3X5, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerControllerCppExample, 0x06A8);
		}

		// class UOverlays : public UObject
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0028);
		}

		// class UBasicOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0038);
		}

		// class ULocalizedOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0080);
		}

		// class UHeroSkin_Hidden_C : public UAvatarSkin
		TEST_METHOD(BlueprintGeneratedClass__HeroSkin_Hidden__HeroSkin_Hidden_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeroSkin_Hidden_C, 0x0170);
		}

		// class USoldierSkin_Police_C : public USoldierSkin
		TEST_METHOD(BlueprintGeneratedClass__SoldierSkin_Police__SoldierSkin_Police_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoldierSkin_Police_C, 0x0198);
		}

		// class ABP_FlyingHelmet_Police_C : public ABP_FlyingHelmet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlyingHelmet_Police__BP_FlyingHelmet_Police_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FlyingHelmet_Police_C, 0x0348);
		}

		// class UHeroSkin_Infinitum_C : public UAvatarSkin
		TEST_METHOD(BlueprintGeneratedClass__HeroSkin_Infinitum__HeroSkin_Infinitum_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeroSkin_Infinitum_C, 0x0170);
		}

		// class ABP_FlyingHelmet_US_C : public ABP_FlyingHelmet_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlyingHelmet_US__BP_FlyingHelmet_US_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FlyingHelmet_US_C, 0x0348);
		}

		// class UHandlerComponentFactory : public UObject
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0028);
		}

		// class UNetAnalyticsAggregatorConfig : public UObject
		TEST_METHOD(Class__PacketHandler__NetAnalyticsAggregatorConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetAnalyticsAggregatorConfig, NetAnalyticsData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetAnalyticsAggregatorConfig, 0x0038);
		}

		// class ASkullWound_Jaw_C : public ASkullWound_Base_C
		TEST_METHOD(BlueprintGeneratedClass__SkullWound_Jaw__SkullWound_Jaw_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkullWound_Jaw_C, 0x03C8);
		}

		// class ABP_FlyingHelmet_C : public AFlyingHelmet
		TEST_METHOD(BlueprintGeneratedClass__BP_FlyingHelmet__BP_FlyingHelmet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FlyingHelmet_C, 0x0348);
		}

		// class UWoundComponent_Base_C : public UWoundComponent
		TEST_METHOD(BlueprintGeneratedClass__WoundComponent_Base__WoundComponent_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWoundComponent_Base_C, 0x02E8);
		}

		// struct FVTriangleBSP
		TEST_METHOD(ScriptStruct__Vankrupt__VTriangleBSP)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVTriangleBSP, V0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVTriangleBSP, v1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVTriangleBSP, v2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVTriangleBSP, 0x0024);
		}

		// struct FVGlobalStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Vankrupt__VGlobalStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVGlobalStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVGlobalStyle, ButtonHoverEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVGlobalStyle, ButtonStyle, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVGlobalStyle, ButtonTextStyle, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVGlobalStyle, PopupTextStyle, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVGlobalStyle, PopupBorderBrush, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVGlobalStyle, SpinnerBrush, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVGlobalStyle, 0x0670);
		}

		// struct FVHitboxInfo : public FTableRowBase
		TEST_METHOD(ScriptStruct__Vankrupt__VHitboxInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVHitboxInfo, bProcessArmor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVHitboxInfo, UnknownData_DVWI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVHitboxInfo, Multiplier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVHitboxInfo, Effect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVHitboxInfo, UnknownData_EOPS, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVHitboxInfo, HitSound, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVHitboxInfo, 0x0040);
		}

		// struct FVKillData
		TEST_METHOD(ScriptStruct__Vankrupt__VKillData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVKillData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVKillData, Impulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVKillData, BoneName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVKillData, Component, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVKillData, 0x0028);
		}

		// struct FVLobbySettings
		TEST_METHOD(ScriptStruct__Vankrupt__VLobbySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbySettings, Options, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbySettings, bFriendsOnly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbySettings, UnknownData_EVLP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbySettings, MapIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVLobbySettings, 0x0010);
		}

		// struct FVLobbyStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Vankrupt__VLobbyStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbyStyle, Background, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbyStyle, TitleTextStyle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbyStyle, TextStyle, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbyStyle, InfoTextStyle, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbyStyle, ButtonTextStyle, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbyStyle, ButtonSmallTextStyle, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbyStyle, ButtonStyle, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbyStyle, SlotBrush, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbyStyle, SlotAvatarBrush, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbyStyle, MapOverlayBrush, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVLobbyStyle, ComboBoxStyle, 0x0C28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVLobbyStyle, 0x1000);
		}

		// struct FVSpawnPointDistance
		TEST_METHOD(ScriptStruct__Vankrupt__VSpawnPointDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVSpawnPointDistance, UnknownData_89MO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVSpawnPointDistance, 0x0008);
		}

		// struct FVSpawnParams
		TEST_METHOD(ScriptStruct__Vankrupt__VSpawnParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVSpawnParams, bWithAIController, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVSpawnParams, bOccluded, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVSpawnParams, bClossest, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVSpawnParams, 0x0003);
		}

		// struct FVNewsArticle
		TEST_METHOD(ScriptStruct__Vankrupt__VNewsArticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVNewsArticle, Title, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVNewsArticle, Date, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVNewsArticle, Body, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVNewsArticle, 0x0030);
		}

		// struct FCohtmlSound
		TEST_METHOD(ScriptStruct__CohtmlPlugin__CohtmlSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCohtmlSound, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCohtmlSound, Stream, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCohtmlSound, UnknownData_DO42, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCohtmlSound, 0x0018);
		}

		// struct FSingleFormatFallbacks
		TEST_METHOD(ScriptStruct__CohtmlPlugin__SingleFormatFallbacks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleFormatFallbacks, BaseFormat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleFormatFallbacks, UnknownData_WR3M, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleFormatFallbacks, PossibleFallbacks, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleFormatFallbacks, 0x0018);
		}

		// struct FTextureAtlasMetaData
		TEST_METHOD(ScriptStruct__CohtmlPlugin__TextureAtlasMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureAtlasMetaData, AtlasContainedTextures, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureAtlasMetaData, AtlasDetails, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureAtlasMetaData, UnknownData_0FYE, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureAtlasMetaData, 0x0100);
		}

		// struct FTextureAtlasMappingInfo
		TEST_METHOD(ScriptStruct__CohtmlPlugin__TextureAtlasMappingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureAtlasMappingInfo, AtlasPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureAtlasMappingInfo, Width, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureAtlasMappingInfo, Height, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureAtlasMappingInfo, OriginX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureAtlasMappingInfo, OriginY, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureAtlasMappingInfo, 0x0020);
		}

		// struct FCohtmlViewSettings
		TEST_METHOD(ScriptStruct__CohtmlPlugin__CohtmlViewSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCohtmlViewSettings, Width, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCohtmlViewSettings, Height, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCohtmlViewSettings, IsTransparent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCohtmlViewSettings, UnknownData_KL6V, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCohtmlViewSettings, AnimationFrameDefer, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCohtmlViewSettings, 0x0010);
		}

		// struct FMovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// struct FMovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_UXKP, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_FI47, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutDuration, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// struct FMovieSceneFrameRange
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFrameRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFrameRange, UnknownData_X38B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFrameRange, 0x0010);
		}

		// struct FOptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// struct FMovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_YQYX, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// struct FMovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// struct FMovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_UXMX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0058);
		}

		// struct FSectionEvaluationDataTree
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationDataTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationDataTree, UnknownData_6439, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationDataTree, 0x0060);
		}

		// struct FMovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_70M0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0038);
		}

		// struct FMovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_8XLL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// struct FMovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, LUTOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x000C);
		}

		// struct FMovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// struct FMovieSceneSequenceInstanceDataPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceDataPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceDataPtr, UnknownData_2J8K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceDataPtr, 0x0018);
		}

		// struct FMovieSceneEvaluationTemplateSerialNumber
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplateSerialNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplateSerialNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplateSerialNumber, 0x0004);
		}

		// struct FMovieSceneTrackFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackFieldData, UnknownData_QHO1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackFieldData, 0x0060);
		}

		// struct FMovieSceneSubSectionFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionFieldData, UnknownData_EMP6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionFieldData, 0x0060);
		}

		// struct FMovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_5NOM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, SubSectionRanges, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// struct FMovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_C9HF, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// struct FMovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x000C);
		}

		// struct FMovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, TickResolution, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PlayRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_6VF9, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, InstanceData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_0W9P, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SubSectionSignature, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, OuterToInnerTransform, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_6TP2, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x00A8);
		}

		// struct FMovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x00A0);
		}

		// struct FMovieSceneEvaluationTrackSegments
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrackSegments)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SegmentIdentifierToIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SortedSegments, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrackSegments, 0x0020);
		}

		// struct FMovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_YHB0, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, Segments, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, SourceTrack, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationTree, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_J394, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x00F8);
		}

		// struct FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// struct FMovieSceneSegmentIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegmentIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegmentIdentifier, IdentifierIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegmentIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// struct FMovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SegmentPtrLUT, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0020);
		}

		// struct FMovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// struct FMovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, EvaluationIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// struct FMovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, SubTemplateSerialNumbers, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0070);
		}

		// struct FMovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// struct FMovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_GK5E, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, EvaluationField, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Hierarchy, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SequenceSignature, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateSerialNumber, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_575Y, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TrackFieldData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SubSectionFieldData, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x02F0);
		}

		// struct FMovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, PlayRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bRandomStartTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_NC5R, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, StartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bRestoreState, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bDisableMovementInput, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bDisableLookAtInput, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bHidePlayer, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bHideHud, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bDisableCameraCuts, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bPauseAtEnd, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_QT1C, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, InstanceData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, BindingOverrides, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_ZGRM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0040);
		}

		// struct FMovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_5SZ7, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// struct FMovieSceneRootEvaluationTemplateInstance
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneRootEvaluationTemplateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_W26D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, DirectorInstances, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_H5Q9, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneRootEvaluationTemplateInstance, 0x0300);
		}

		// struct FMovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// struct FMovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0048);
		}

		// struct FMovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, SpawnTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Tags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_MQ5H, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, LevelName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_J3IN, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0090);
		}

		// struct FMovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_JO4V, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// struct FMovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartFrameOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PrerollTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostrollTime, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0018);
		}

		// struct FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_E0U9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_5ZAI, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSection, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// struct FMovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// struct FMovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewStart, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkStart, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, MarkedFrames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x00E0);
		}

		// struct FMovieSceneTimecodeSource
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimecodeSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, DeltaFrame, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimecodeSource, 0x0018);
		}

		// struct FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneChannel, UnknownData_45Z7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneChannel, 0x0008);
		}

		// struct FMovieSceneBoolChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBoolChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_GEHN, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_U7GI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolChannel, 0x0090);
		}

		// struct FMovieSceneByteChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneByteChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_SKVJ, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_2J2J, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneByteChannel, 0x0098);
		}

		// struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyHandleMap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyHandleMap, 0x0060);
		}

		// struct FMovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_LJLQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// struct FMovieSceneEvaluationOperand
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationOperand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, SequenceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationOperand, 0x0014);
		}

		// struct FMovieSceneSubSectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, ObjectBindingId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Flags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, UnknownData_3QFI, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionData, 0x001C);
		}

		// struct FMovieSceneTangentData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTangentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, TangentWeightMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, UnknownData_M2Z4, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangentWeight, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentData, 0x0014);
		}

		// struct FMovieSceneFloatValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, InterpMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, TangentMode, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, UnknownData_JAWI, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Tangent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValue, 0x001C);
		}

		// struct FMovieSceneFloatChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PreInfinityExtrap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PostInfinityExtrap, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_EWYO, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, bHasDefaultValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_UTMK, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, KeyHandles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, TickResolution, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannel, 0x00A0);
		}

		// struct FMovieSceneIntegerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneIntegerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, bHasDefaultValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_5XWX, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_IIMH, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerChannel, 0x0090);
		}

		// struct FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_82HB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyTimeStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, UnknownData_T29S, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyTimeStruct, 0x0028);
		}

		// struct FMovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, NotifyFunctionName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0028);
		}

		// struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0048);
		}

		// struct FSectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_JCAN, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// struct FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceData, UnknownData_4ZY6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceData, 0x0008);
		}

		// struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__TestMovieSceneEvalTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// struct FMaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDiscardQualityDuringCook, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDisableMaterialNormalCalculation, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileCSMQuality, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0008);
		}

		// struct FGameplayResourceSet
		TEST_METHOD(ScriptStruct__GameplayTasks__GameplayResourceSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayResourceSet, UnknownData_N0TK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayResourceSet, 0x0002);
		}

		// struct FNamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// struct FNamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// struct FInAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_5R96, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// struct FInAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// struct FInAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_PXIO, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// struct FAIDamageResult
		TEST_METHOD(ScriptStruct__Z__AIDamageResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageResult, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageResult, WorldLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageResult, HitLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageResult, UnknownData_X7YD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageResult, Instigator, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageResult, 0x0028);
		}

		// struct FNeighborGroup
		TEST_METHOD(ScriptStruct__Z__NeighborGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNeighborGroup, UnknownData_W90E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNeighborGroup, 0x0018);
		}

		// struct FFlockingWeight
		TEST_METHOD(ScriptStruct__Z__FlockingWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlockingWeight, AlignmentWeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlockingWeight, CohesionWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFlockingWeight, SeparationWeight, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFlockingWeight, 0x000C);
		}

		// struct FMovementDirection
		TEST_METHOD(ScriptStruct__Z__MovementDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovementDirection, ForwardMovement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovementDirection, RightMovement, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementDirection, 0x0008);
		}

		// struct FZProperties
		TEST_METHOD(ScriptStruct__Z__ZProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZProperties, KnockBackMontages, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZProperties, KnockLeftMontage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZProperties, KnockRightMontage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZProperties, WallSlamMontages, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZProperties, DeathSound, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZProperties, 0x0038);
		}

		// struct FMovementTraceSettings
		TEST_METHOD(ScriptStruct__Z__MovementTraceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovementTraceSettings, InnerAngle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovementTraceSettings, InnerLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovementTraceSettings, OuterAngle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovementTraceSettings, OuterLength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovementTraceSettings, ForwardLength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovementTraceSettings, VectorOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementTraceSettings, 0x0020);
		}

		// struct FAutoSpawnProperties
		TEST_METHOD(ScriptStruct__Z__AutoSpawnProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoSpawnProperties, BatchTimeMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoSpawnProperties, BatchTimeMax, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoSpawnProperties, ZBatchSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoSpawnProperties, MaxZCount, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoSpawnProperties, 0x0010);
		}

		// struct FLootCrateInfo : public FTableRowBase
		TEST_METHOD(ScriptStruct__Z__LootCrateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootCrateInfo, LootCrateClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLootCrateInfo, 0x0010);
		}

		// struct FSteamVRAction
		TEST_METHOD(ScriptStruct__SteamVRInputDevice__SteamVRAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRAction, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRAction, Path, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRAction, UnknownData_9L3U, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamVRAction, 0x0028);
		}

		// struct FSteamVRActionSet
		TEST_METHOD(ScriptStruct__SteamVRInputDevice__SteamVRActionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRActionSet, Path, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRActionSet, UnknownData_R3WZ, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamVRActionSet, 0x0018);
		}

		// struct FSteamVRInputOriginInfo
		TEST_METHOD(ScriptStruct__SteamVRInputDevice__SteamVRInputOriginInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRInputOriginInfo, TrackedDeviceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRInputOriginInfo, UnknownData_WP5V, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRInputOriginInfo, RenderModelComponentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRInputOriginInfo, TrackedDeviceModel, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamVRInputOriginInfo, 0x0028);
		}

		// struct FSteamVRInputBindingInfo
		TEST_METHOD(ScriptStruct__SteamVRInputDevice__SteamVRInputBindingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRInputBindingInfo, DevicePathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRInputBindingInfo, InputPathName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRInputBindingInfo, ModeName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRInputBindingInfo, SlotName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamVRInputBindingInfo, 0x0020);
		}

		// struct FSteamVRFingerCurls
		TEST_METHOD(ScriptStruct__SteamVRInputDevice__SteamVRFingerCurls)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRFingerCurls, Thumb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRFingerCurls, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRFingerCurls, Middle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRFingerCurls, Ring, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRFingerCurls, Pinky, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamVRFingerCurls, 0x0014);
		}

		// struct FSteamVRFingerSplays
		TEST_METHOD(ScriptStruct__SteamVRInputDevice__SteamVRFingerSplays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRFingerSplays, Thumb_Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRFingerSplays, Index_Middle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRFingerSplays, Middle_Ring, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRFingerSplays, Ring_Pinky, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamVRFingerSplays, 0x0010);
		}

		// struct FSteamVRSkeletonTransform
		TEST_METHOD(ScriptStruct__SteamVRInputDevice__SteamVRSkeletonTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Root, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, wrist, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Thumb_1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Thumb_2, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Thumb_3, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Thumb_4, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Index_1, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Index_2, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Index_3, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Index_4, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Index_5, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Middle_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Middle_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Middle_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Middle_4, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Middle_5, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Ring_1, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Ring_2, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Ring_3, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Ring_4, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Ring_5, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Pinky_1, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Pinky_2, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Pinky_3, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Pinky_4, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Pinky_5, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Aux_Thumb, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Aux_Index, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Aux_Middle, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Aux_Ring, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Aux_Pinky, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamVRSkeletonTransform, Bone_Count, 0x05D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamVRSkeletonTransform, 0x0600);
		}

		// struct FUE4RetargettingRefs
		TEST_METHOD(ScriptStruct__SteamVRInputDevice__UE4RetargettingRefs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4RetargettingRefs, bIsInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4RetargettingRefs, bIsRightHanded, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4RetargettingRefs, UnknownData_6WGW, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4RetargettingRefs, KnuckleAverageMS_UE4, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4RetargettingRefs, WristSideDirectionLS_UE4, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUE4RetargettingRefs, WristForwardLS_UE4, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUE4RetargettingRefs, 0x0028);
		}

		// struct FAnimNode_SteamVRInputAnimPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__SteamVRInputDevice__AnimNode_SteamVRInputAnimPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SteamVRInputAnimPose, MotionRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SteamVRInputAnimPose, hand, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SteamVRInputAnimPose, HandSkeleton, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SteamVRInputAnimPose, Mirror, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SteamVRInputAnimPose, UnknownData_6XD7, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SteamVRInputAnimPose, SteamVRSkeletalTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SteamVRInputAnimPose, UE4RetargettingRefs, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SteamVRInputAnimPose, UnknownData_CJVL, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SteamVRInputAnimPose, 0x0670);
		}

		// struct FAnimNode_SteamVRSetWristTransform : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__SteamVRInputDevice__AnimNode_SteamVRSetWristTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SteamVRSetWristTransform, ReferencePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SteamVRSetWristTransform, HandSkeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SteamVRSetWristTransform, UnknownData_EBG8, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SteamVRSetWristTransform, TargetPose, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SteamVRSetWristTransform, UnknownData_6BGP, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SteamVRSetWristTransform, 0x0060);
		}

		// struct FSHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// struct FCustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// struct FChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// struct FFileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileHash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_77U0, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_W6D5, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_P62B, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0068);
		}

		// struct FChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_XLNS, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, FileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_RO9M, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// struct FEyeTrackerStereoGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerStereoGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeOrigin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeDirection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, FixationPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, ConfidenceValue, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerStereoGazeData, 0x0040);
		}

		// struct FEyeTrackerGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, FixationPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, ConfidenceValue, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerGazeData, 0x0028);
		}

		// struct FLightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_EJBB, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}

		// struct FJoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, UnknownData_BW7I, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0018);
		}

		// struct FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_RWS3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// struct FGuid
		TEST_METHOD(ScriptStruct__CoreUObject__Guid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// struct FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// struct FVector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// struct FVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// struct FTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// struct FPlane : public FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Plane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// struct FRotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// struct FQuat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// struct FPackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// struct FPackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// struct FPackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// struct FIntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// struct FIntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// struct FColor
		TEST_METHOD(ScriptStruct__CoreUObject__Color)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// struct FLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// struct FBox
		TEST_METHOD(ScriptStruct__CoreUObject__Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_UX8C, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// struct FBox2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_77EF, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// struct FBoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// struct FOrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// struct FMatrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// struct FInterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_HXKX, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// struct FInterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_6E6L, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// struct FInterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_LTZ7, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// struct FInterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_H0XN, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// struct FInterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_9P6P, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// struct FInterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_P1U1, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// struct FInterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_W05Q, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_JPDD, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// struct FInterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_3O4F, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// struct FInterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_76KW, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// struct FInterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_EUDE, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// struct FInterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_Y9NX, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// struct FInterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_XLOA, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// struct FTransform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_5XBH, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_88RL, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// struct FRandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, Seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// struct FDateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_VAU8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// struct FFrameNumber
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumber, 0x0004);
		}

		// struct FFrameRate
		TEST_METHOD(ScriptStruct__CoreUObject__FrameRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Numerator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Denominator, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameRate, 0x0008);
		}

		// struct FFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__FrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, SubFrame, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTime, 0x0008);
		}

		// struct FQualifiedFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__QualifiedFrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Rate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQualifiedFrameTime, 0x0010);
		}

		// struct FTimecode
		TEST_METHOD(ScriptStruct__CoreUObject__Timecode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Hours, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Minutes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Seconds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Frames, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, bDropFrameFormat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, UnknownData_A63S, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimecode, 0x0014);
		}

		// struct FTimespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_X7W7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// struct FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0018);
		}

		// struct FSoftClassPath : public FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0018);
		}

		// struct FPrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x0008);
		}

		// struct FPrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0010);
		}

		// struct FFallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_PQ45, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// struct FFloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_LI1T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// struct FFloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// struct FInt32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_R210, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// struct FInt32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// struct FFloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// struct FInt32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// struct FPolyglotTextData
		TEST_METHOD(ScriptStruct__CoreUObject__PolyglotTextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_PAB7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeCulture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Namespace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, LocalizedStrings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, CachedText, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolyglotTextData, 0x00B0);
		}

		// struct FAutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_RIJG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Artifact, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0038);
		}

		// struct FAutomationExecutionEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationExecutionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, LineNumber, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, UnknownData_MJV1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationExecutionEntry, 0x0058);
		}

		// struct FVRBulletImpactEffect
		TEST_METHOD(ScriptStruct__VRFramework__VRBulletImpactEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRBulletImpactEffect, Particle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRBulletImpactEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRBulletImpactEffect, 0x0010);
		}

		// struct FVRItemState
		TEST_METHOD(ScriptStruct__VRFramework__VRItemState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRItemState, Parent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRItemState, ParentSlot, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRItemState, UnknownData_6NKC, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRItemState, Controller, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRItemState, 0x0018);
		}

		// struct FVRGunStateProxy
		TEST_METHOD(ScriptStruct__VRFramework__VRGunStateProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRGunStateProxy, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRGunStateProxy, 0x0010);
		}

		// struct FLazyLoadedObjects
		TEST_METHOD(ScriptStruct__VRFramework__LazyLoadedObjects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLazyLoadedObjects, LazyLoaded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLazyLoadedObjects, 0x0010);
		}

		// struct FVRHandFingerJoint
		TEST_METHOD(ScriptStruct__VRFramework__VRHandFingerJoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRHandFingerJoint, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRHandFingerJoint, UnknownData_KE5W, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRHandFingerJoint, 0x0010);
		}

		// struct FVRHandleSequenceSetup
		TEST_METHOD(ScriptStruct__VRFramework__VRHandleSequenceSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRHandleSequenceSetup, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRHandleSequenceSetup, Offset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRHandleSequenceSetup, RotationOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRHandleSequenceSetup, 0x0020);
		}

		// struct FVRInventoryFilter
		TEST_METHOD(ScriptStruct__VRFramework__VRInventoryFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRInventoryFilter, Slot, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRInventoryFilter, bExclusive, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRInventoryFilter, UnknownData_VZXT, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRInventoryFilter, List, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRInventoryFilter, 0x0018);
		}

		// struct FVRInventorySlot
		TEST_METHOD(ScriptStruct__VRFramework__VRInventorySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRInventorySlot, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRInventorySlot, UnknownData_C9CE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRInventorySlot, Pickup, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRInventorySlot, 0x0010);
		}

		// struct FVRItemControllerState
		TEST_METHOD(ScriptStruct__VRFramework__VRItemControllerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRItemControllerState, State, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRItemControllerState, UnknownData_TUSE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRItemControllerState, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRItemControllerState, Actor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRItemControllerState, bFlag, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRItemControllerState, UnknownData_NLH6, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRItemControllerState, 0x0050);
		}

		// struct FMagSlideInfo
		TEST_METHOD(ScriptStruct__VRFramework__MagSlideInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, bMagSlideInsert, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, UnknownData_PNY6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, SlideStartSocket, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, SlideEndSocket, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, MagSlideAxis, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, UnknownData_V8UI, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, ReloadSpeedMultiplier, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, SlideGoalThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, MagSlideBounds, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, MagGoalRotOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, bSlidePositive, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, UnknownData_F4IP, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, MaxSlideDistance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, HandExploitThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagSlideInfo, Gun, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagSlideInfo, 0x0050);
		}

		// struct FVRSettings
		TEST_METHOD(ScriptStruct__VRFramework__VRSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRSettings, Scaling, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRSettings, Detail, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRSettings, AntiAlias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRSettings, Shading, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRSettings, Effects, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRSettings, 0x0014);
		}

		// struct FOnAsyncLoad
		TEST_METHOD(ScriptStruct__VRFramework__OnAsyncLoad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnAsyncLoad, OnAsyncLoadObject, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOnAsyncLoad, 0x0010);
		}

		// struct FVRBulletDamageEvent : public FPointDamageEvent
		TEST_METHOD(ScriptStruct__VRFramework__VRBulletDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRBulletDamageEvent, bClient, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRBulletDamageEvent, UnknownData_KKLU, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRBulletDamageEvent, Origin, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRBulletDamageEvent, ImpulsePower, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRBulletDamageEvent, UnknownData_ND5E, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRBulletDamageEvent, GunClass, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRBulletDamageEvent, 0x00C8);
		}

		// struct FVRFireBulletParams
		TEST_METHOD(ScriptStruct__VRFramework__VRFireBulletParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRFireBulletParams, BulletClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRFireBulletParams, GunClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRFireBulletParams, UnknownData_F140, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRFireBulletParams, Instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRFireBulletParams, 0x0030);
		}

		// struct FVRNetSnapshotLerpInterface
		TEST_METHOD(ScriptStruct__VRFramework__VRNetSnapshotLerpInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRNetSnapshotLerpInterface, UnknownData_C2CZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRNetSnapshotLerpInterface, 0x00E4);
		}

		// struct FVRCustomInventoryOffset
		TEST_METHOD(ScriptStruct__VRFramework__VRCustomInventoryOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRCustomInventoryOffset, Slot, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRCustomInventoryOffset, UnknownData_M3EM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRCustomInventoryOffset, Offset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRCustomInventoryOffset, 0x0040);
		}

		// struct FVREmulatedPlayerPose : public FTableRowBase
		TEST_METHOD(ScriptStruct__VRFramework__VREmulatedPlayerPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVREmulatedPlayerPose, UnknownData_N756, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVREmulatedPlayerPose, LeftHand, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVREmulatedPlayerPose, RightHand, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVREmulatedPlayerPose, Head, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVREmulatedPlayerPose, LerpSpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVREmulatedPlayerPose, UnknownData_NIGZ, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVREmulatedPlayerPose, 0x00B0);
		}

		// struct FVRNetTransform
		TEST_METHOD(ScriptStruct__VRFramework__VRNetTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRNetTransform, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRNetTransform, Rotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRNetTransform, 0x0018);
		}

		// struct FVRNetSnapshot
		TEST_METHOD(ScriptStruct__VRFramework__VRNetSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRNetSnapshot, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRNetSnapshot, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRNetSnapshot, Heading, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRNetSnapshot, Flags, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRNetSnapshot, UnknownData_H133, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRNetSnapshot, HeadTX, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRNetSnapshot, HandTXLeft, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVRNetSnapshot, HandTXRight, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVRNetSnapshot, 0x0068);
		}

		// struct FCompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// struct FCaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// struct FMovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_A5J0, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_U90J, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, Resolution, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_PZST, 0x004B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0050);
		}

		// struct FFrameMetrics
		TEST_METHOD(ScriptStruct__MovieSceneCapture__FrameMetrics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, TotalElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameDelta, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, NumDroppedFrames, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameMetrics, 0x0010);
		}

		// struct FCapturedPixels
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixels, UnknownData_RZ6R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixels, 0x0010);
		}

		// struct FFoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_Z3X0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_MD8J, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// struct FFoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_0PF3, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, Type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// struct FProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_DUIG, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_4LWQ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Type, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_H08W, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0060);
		}

		// struct FHmdUserProfileField
		TEST_METHOD(ScriptStruct__OculusHMD__HmdUserProfileField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfileField, FieldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfileField, FieldValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHmdUserProfileField, 0x0020);
		}

		// struct FGuardianTestResult
		TEST_METHOD(ScriptStruct__OculusHMD__GuardianTestResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuardianTestResult, IsTriggering, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuardianTestResult, DeviceType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuardianTestResult, UnknownData_QAOS, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuardianTestResult, ClosestDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuardianTestResult, ClosestPoint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuardianTestResult, ClosestPointNormal, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuardianTestResult, 0x0020);
		}

		// struct FOculusSplashDesc
		TEST_METHOD(ScriptStruct__OculusHMD__OculusSplashDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, TexturePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, UnknownData_N4BY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, TransformInMeters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, QuadSizeInMeters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, UnknownData_3NZ5, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, DeltaRotation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, TextureOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, TextureScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, bNoAlphaChannel, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, UnknownData_ABVN, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOculusSplashDesc, 0x00A0);
		}

		// struct FHmdUserProfile
		TEST_METHOD(ScriptStruct__OculusHMD__HmdUserProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, Gender, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, PlayerHeight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, EyeHeight, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, IPD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, NeckToEyeDistance, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, UnknownData_EOZD, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, ExtraFields, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHmdUserProfile, 0x0048);
		}

		// struct FMediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, URL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// struct FPlatformRuntimeAudioCompressionOverrides
		TEST_METHOD(ScriptStruct__AudioPlatformConfiguration__PlatformRuntimeAudioCompressionOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, bOverrideCompressionTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, UnknownData_KLG9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, DurationThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, MaxNumRandomBranches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, SoundCueQualityIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformRuntimeAudioCompressionOverrides, 0x0010);
		}

		// struct FPavlovItemSpawnParams
		TEST_METHOD(ScriptStruct__PavlovProxy__PavlovItemSpawnParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovItemSpawnParams, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovItemSpawnParams, Player, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovItemSpawnParams, bDominantHand, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovItemSpawnParams, bSpawnInInventory, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovItemSpawnParams, UnknownData_G717, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovItemSpawnParams, InventorySlot, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovItemSpawnParams, bSpawnInWorld, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovItemSpawnParams, UnknownData_M3IO, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovItemSpawnParams, Transform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovItemSpawnParams, bSpawnWithMagazine, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovItemSpawnParams, bSpawnWithDefaultAttachments, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovItemSpawnParams, UnknownData_4MVV, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPavlovItemSpawnParams, 0x0060);
		}

		// struct FPavlovAttachmentSpawnParams
		TEST_METHOD(ScriptStruct__PavlovProxy__PavlovAttachmentSpawnParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovAttachmentSpawnParams, AttachmentsId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovAttachmentSpawnParams, WeaponToAttachTo, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovAttachmentSpawnParams, bAttachById, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovAttachmentSpawnParams, UnknownData_VPWP, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovAttachmentSpawnParams, AttachToGunId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovAttachmentSpawnParams, Player, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPavlovAttachmentSpawnParams, 0x0030);
		}

		// struct FPavlovGameModeProperties
		TEST_METHOD(ScriptStruct__PavlovProxy__PavlovGameModeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, bNoTeams, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, bAlwaysScore, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, bForceNoScoring, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, UnknownData_QJS0, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, MaximumCash, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, CashKillReward, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, CashTeamKillPenalty, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, bIncrementTeamScore, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, bAutoRespawn, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, UnknownData_Q967, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, RespawnMaxDelay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, bKeepBodies, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, bKeepPawnIfAlive, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, UnknownData_6E20, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, InactivityThreashold, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, InactivityDormantThreashold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, bDynamicSpawns, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, bSpawnGhostOnLogin, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, UnknownData_XMO2, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovGameModeProperties, RoundDuration, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPavlovGameModeProperties, 0x002C);
		}

		// struct FPavlovPlayerStatus
		TEST_METHOD(ScriptStruct__PavlovProxy__PavlovPlayerStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, PlayerState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, Controller, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, Pawn, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, SteamId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, Cash, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, Score, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, TeamId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, Health, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, Armour, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, bHelmet, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, bDead, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, bCanBuy, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, bCrouching, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, bGagged, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, bRightHanded, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, UnknownData_LE31, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, DeadTime, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, AliveTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovPlayerStatus, UnknownData_E3Q3, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPavlovPlayerStatus, 0x0050);
		}

		// struct FItemList
		TEST_METHOD(ScriptStruct__PavlovProxy__ItemList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemList, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemList, ItemClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemList, bCustomItem, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemList, UnknownData_0CIG, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemList, 0x0018);
		}

		// struct FTTTPlayerInfo
		TEST_METHOD(ScriptStruct__PavlovProxy__TTTPlayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTPlayerInfo, UniqueID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTPlayerInfo, Team, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTPlayerInfo, bMissing, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTPlayerInfo, UnknownData_T9GC, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTPlayerInfo, Credits, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTPlayerInfo, Karma, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTPlayerInfo, bKarmaKicked, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTPlayerInfo, UnknownData_9LD5, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTPlayerInfo, RoleName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTPlayerInfo, 0x0030);
		}

		// struct FAsyncLoadLootMesh
		TEST_METHOD(ScriptStruct__PavlovProxy__AsyncLoadLootMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAsyncLoadLootMesh, OnLoadedLoot, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAsyncLoadLootMesh, LootMeshId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAsyncLoadLootMesh, 0x0018);
		}

		// struct FMessage
		TEST_METHOD(ScriptStruct__PavlovProxy__Message)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMessage, Sender, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMessage, Message, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMessage, 0x0028);
		}

		// struct FHandsProxy
		TEST_METHOD(ScriptStruct__PavlovProxy__HandsProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHandsProxy, NonDominantHand, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHandsProxy, DominantHand, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHandsProxy, 0x0010);
		}

		// struct FPlayerVitality
		TEST_METHOD(ScriptStruct__PavlovProxy__PlayerVitality)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerVitality, Health, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerVitality, Armour, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerVitality, bHelmet, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerVitality, bDead, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerVitality, UnknownData_C95Y, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerVitality, 0x000C);
		}

		// struct FPlayerItem
		TEST_METHOD(ScriptStruct__PavlovProxy__PlayerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerItem, Item, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerItem, ItemName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerItem, 0x0010);
		}

		// struct FInventoryItem
		TEST_METHOD(ScriptStruct__PavlovProxy__InventoryItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItem, Item, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItem, ItemName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItem, Slot, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventoryItem, UnknownData_S7KS, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventoryItem, 0x0018);
		}

		// struct FLoadoutProxy
		TEST_METHOD(ScriptStruct__PavlovProxy__LoadoutProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, LoadoutTitle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, PrimaryHand, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, PrimaryBack, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, Secondary, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, bSpawnWithDefaultAttachments, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, KnifeSlot, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, UnknownData_HZFH, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, Grenades, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, bSpawnWithMeds, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, bSpawnWithSyringe, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, SpawnWithMine, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, UnknownData_HAE7, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, Health, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, Armour, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, bHelmet, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, UnknownData_EMS6, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, MaxPlayersWithLoadout, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProxy, MaxPlayerMultiplier, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoadoutProxy, 0x0050);
		}

		// struct FPushLoadoutLocation
		TEST_METHOD(ScriptStruct__PavlovProxy__PushLoadoutLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutLocation, bOverrideLoadoutLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutLocation, UnknownData_B5PE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutLocation, LoadoutSpawnLocation, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPushLoadoutLocation, 0x0010);
		}

		// struct FAsyncVehicleSpawnData
		TEST_METHOD(ScriptStruct__PavlovProxy__AsyncVehicleSpawnData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAsyncVehicleSpawnData, OnSpawnComplete, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAsyncVehicleSpawnData, VehicleID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAsyncVehicleSpawnData, UnknownData_CZ5I, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAsyncVehicleSpawnData, SpawnTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAsyncVehicleSpawnData, TeamId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAsyncVehicleSpawnData, DespawnTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAsyncVehicleSpawnData, UnknownData_RE0S, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAsyncVehicleSpawnData, 0x0060);
		}

		// struct FCustomItemData : public FTableRowBase
		TEST_METHOD(ScriptStruct__PavlovProxy__CustomItemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomItemData, CustomItemClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomItemData, 0x0010);
		}

		// struct FPlayerSkin : public FTableRowBase
		TEST_METHOD(ScriptStruct__PavlovProxy__PlayerSkin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSkin, PlayerMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSkin, HandMesh, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSkin, UnknownData_9NM7, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerSkin, 0x0018);
		}

		// struct FDestructibleChunkParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleChunkParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bIsSupportChunk, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotFracture, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotDamage, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotCrumble, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleChunkParameters, 0x0004);
		}

		// struct FFractureMaterial
		TEST_METHOD(ScriptStruct__ApexDestruction__FractureMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, Tangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UAngle, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, InteriorElementIndex, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureMaterial, 0x0024);
		}

		// struct FDestructibleDamageParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDamageParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageSpread, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bEnableImpactDamage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_M6M6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactDamage, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DefaultImpactDamageDepth, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bCustomImpactResistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_G3BI, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactResistance, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDamageParameters, 0x001C);
		}

		// struct FDestructibleAdvancedParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleAdvancedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, DamageCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, ImpactVelocityThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, MaxChunkSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, FractureImpulseScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleAdvancedParameters, 0x0010);
		}

		// struct FDestructibleSpecialHierarchyDepths
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleSpecialHierarchyDepths)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, SupportDepth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, MinimumFractureDepth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, bEnableDebris, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, UnknownData_U7Q5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, DebrisDepth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, EssentialDepth, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleSpecialHierarchyDepths, 0x0014);
		}

		// struct FDestructibleDepthParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDepthParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDepthParameters, ImpactDamageOverride, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDepthParameters, 0x0001);
		}

		// struct FDestructibleParametersFlag
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParametersFlag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParametersFlag, UnknownData_5V6B, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParametersFlag, 0x0004);
		}

		// struct FDestructibleDebrisParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDebrisParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMax, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMin, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, ValidBounds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDebrisParameters, 0x002C);
		}

		// struct FDestructibleParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DamageParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DebrisParameters, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, AdvancedParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, SpecialHierarchyDepths, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_MWKJ, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DepthParameters, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, Flags, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_XYZS, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParameters, 0x0088);
		}

		// struct FMovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// struct FMovieSceneActorReferenceKey
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, Object, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceKey, 0x0018);
		}

		// struct FMovieSceneActorReferenceData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_FSLJ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyValues, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_VFLC, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceData, 0x00A0);
		}

		// struct FMovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_B6IP, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_G04X, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_W51A, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// struct FMovieSceneEvent
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvent, FunctionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvent, 0x0008);
		}

		// struct FMovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_KHO0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0028);
		}

		// struct FEventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, Parameters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0030);
		}

		// struct FMovieSceneEventSectionData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, UnknownData_B7CY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0088);
		}

		// struct FMovieSceneEventChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, UnknownData_IZKU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventChannel, 0x0088);
		}

		// struct FColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x0288);
		}

		// struct FVectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x01E8);
		}

		// struct FScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x00A8);
		}

		// struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleChannel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleChannel, 0x0098);
		}

		// struct FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, PlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_ZONU, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_H6WI, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x00C8);
		}

		// struct FMovieSceneStringChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, bHasDefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, UnknownData_F87W, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringChannel, 0x00A0);
		}

		// struct FMovieScene3DAttachSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DAttachSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachComponentName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentLocationRule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentRotationRule, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentScaleRule, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentLocationRule, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentRotationRule, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentScaleRule, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, UnknownData_6QJT, 0x004E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DAttachSectionTemplate, 0x0050);
		}

		// struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_YH0Z, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_88QD, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00E0);
		}

		// struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_SBJ0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0048);
		}

		// struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_U6QS, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_95RB, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_W29S, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_KOQP, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_FLJR, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0650);
		}

		// struct FMovieSceneComponentTransformSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentTransformSectionTemplate, TemplateData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentTransformSectionTemplate, 0x0670);
		}

		// struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorReferenceData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x00E8);
		}

		// struct FMovieSceneAudioSectionTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, Sound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioStartOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, UnknownData_GR3J, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, SectionStartTimeSeconds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioPitchMultiplierCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioVolumeCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, RowIndex, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, bOverrideAttenuation, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, UnknownData_9FC3, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AttenuationSettings, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnQueueSubtitles, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnAudioFinished, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnAudioPlaybackPercent, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplateData, 0x0198);
		}

		// struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x01B8);
		}

		// struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_E9J7, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_ENR5, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraCutSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraCutSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CameraBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_14RX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CutTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, bHasCutTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_P0MM, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraCutSectionTemplate, 0x0080);
		}

		// struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_KHUY, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0038);
		}

		// struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_MBMH, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x02D0);
		}

		// struct FMovieSceneEventTemplateBase : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, EventReceivers, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, UnknownData_F09Y, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTemplateBase, 0x0038);
		}

		// struct FMovieSceneEventRepeaterTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventRepeaterTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventRepeaterTemplate, EventToTrigger, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventRepeaterTemplate, 0x0040);
		}

		// struct FMovieSceneEventTriggerTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTriggerTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, EventTimes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, EventFunctions, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTriggerTemplate, 0x0058);
		}

		// struct FMovieSceneEventSectionTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x00C0);
		}

		// struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_180X, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneLevelVisibilitySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneLevelVisibilitySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, Visibility, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, UnknownData_W8HF, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, LevelNames, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneLevelVisibilitySectionTemplate, 0x0038);
		}

		// struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0050);
		}

		// struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0058);
		}

		// struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, MaterialIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_S2NW, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0058);
		}

		// struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0050);
		}

		// struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x00B8);
		}

		// struct FMovieSceneEulerTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEulerTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEulerTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEulerTransformPropertySectionTemplate, 0x0698);
		}

		// struct FMovieSceneTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformPropertySectionTemplate, 0x0698);
		}

		// struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_5AOE, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x02D0);
		}

		// struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00E8);
		}

		// struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_T9JH, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneFloatPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFloatPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, FloatFunction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, BlendType, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, UnknownData_B6PR, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatPropertySectionTemplate, 0x00F0);
		}

		// struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00D8);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x00D0);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x00F0);
		}

		// struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x00C0);
		}

		// struct FMovieSceneSpawnSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSpawnSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnSectionTemplate, Curve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnSectionTemplate, 0x00B0);
		}

		// struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_RIFG, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0028);
		}

		// struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, UnknownData_9YZJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, Vector, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0040);
		}

		// struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, Vector, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_769N, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0038);
		}

		// struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, Vector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0030);
		}

		// struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00D8);
		}

		// struct FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__ElementID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementID, IDValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementID, 0x0004);
		}

		// struct FPolygonGroupID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonGroupID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupID, 0x0004);
		}

		// struct FPolygonID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonID, 0x0004);
		}

		// struct FVertexID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexID, 0x0004);
		}

		// struct FEdgeID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__EdgeID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeID, 0x0004);
		}

		// struct FVertexInstanceID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexInstanceID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceID, 0x0004);
		}

		// struct FMeshTriangle
		TEST_METHOD(ScriptStruct__MeshDescription__MeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriangle, VertexInstanceID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriangle, VertexInstanceID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriangle, VertexInstanceID2, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshTriangle, 0x000C);
		}

		// struct FEngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// struct FEngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// struct FEngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, UserName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// struct FEngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// struct FEngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// struct FEngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_OQ69, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_VCCU, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// struct FEngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_NCP2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// struct FTickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_G5DH, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_B680, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_GH4X, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_X9QQ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0050);
		}

		// struct FActorComponentTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_PCN0, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0058);
		}

		// struct FSimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// struct FVector_NetQuantize : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// struct FVector_NetQuantizeNormal : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// struct FHitResult
		TEST_METHOD(ScriptStruct__Engine__HitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_V218, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, MyBoneName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x0088);
		}

		// struct FActorTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_S16X, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0058);
		}

		// struct FRepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// struct FVector_NetQuantize100 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// struct FRepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_7UQF, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// struct FGeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// struct FLightingChannels
		TEST_METHOD(ScriptStruct__Engine__LightingChannels)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingChannels, 0x0001);
		}

		// struct FCollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// struct FResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_90HJ, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x0010);
		}

		// struct FWalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_3CMM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_KZAV, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// struct FPrimitiveComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentPostPhysicsTickFunction, UnknownData_OI09, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentPostPhysicsTickFunction, 0x0058);
		}

		// struct FSkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_S2JH, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0020);
		}

		// struct FSkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x0028);
		}

		// struct FSingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_ZD6W, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_YUUL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// struct FPoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_GTAW, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0038);
		}

		// struct FStreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// struct FLightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_QTF8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// struct FAnimNotifyEventReference
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEventReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, UnknownData_IDIC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, NotifySource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEventReference, 0x0010);
		}

		// struct FAnimNotifyArray
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyArray, Notifies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyArray, 0x0010);
		}

		// struct FAnimNotifyQueue
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnknownData_MDJ5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, AnimNotifies, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnfilteredMontageAnimNotifies, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyQueue, 0x0070);
		}

		// struct FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_UZ9G, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SlotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_YXK2, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// struct FAnimNotifyEvent : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_AEA0, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_KVLI, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_1EAE, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnFollower, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_Y7XX, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00A8);
		}

		// struct FMarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, UnknownData_YSX0, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x0018);
		}

		// struct FWeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_TMEW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// struct FCollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// struct FBodyInstance
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_8JU6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_HGCK, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_EZAJ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_EFIN, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_0VI1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_WEVX, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_WQFT, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0150);
		}

		// struct FMaterialParameterInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Association, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, UnknownData_PJEK, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Index, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterInfo, 0x0010);
		}

		// struct FScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, UnknownData_N82B, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0028);
		}

		// struct FInterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, UnknownData_8JH2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x0010);
		}

		// struct FSoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_EVI1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// struct FToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_YHOL, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// struct FVisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_V94Q, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// struct FVectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_9UEE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// struct FFloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_LH7C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// struct FDrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_LWD2, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// struct FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// struct FCollectionVectorParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// struct FPhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_3WQS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_PXL6, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0028);
		}

		// struct FPhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x0030);
		}

		// struct FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_V34V, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// struct FLinearConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, Limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_RLLL, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// struct FConeConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_ZIL8, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// struct FTwistConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_TNHV, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// struct FConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_TQEI, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// struct FLinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_YY0G, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// struct FAngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_SNDA, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// struct FConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_WDKE, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x0104);
		}

		// struct FPhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, UnknownData_7T0Z, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x0110);
		}

		// struct FSmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_UL3R, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x0010);
		}

		// struct FPoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, TrackToBufferIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0070);
		}

		// struct FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, UnknownData_QZLN, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0020);
		}

		// struct FPoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// struct FCollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x0008);
		}

		// struct FNetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// struct FClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MinInstanceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MaxInstanceScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0040);
		}

		// struct FClusterNode_DEPRECATED
		TEST_METHOD(ScriptStruct__Engine__ClusterNode_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode_DEPRECATED, 0x0028);
		}

		// struct FIntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// struct FKeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_4ZXV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0050);
		}

		// struct FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_HZC3, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0058);
		}

		// struct FIntegralCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_XN4M, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0070);
		}

		// struct FInterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// struct FCameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// struct FSubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_FYT4, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// struct FSupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_OPNW, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// struct FLatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_9WGU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x00A0);
		}

		// struct FMaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_UV75, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bNormalMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bMetallicMap, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_VVKN, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bRoughnessMap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_S890, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bSpecularMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_UWY0, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bEmissiveMap, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bOpacityMap, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_HP05, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bOpacityMaskMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_YNRY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bAmbientOcclusionMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_DHRT, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_1Q4T, 0x008A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x008C);
		}

		// struct FLevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_EQYZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_IBP0, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_K5H5, 0x0132);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x0134);
		}

		// struct FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_Q38J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// struct FDynamicTextureInstance : public FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_ZYX4, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// struct FBatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_GQ12, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// struct FBatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_OR67, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// struct FClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_ZLHC, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// struct FParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_OE8N, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// struct FPaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, UnknownData_A5XP, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, UnknownData_LN1C, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0030);
		}

		// struct FStaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_77WQ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, PaintedVertices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_4K71, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x00A8);
		}

		// struct FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0001);
		}

		// struct FNavAgentProperties : public FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_9797, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_CDSH, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0030);
		}

		// struct FFindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_OM7Q, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_WFKS, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0098);
		}

		// struct FAnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// struct FBuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, UnknownData_3WR9, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, UnknownData_LNEL, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0028);
		}

		// struct FWeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// struct FPostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMethod, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_7SPD, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BlueCorrection, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ExpandGamut, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ChromaticAberrationStartOffset, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraShutterSpeed, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraISO, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMinFstop, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBladeCount, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureCalibrationConstant, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_NNN7, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMaxBokehSize, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBokehShape, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldColorThreshold, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSizeThreshold, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_OJ1E, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x04E0);
		}

		// struct FNavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_CG61, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0058);
		}

		// struct FRootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// struct FVector_NetQuantize10 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// struct FBasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_MT10, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// struct FSplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0060);
		}

		// struct FRichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_2P2C, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// struct FRichCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, PreInfinityExtrap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, PostInfinityExtrap, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, UnknownData_8TKS, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, DefaultValue, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0070);
		}

		// struct FRuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0078);
		}

		// struct FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_F0AN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_XH5U, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_W6EI, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00A0);
		}

		// struct FSoundAttenuationPluginSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, ReverbPluginSettingsArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationPluginSettings, 0x0030);
		}

		// struct FSoundAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_Q16E, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PluginSettings, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x02A8);
		}

		// struct FInputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_H1SG, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// struct FInputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// struct FInputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_EL10, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// struct FPSCPoolElem
		TEST_METHOD(ScriptStruct__Engine__PSCPoolElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, PSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, UnknownData_5KZ0, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPoolElem, 0x0010);
		}

		// struct FPSCPool
		TEST_METHOD(ScriptStruct__Engine__PSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, UnknownData_CM0Q, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPool, 0x0038);
		}

		// struct FWorldPSCPool
		TEST_METHOD(ScriptStruct__Engine__WorldPSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, WorldParticleSystemPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, UnknownData_9VCW, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldPSCPool, 0x0058);
		}

		// struct FDistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_MSV8, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_AG4Z, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0028);
		}

		// struct FFloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0028);
		}

		// struct FGPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_O5GG, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_9NI6, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// struct FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0028);
		}

		// struct FRawDistributionVector : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0050);
		}

		// struct FRawDistributionFloat : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0038);
		}

		// struct FGPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_Z069, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_NDXD, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_4Z7K, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_2U26, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_G7QV, 0x0195);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_6ZGV, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x02C0);
		}

		// struct FSoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_CZEH, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_Y6KH, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_8NX4, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x002C);
		}

		// struct FPassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// struct FGaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// struct FLensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_RG97, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// struct FConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_BPX1, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// struct FLensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_RYOZ, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_S3KZ, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// struct FLensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_D7OA, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// struct FFilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// struct FColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// struct FColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_N8NU, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// struct FClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// struct FMinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, DesiredFOV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_CAQJ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_P52O, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_JVYN, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_XZW2, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x0530);
		}

		// struct FRootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_LGZ3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_P3OY, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// struct FCameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_ZMJW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x0540);
		}

		// struct FInterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_BCL3, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// struct FBoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_J6EJ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0018);
		}

		// struct FPerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, UnknownData_9EIY, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0020);
		}

		// struct FBlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// struct FEditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// struct FBlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_ACGS, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// struct FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_RNNG, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, UnknownData_K7AK, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0018);
		}

		// struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_MVA3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// struct FTouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// struct FReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// struct FSkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// struct FSmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_0VAD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0060);
		}

		// struct FCurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_CD34, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0020);
		}

		// struct FAnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_R6BS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// struct FSoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_MM5L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// struct FSoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_XSUF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// struct FStreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_3T8F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// struct FMaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_FL4C, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// struct FRootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_VX9I, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_4544, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x00F8);
		}

		// struct FStaticComponentMaskParameter
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, R, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, G, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, B, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, A, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, bOverride, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, UnknownData_1O6O, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskParameter, 0x0028);
		}

		// struct FDelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// struct FTableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_IV5X, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// struct FRollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_1ZMI, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_R2EN, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_RDPG, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, ObjReferences, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x00A0);
		}

		// struct FTextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_0YUJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smaller, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smallest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_25HL, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_QXFX, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smaller, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smallest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalLODBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalMaxLODSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_SANW, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x0050);
		}

		// struct FBeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_0PPP, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// struct FRigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_DMFK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_ZHFU, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0018);
		}

		// struct FModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_78IP, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// struct FVector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0028);
		}

		// struct FFloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// struct FVectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// struct FExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0008);
		}

		// struct FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, UnknownData_EI78, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x0010);
		}

		// struct FVector2MaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x0010);
		}

		// struct FBranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_8H7U, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// struct FPlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_0NRM, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_RV7H, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// struct FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_5M7P, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// struct FPointDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00A8);
		}

		// struct FExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourcePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceSubPropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceArrayIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_OTSP, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestArrayIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, Size, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, bInstanceIsTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyType, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_19PO, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceStructSubProperty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_XFYR, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0068);
		}

		// struct FExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, Function, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_AGEM, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0028);
		}

		// struct FRepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_8BIM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_FG3Z, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_OVL4, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x014C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0158);
		}

		// struct FSimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_YUDC, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x0160);
		}

		// struct FFOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Waveform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_PNHT, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// struct FVOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// struct FDialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// struct FDialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// struct FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_F3LD, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// struct FCurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_5L4Q, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// struct FCurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// struct FInterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_8YBC, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// struct FAnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_DUEA, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_8KI3, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// struct FBoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_OPC9, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// struct FDirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, UnknownData_OWFX, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0018);
		}

		// struct FEventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, UnknownData_34PB, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x0010);
		}

		// struct FPrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_2V1J, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// struct FParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// struct FMeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_4BTI, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// struct FStaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, ImportedMaterialSlotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_QQTB, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0030);
		}

		// struct FSubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, BoundaryColorBleed, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ExtinctionScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, NormalScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatteringDistribution, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, IOR, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness0, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, LobeMix, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x0050);
		}

		// struct FHardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0010);
		}

		// struct FBoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_BRF3, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// struct FPerPlatformFloat
		TEST_METHOD(ScriptStruct__Engine__PerPlatformFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformFloat, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformFloat, 0x0004);
		}

		// struct FSkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_YV5H, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x0020);
		}

		// struct FSkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_Q1K8, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x0068);
		}

		// struct FPerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__PerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformInt, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformInt, 0x0004);
		}

		// struct FSkeletalMeshSamplingRegionMaterialFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionMaterialFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionMaterialFilter, MaterialName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionMaterialFilter, 0x0008);
		}

		// struct FSkeletalMeshSamplingRegionBoneFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, UnknownData_SMIH, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBoneFilter, 0x0010);
		}

		// struct FSkeletalMeshSamplingLODBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingLODBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingLODBuiltData, UnknownData_1YMH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingLODBuiltData, 0x0048);
		}

		// struct FSkeletalMeshSamplingRegionBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBuiltData, UnknownData_7VL6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBuiltData, 0x0078);
		}

		// struct FSoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_JHZN, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_LQBA, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0010);
		}

		// struct FSoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_JXKY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x0010);
		}

		// struct FSoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_59SY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x0010);
		}

		// struct FBakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_LM8O, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// struct FBakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_QXU2, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_R2OD, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0048);
		}

		// struct FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// struct FAnimationTransitionBetweenStates : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_223E, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_Y1CJ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// struct FBakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_99MY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// struct FBranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, UnknownData_N5D0, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x0010);
		}

		// struct FFontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_IHZS, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// struct FFontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_FAMU, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_6T1N, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_49RF, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_2Z0Y, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_1RJ1, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_8FHU, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_0I5N, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00A0);
		}

		// struct FForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_YNUU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0080);
		}

		// struct FPredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, LaunchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_JY1H, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_PNQD, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_FPD6, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_VXX7, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// struct FPredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// struct FHapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Amplitude, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x00F0);
		}

		// struct FHLODProxyMesh
		TEST_METHOD(ScriptStruct__Engine__HLODProxyMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, LODActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_510N, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, StaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, Key, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODProxyMesh, 0x0030);
		}

		// struct FParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_NUP9, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// struct FQueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_9QDF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_ROVR, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, LifeTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// struct FAlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_Q28P, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_MIUX, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0038);
		}

		// struct FAnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_V53S, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_RW8Y, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_JN50, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_6S0X, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Position, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Blend, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_IIJ1, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_39MZ, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x01B0);
		}

		// struct FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_RZLM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, EvaluateGraphExposedInputs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0030);
		}

		// struct FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_KP49, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0010);
		}

		// struct FPoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0010);
		}

		// struct FInputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// struct FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Base, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Additive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, ActualAlpha, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_SPWH, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x0068);
		}

		// struct FAnimNode_SaveCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, GlobalWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_GEA0, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x00D8);
		}

		// struct FAnimNode_AssetPlayerBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_ZR21, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupIndex, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_8DYM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_7QGP, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0058);
		}

		// struct FInputRange
		TEST_METHOD(ScriptStruct__Engine__InputRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRange, 0x0008);
		}

		// struct FInputScaleBiasClamp
		TEST_METHOD(ScriptStruct__Engine__InputScaleBiasClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bMapRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bClampResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInterpResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInitialized, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, OutRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Bias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedIncreasing, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedDecreasing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpolatedResult, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBiasClamp, 0x0030);
		}

		// struct FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_M0VU, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateBasis, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateScaleBiasClamp, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x00A0);
		}

		// struct FAnimNode_StateMachine : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_OBME, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, CurrentState, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, ElapsedTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_61XQ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00E0);
		}

		// struct FAnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_81BQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// struct FAnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_ZQ7I, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_F3YW, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00C8);
		}

		// struct FAnimNode_SubInput : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SubInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInput, UnknownData_SD9B, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SubInput, 0x0068);
		}

		// struct FAnimNode_SubInstance : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SubInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, Tag, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceToRun, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceProperties, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, SubInstanceProperties, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, SourcePropertyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, DestPropertyNames, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, UnknownData_91SE, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SubInstance, 0x00C8);
		}

		// struct FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_NENF, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_6FIG, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, CacheFramesRemaining, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_6E5C, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x0078);
		}

		// struct FAnimNode_TransitionResult : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_L501, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0048);
		}

		// struct FAnimNode_UseCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0048);
		}

		// struct FAnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_JSD3, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0038);
		}

		// struct FStringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_HKVG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// struct FStringCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0078);
		}

		// struct FTexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_X580, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0020);
		}

		// struct FTextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_I0Z0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0080);
		}

		// struct FStreamingTexturePrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTexturePrimitiveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, UnknownData_9G7K, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTexturePrimitiveInfo, 0x0030);
		}

		// struct FTimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_FXFH, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// struct FStartAsyncSimulationFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartAsyncSimulationFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartAsyncSimulationFunction, UnknownData_DL9S, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartAsyncSimulationFunction, 0x0058);
		}

		// struct FEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_F294, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0058);
		}

		// struct FStartPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_XRC6, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0058);
		}

		// struct FLevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_84XJ, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// struct FSkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_1SPP, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0028);
		}

		// struct FConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// struct FGameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0010);
		}

		// struct FClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_GIV9, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x0040);
		}

		// struct FPluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// struct FStructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0010);
		}

		// struct FDirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// struct FDropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// struct FNetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0018);
		}

		// struct FTViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_1CVR, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_V96V, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x0550);
		}

		// struct FVoiceSettings
		TEST_METHOD(ScriptStruct__Engine__VoiceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, ComponentToAttachTo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, AttenuationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, SourceEffectChain, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceSettings, 0x0018);
		}

		// struct FInstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_ZRIC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// struct FLightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_QTDY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_ED8A, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0014);
		}

		// struct FMaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0010);
		}

		// struct FMaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_OpacityMaskClipValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_BlendMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_ShadingModel, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_DitheredLODTransition, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_CastDynamicShadowAsMasked, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_TwoSided, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, UnknownData_T2VQ, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, UnknownData_A0FV, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, UnknownData_FKEN, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0014);
		}

		// struct FStaticTerrainLayerWeightParameter
		TEST_METHOD(ScriptStruct__Engine__StaticTerrainLayerWeightParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_QTTY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, ExpressionGUID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, WeightmapIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bWeightBasedBlend, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_ESMQ, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticTerrainLayerWeightParameter, 0x0030);
		}

		// struct FMaterialLayersFunctions
		TEST_METHOD(ScriptStruct__Engine__MaterialLayersFunctions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Layers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Blends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, LayerStates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, KeyString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialLayersFunctions, 0x0040);
		}

		// struct FFilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// struct FImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// struct FEditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// struct FBoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_HIHR, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// struct FVirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0018);
		}

		// struct FSmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_RCUZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// struct FAnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// struct FBlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, UnknownData_K0UN, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0020);
		}

		// struct FImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_NTBB, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_XHD0, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// struct FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// struct FA2CSPose : public FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_44R7, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// struct FEdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// struct FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_W407, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SearchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// struct FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// struct FFunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0020);
		}

		// struct FNameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, UnknownData_ESA9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x0010);
		}

		// struct FNameCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0068);
		}

		// struct FMeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, UnknownData_UCHI, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// struct FMeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// struct FMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_AG8A, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_YAGY, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0030);
		}

		// struct FMeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bRecalculateNormals, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bGenerateUniqueLightmapUVs, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bKeepSymmetry, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bVisibilityAided, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bCullOccluded, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_Z5L1, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// struct FStaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_FPOJ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, SourceImportFilename, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// struct FStaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_FKNF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_GKYM, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_9H2C, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// struct FSkeletalMeshSamplingRegion
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, UnknownData_0XFZ, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, MaterialFilters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, BoneFilters, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegion, 0x0030);
		}

		// struct FStatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// struct FAnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_HULI, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// struct FAnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// struct FAnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, UnknownData_00W9, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x0010);
		}

		// struct FCompositeSection : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, StartTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_PUQO, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, MetaData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0058);
		}

		// struct FBranchingPoint : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0040);
		}

		// struct FBranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_CSAX, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// struct FTimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// struct FTimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_SN2N, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// struct FTrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// struct FNavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_N2YO, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// struct FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_BAFU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_XVNC, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_U3JJ, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_GBHZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0038);
		}

		// struct FNavigationLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0050);
		}

		// struct FLocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, UnknownData_WWBY, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0018);
		}

		// struct FTextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// struct FAutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_KWHY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_9L7Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// struct FRuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x01C8);
		}

		// struct FCurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// struct FDataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// struct FDataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// struct FLevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_6LHK, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// struct FSkeletalMeshSamplingBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, RegionBuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingBuiltData, 0x0020);
		}

		// struct FSkeletalMeshSamplingInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, Regions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, BuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingInfo, 0x0030);
		}

		// struct FActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_WP3N, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0018);
		}

		// struct FViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_CZJ4, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_N37Z, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// struct FUpdateLevelVisibilityLevelInfo
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelVisibilityLevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, UnknownData_0DWU, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelVisibilityLevelInfo, 0x0010);
		}

		// struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_6SAU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, ReplicationBytes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0028);
		}

		// struct FLatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// struct FUpdateLevelStreamingLevelStatus
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelStreamingLevelStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, UnknownData_R8V6, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelStreamingLevelStatus, 0x0010);
		}

		// struct FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, UnknownData_2LXX, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x0010);
		}

		// struct FSplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, InputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_7JG5, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// struct FDebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_C5PX, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_OYYH, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_1TIE, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// struct FAudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_HN7W, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_VOGL, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// struct FAnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// struct FTireFrictionScalePair
		TEST_METHOD(ScriptStruct__Engine__TireFrictionScalePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, TireType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, UnknownData_1FG9, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireFrictionScalePair, 0x0010);
		}

		// struct FRigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingExtrapolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingLimit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerLinearDifference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerAngularDifference, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxRestoredStateError, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxLinearHardSnapDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PositionLerp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngleLerp, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearVelocityCoefficient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularVelocityCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationDistanceSq, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSimilarity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x0034);
		}

		// struct FPhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_ZF2D, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x0010);
		}

		// struct FBroadphaseSettings
		TEST_METHOD(ScriptStruct__Engine__BroadphaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnClient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, UnknownData_Z4KR, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPBounds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPNumSubdivs, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBroadphaseSettings, 0x0024);
		}

		// struct FEngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, Enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_HE5T, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// struct FKeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_XU9R, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// struct FPreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0028);
		}

		// struct FInputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// struct FConstraintInstance
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_22SX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_4BP8, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_MI7D, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01B8);
		}

		// struct FStatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_HY24, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// struct FROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// struct FDialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// struct FDistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// struct FVectorCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x0170);
		}

		// struct FTransformCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x0470);
		}

		// struct FSlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_QIT3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_04P6, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x0040);
		}

		// struct FNavDataConfig : public FNavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClassName, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0068);
		}

		// struct FPacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x0014);
		}

		// struct FFastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_YERL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x00B0);
		}

		// struct FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// struct FParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// struct FBeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, UnknownData_4VGC, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x0010);
		}

		// struct FParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_1B5B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// struct FParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_OQL1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// struct FPlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_DMQW, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_O5DB, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// struct FPreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0038);
		}

		// struct FInstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0040);
		}

		// struct FPrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, Priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_2Z5R, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_LG9D, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x0010);
		}

		// struct FPrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_SKFE, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_2PJR, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0088);
		}

		// struct FAssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// struct FAssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// struct FCustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// struct FMeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_0FM3, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, VoxelSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, TextureWidth, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, TextureHeight, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportNormalMap, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportMetallicMap, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportRoughnessMap, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportSpecularMap, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bCalculateCorrectLODModel, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_XB17, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnresolvedGeometryColor, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bOverrideTransferDistance, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_8K0K, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaxRayCastDist, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bUseHardAngleThreshold, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_7YJV, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, NormalCalculationMethod, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_AK2N, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bComputeLightMapResolution, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bRecalculateNormals, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bBakeVertexData, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bUseLandscapeCulling, 0x00CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bAllowAdjacency, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bAllowDistanceField, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bReuseMeshLightmapUVs, 0x00CF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bCreateCollision, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bAllowVertexColors, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bGenerateLightmapUVs, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_K7WG, 0x00D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x00D4);
		}

		// struct FMeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bGenerateLightMapUV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_EI1O, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bComputedLightMapResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bImportVertexColors, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bPivotPointAtZero, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bMergePhysicsData, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bMergeMaterials, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_D0VB, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bBakeVertexDataToMesh, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bUseVertexDataForBakingMaterial, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bUseTextureBinning, 0x009E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bReuseMeshLightmapUVs, 0x009F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bMergeEquivalentMaterials, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, OutputUVs, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_EQ9P, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, GutterSize, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bCalculateCorrectLODModel, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_J5CG, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, ExportSpecificLOD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bUseLandscapeCulling, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bIncludeImposters, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bAllowDistanceField, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportNormalMap, 0x00BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportMetallicMap, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportRoughnessMap, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportSpecularMap, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_Y26O, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MergedMaterialAtlasResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_WG1P, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x00CC);
		}

		// struct FHierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_75TR, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, OverrideDrawDistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, bUseOverrideDrawDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, bSimplifyMesh, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_XQI2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, bOnlyGenerateClustersForVolumes, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, bReusePreviousLevelClusters, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_TFYO, 0x01BE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x01C0);
		}

		// struct FLightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_JM3H, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapSphericalHarmonicSmoothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_YYGR, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_Z4LE, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x0054);
		}

		// struct FAnimNode_SingleNode : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_C9CK, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0050);
		}

		// struct FAnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_BKEE, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// struct FAnimationState : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// struct FNameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// struct FRigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// struct FBoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// struct FVectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0030);
		}

		// struct FFontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_HBAU, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0030);
		}

		// struct FMaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// struct FInterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// struct FTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0028);
		}

		// struct FStaticSwitchParameter
		TEST_METHOD(ScriptStruct__Engine__StaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, Value, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, bOverride, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_CQRE, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, ExpressionGUID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_NK9T, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticSwitchParameter, 0x0028);
		}

		// struct FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_D8ZL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, RestOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_CZJ5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_MDPB, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_W2Z9, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0030);
		}

		// struct FKConvexElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_4Q4U, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_IORL, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x00A0);
		}

		// struct FEdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_VFFA, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x0020);
		}

		// struct FEdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_AV38, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0060);
		}

		// struct FInputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_H2OS, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// struct FSourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, Preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_Q3SN, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// struct FSoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_P9Q7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_NJJU, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// struct FPreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// struct FSpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0038);
		}

		// struct FRootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// struct FRootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_0KYH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// struct FStaticMaterialLayersParameter
		TEST_METHOD(ScriptStruct__Engine__StaticMaterialLayersParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, Value, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, bOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_2CPB, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, ExpressionGUID, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_HIP9, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterialLayersParameter, 0x0068);
		}

		// struct FStaticParameterSet
		TEST_METHOD(ScriptStruct__Engine__StaticParameterSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticSwitchParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticComponentMaskParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, TerrainLayerWeightParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, MaterialLayersParameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterSet, 0x0040);
		}

		// struct FBlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, UnknownData_T3LJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// struct FBuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// struct FBuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// struct FBuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// struct FBuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// struct FBlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bIsValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_JX72, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_AFOO, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0050);
		}

		// struct FSubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_2469, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// struct FLocalizedSubtitle
		TEST_METHOD(ScriptStruct__Engine__LocalizedSubtitle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, LanguageExt, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, Subtitles, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, UnknownData_95O1, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedSubtitle, 0x0028);
		}

		// struct FDebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_4DSN, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// struct FCullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// struct FEmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_TF1O, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_103P, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_NSI8, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0050);
		}

		// struct FParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// struct FBoneFilter
		TEST_METHOD(ScriptStruct__Engine__BoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, bExcludeSelf, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, UnknownData_LH5S, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneFilter, 0x0010);
		}

		// struct FSkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneFilterActionOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_QL7Y, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ReductionSettings, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0040);
		}

		// struct FFloatCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0090);
		}

		// struct FRawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// struct FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0040);
		}

		// struct FWrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// struct FURL
		TEST_METHOD(ScriptStruct__Engine__URL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, UnknownData_UMXH, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Valid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, UnknownData_US9T, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0070);
		}

		// struct FFullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_ARHF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// struct FLevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_NMIG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// struct FNamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_P2KJ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// struct FWorldContext
		TEST_METHOD(ScriptStruct__Engine__WorldContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_2KLR, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_JU39, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_NL6A, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_TON7, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0298);
		}

		// struct FExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, FixedEV100, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_8ADR, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// struct FTickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_LOZO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// struct FMarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_O5KQ, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// struct FSlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// struct FPrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x0020);
		}

		// struct FFunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, UnknownData_DX6W, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0030);
		}

		// struct FScalarParameterAtlasInstanceData
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterAtlasInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, bIsUsedAsAtlasPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, UnknownData_8EBK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Curve, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Atlas, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterAtlasInstanceData, 0x0058);
		}

		// struct FMemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_RXOU, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// struct FMeshInstancingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshInstancingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ActorClassToUse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, InstanceReplacementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, MeshReplacementMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_RD6L, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bSkipMeshesWithVertexColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bUseHLODVolumes, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_9MNY, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancingSettings, 0x0018);
		}

		// struct FClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_8XGR, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_YAQ7, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0078);
		}

		// struct FSkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_3GSR, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_M8E5, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0058);
		}

		// struct FBoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_BI2B, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0018);
		}

		// struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_Z5TQ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0058);
		}

		// struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_U2QO, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0058);
		}

		// struct FAtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// struct FAudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_W1PU, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// struct FReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_69DU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_CDNJ, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbPluginEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0020);
		}

		// struct FInteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_FYGC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// struct FEditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_LUDI, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0020);
		}

		// struct FEditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_9ERD, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// struct FLaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// struct FParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_CBWX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_KXK3, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// struct FAudioEQEffect
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_2AC8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0038);
		}

		// struct FSoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_G86J, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0018);
		}

		// struct FVirtualTextureLayer
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, bCompressed, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, bHasAlpha, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, CompressionSettings, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureLayer, 0x0004);
		}

		// struct FAnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// struct FAnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_UANV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// struct FAnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_XKJR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// struct FStateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_F8IH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// struct FRootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// struct FComponentSpacePoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0010);
		}

		// struct FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0040);
		}

		// struct FCompressedSegment
		TEST_METHOD(ScriptStruct__Engine__CompressedSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedSegment, UnknownData_OFR0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedSegment, 0x0010);
		}

		// struct FCompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// struct FCurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// struct FScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// struct FRotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// struct FTranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// struct FRawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// struct FAnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// struct FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_7JZ7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x0570);
		}

		// struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_H2VT, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x06F0);
		}

		// struct FCachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_2R4P, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x0020);
		}

		// struct FCachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_4EJM, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// struct FDummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_JQE8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// struct FCanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// struct FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_LFRP, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_DCVM, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, StartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Duration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Settings, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_FC06, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_9JGO, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x0098);
		}

		// struct FRootMotionSource_RadialForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_690W, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_TP7L, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_49VA, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// struct FRootMotionSource_ConstantForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, Force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_WUZU, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// struct FCameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_MEVO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, CalibrationConstant, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x002C);
		}

		// struct FVectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0028);
		}

		// struct FRootMotionSource_JumpForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_QLJI, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_TUY2, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_BNU2, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_BPUT, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// struct FAssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_E075, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// struct FParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// struct FKSphereElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0040);
		}

		// struct FKBoxElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_ORZO, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0058);
		}

		// struct FKSphylElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0050);
		}

		// struct FKTaperedCapsuleElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KTaperedCapsuleElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Length, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, UnknownData_R2T7, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKTaperedCapsuleElem, 0x0058);
		}

		// struct FBlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// struct FCustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, UnknownData_J2AA, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x0020);
		}

		// struct FInterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, Actors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0018);
		}

		// struct FCameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// struct FPurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// struct FNavigationSegmentLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0068);
		}

		// struct FDepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_EC6J, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// struct FFontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_WUSX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// struct FComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_8W8J, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0018);
		}

		// struct FRadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// struct FExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// struct FKAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, TaperedCapsuleElems, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_57AV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0058);
		}

		// struct FCollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_RGX1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, HelpMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_PHAQ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0060);
		}

		// struct FCustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, UnknownData_L1JA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, UnknownData_W333, 0x0013);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x0018);
		}

		// struct FRedirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// struct FBlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// struct FComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0020);
		}

		// struct FComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0080);
		}

		// struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_BAU8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_5HO0, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0020);
		}

		// struct FCachedKeyToActionInfo
		TEST_METHOD(ScriptStruct__Engine__CachedKeyToActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, PlayerInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, UnknownData_7JT3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedKeyToActionInfo, 0x0070);
		}

		// struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_FHCZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_Q5Q5, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_0ZUC, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// struct FLevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_13OZ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, GameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_LRS2, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0080);
		}

		// struct FCollectionScalarParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, UnknownData_OLW7, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x0020);
		}

		// struct FGPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_7RXF, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_HOEW, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_BEJU, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// struct FParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_V5TA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// struct FLODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// struct FNamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// struct FParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_RV63, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_0NNI, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0080);
		}

		// struct FSplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// struct FTimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, UnknownData_5USO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0018);
		}

		// struct FTimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_FY21, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0040);
		}

		// struct FTimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_RBMW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0040);
		}

		// struct FTimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_2RPJ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0040);
		}

		// struct FTimeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_6487, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_VVUZ, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionProperty, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x0098);
		}

		// struct FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_L2FW, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0010);
		}

		// struct FTTEventTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0018);
		}

		// struct FTTFloatTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0018);
		}

		// struct FTTVectorTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0018);
		}

		// struct FTTLinearColorTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0018);
		}

		// struct FScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_QI60, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// struct FBasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// struct FFractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// struct FRigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_R7LL, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// struct FCanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// struct FReplicatedStaticActorDestructionInfo
		TEST_METHOD(ScriptStruct__Engine__ReplicatedStaticActorDestructionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, UnknownData_DT36, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, ObjClass, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedStaticActorDestructionInfo, 0x0028);
		}

		// struct FTransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// struct FTransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// struct FCollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0028);
		}

		// struct FRigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_ND8G, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_ZUYD, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// struct FActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_32NE, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// struct FNamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, UnknownData_G11V, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x0010);
		}

		// struct FOrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_GENT, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// struct FPlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_WOX1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// struct FInputAlphaBoolBlend
		TEST_METHOD(ScriptStruct__Engine__InputAlphaBoolBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, bInitialized, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, UnknownData_3ZKR, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, CustomCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, AlphaBlend, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAlphaBoolBlend, 0x0050);
		}

		// struct FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__Engine__KeyHandleLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleLookupTable, UnknownData_V4EP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleLookupTable, 0x0060);
		}

		// struct FBlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_KLKG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_BUF9, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// struct FBlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_ZSWB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0090);
		}

		// struct FPerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// struct FAnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_Y8QO, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x0010);
		}

		// struct FAnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_Q05G, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x0010);
		}

		// struct FAnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_CYX9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0078);
		}

		// struct FAnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_6TOH, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// struct FAnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_0RCN, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_S4HW, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0010);
		}

		// struct FComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// struct FLocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// struct FNamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_8T5B, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// struct FNamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, UnknownData_YEZG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x0010);
		}

		// struct FNamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, UnknownData_51CA, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Name, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0018);
		}

		// struct FNamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, UnknownData_WJ6H, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x0010);
		}

		// struct FPerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// struct FAssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_N5UU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// struct FNavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_H0LA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// struct FGridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// struct FBPEditorBookmarkNode
		TEST_METHOD(ScriptStruct__Engine__BPEditorBookmarkNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, NodeGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, ParentGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, DisplayName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPEditorBookmarkNode, 0x0038);
		}

		// struct FEditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_8VKW, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0030);
		}

		// struct FBPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// struct FBPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// struct FBPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_MHX4, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00D8);
		}

		// struct FBlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_K17V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// struct FCompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, bExcludeMonolithicHeaders, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_T4D6, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// struct FEventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_D7FV, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// struct FBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_9023, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// struct FPointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_27NT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0008);
		}

		// struct FDebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_V7SR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0190);
		}

		// struct FNodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_QUUQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// struct FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkBaseJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmarkBaseJumpToSettings, UnknownData_YP83, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkBaseJumpToSettings, 0x0001);
		}

		// struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkJumpToSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkJumpToSettings, 0x0001);
		}

		// struct FBookmark2DJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__Bookmark2DJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmark2DJumpToSettings, UnknownData_XK4R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmark2DJumpToSettings, 0x0001);
		}

		// struct FCachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_VSKS, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0028);
		}

		// struct FCachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_2XQJ, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x0020);
		}

		// struct FCachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_U0AH, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0018);
		}

		// struct FGraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// struct FPredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, UnknownData_MKL3, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, HitResult, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00B8);
		}

		// struct FUserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_RB87, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// struct FGenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// struct FCollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x0008);
		}

		// struct FTimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// struct FDebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_7DX3, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// struct FFormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_747R, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_UENW, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// struct FLayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_UHE3, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// struct FLightmassPointLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// struct FScalarMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x0010);
		}

		// struct FVectorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x0010);
		}

		// struct FColorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x0010);
		}

		// struct FMaterialAttributesInput : public FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, UnknownData_OLB2, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0018);
		}

		// struct FMaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// struct FMaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// struct FMaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_IMJ9, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_82A3, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// struct FNodeItem
		TEST_METHOD(ScriptStruct__Engine__NodeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, ParentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, UnknownData_9BQF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeItem, 0x0040);
		}

		// struct FRadialDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// struct FPOV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// struct FAnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_VHV9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_8LHP, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_Z27N, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedUpdateFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedEvalFrames, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x0088);
		}

		// struct FAnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, UnknownData_V7NG, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x0010);
		}

		// struct FAnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// struct FMTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// struct FOverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_XTM2, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_3IB6, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// struct FSwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_QE61, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// struct FLightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_BC3L, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_HB26, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// struct FNode
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_QA1M, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// struct FDevice
		TEST_METHOD(ScriptStruct__HapticsManager__Device)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDevice, DeviceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDevice, Address, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDevice, Position, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDevice, Battery, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDevice, UnknownData_3WWD, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDevice, ConnectionStatus, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDevice, IsPaired, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDevice, UnknownData_IXDN, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDevice, 0x0050);
		}

		// struct FPathPoint
		TEST_METHOD(ScriptStruct__HapticsManager__PathPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathPoint, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathPoint, Intensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathPoint, MotorCount, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPathPoint, 0x0010);
		}

		// struct FRotationOption
		TEST_METHOD(ScriptStruct__HapticsManager__RotationOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationOption, OffsetAngleX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationOption, OffsetY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationOption, 0x0008);
		}

		// struct FScaleOption
		TEST_METHOD(ScriptStruct__HapticsManager__ScaleOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleOption, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleOption, Duration, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleOption, 0x0008);
		}

		// struct FDotPoint
		TEST_METHOD(ScriptStruct__HapticsManager__DotPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDotPoint, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDotPoint, Intensity, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDotPoint, 0x0008);
		}

		// struct FBodyHaptics
		TEST_METHOD(ScriptStruct__HapticsManager__BodyHaptics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyHaptics, HeadHaptics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyHaptics, ChestHaptics, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyHaptics, LArmHaptics, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyHaptics, RArmHaptics, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyHaptics, 0x0020);
		}

		// struct FHitHaptics : public FTableRowBase
		TEST_METHOD(ScriptStruct__HapticsManager__HitHaptics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitHaptics, FeedbackMotors, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitHaptics, UnknownData_E24B, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitHaptics, 0x0010);
		}

		// struct FRegisterRequest
		TEST_METHOD(ScriptStruct__HapticsManager__RegisterRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegisterRequest, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegisterRequest, UnknownData_CTVJ, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRegisterRequest, 0x0020);
		}

		// struct FHapticFrame
		TEST_METHOD(ScriptStruct__HapticsManager__HapticFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFrame, DurationMillis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFrame, UnknownData_N03B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFrame, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFrame, PathPoints, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFrame, DotPoints, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFrame, 0x0038);
		}

		// struct FSubmitRequest
		TEST_METHOD(ScriptStruct__HapticsManager__SubmitRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmitRequest, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmitRequest, Key, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmitRequest, Parameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmitRequest, Frame, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmitRequest, 0x00A8);
		}

		// struct FPlayerRequest
		TEST_METHOD(ScriptStruct__HapticsManager__PlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRequest, Register, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRequest, Submit, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerRequest, 0x0020);
		}

		// struct FPlayerResponse
		TEST_METHOD(ScriptStruct__HapticsManager__PlayerResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerResponse, UnknownData_X2QG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerResponse, 0x0048);
		}

		// struct FHapticFeedback
		TEST_METHOD(ScriptStruct__HapticsManager__HapticFeedback)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedback, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedback, Mode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedback, UnknownData_8LYS, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedback, Values, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedback, 0x0018);
		}

		// struct FCustomMeshTriangle
		TEST_METHOD(ScriptStruct__CustomMeshComponent__CustomMeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomMeshTriangle, 0x0024);
		}

		// struct FJsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JsonString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_OVZM, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// struct FUdpMockMessage
		TEST_METHOD(ScriptStruct__UdpMessaging__UdpMockMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUdpMockMessage, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUdpMockMessage, 0x0010);
		}

		// struct FKey
		TEST_METHOD(ScriptStruct__InputCore__Key)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_9A9A, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// struct FSynth1PatchCable
		TEST_METHOD(ScriptStruct__Synthesis__Synth1PatchCable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Destination, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, UnknownData_XJ52, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth1PatchCable, 0x0008);
		}

		// struct FEpicSynth1Patch
		TEST_METHOD(ScriptStruct__Synthesis__EpicSynth1Patch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, UnknownData_ES01, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchCables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEpicSynth1Patch, 0x0018);
		}

		// struct FModularSynthPreset : public FTableRowBase
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_WZ65, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_C203, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Gain, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Octave, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Semitones, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Cents, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1PulseWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Type, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_XHHQ, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Gain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Octave, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Semitones, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Cents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2PulseWidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Portamento, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_O8GX, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Spread, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Pan, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Frequency, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Gain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Type, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Mode, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1PatchType, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_RJPG, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Frequency, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Gain, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Type, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Mode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2PatchType, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_FWIY, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, GainDb, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, AttackTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, DecayTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, SustainGain, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ReleaseTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvPatchType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvBiasPatchType, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_5EHE, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_3ON8, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDepth, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeAttackTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDecayTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeSustainGain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeReleaseTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_HIAF, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterFrequency, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterQ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterAlgorithm, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_YREY, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_SIN0, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_RGUQ, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayFeedback, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayWetlevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayRatio, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_ATQN, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusDepth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFeedback, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFrequency, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_JI3D, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Patches, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPreset, 0x00E0);
		}

		// struct FModularSynthPresetBankEntry
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPresetBankEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, PresetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, Preset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPresetBankEntry, 0x00F0);
		}

		// struct FPatchId
		TEST_METHOD(ScriptStruct__Synthesis__PatchId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatchId, ID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPatchId, 0x0004);
		}

		// struct FSourceEffectBitCrusherSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedSampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedBits, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherSettings, 0x0008);
		}

		// struct FSourceEffectChorusSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Spread, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusSettings, 0x0018);
		}

		// struct FSourceEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_9WM4, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_AGAL, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectDynamicsProcessorSettings, 0x0028);
		}

		// struct FSourceEffectEnvelopeFollowerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEnvelopeFollowerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, AttackTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, ReleaseTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, PeakMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, bIsAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, UnknownData_KWES, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEnvelopeFollowerSettings, 0x000C);
		}

		// struct FSourceEffectEQBand
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, UnknownData_5B0B, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQBand, 0x0010);
		}

		// struct FSourceEffectEQSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQSettings, 0x0010);
		}

		// struct FSourceEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterCircuit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_74UU, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, CutoffFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterSettings, 0x000C);
		}

		// struct FSourceEffectFoldbackDistortionSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFoldbackDistortionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, InputGainDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, ThresholdDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, OutputGainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFoldbackDistortionSettings, 0x000C);
		}

		// struct FSourceEffectPannerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPannerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Pan, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPannerSettings, 0x0004);
		}

		// struct FSourceEffectPhaserSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPhaserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, WetLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, LFOType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UseQuadraturePhase, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UnknownData_X0IQ, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPhaserSettings, 0x0010);
		}

		// struct FSourceEffectRingModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectRingModulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, ModulatorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_8CFY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Depth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, DryLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, WetLevel, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectRingModulationSettings, 0x0014);
		}

		// struct FSourceEffectSimpleDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectSimpleDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, SpeedOfSound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DelayAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DryAmount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, WetAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, Feedback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, UnknownData_EYRJ, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectSimpleDelaySettings, 0x0018);
		}

		// struct FSourceEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectStereoDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_YSZX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, WetLevel, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectStereoDelaySettings, 0x0014);
		}

		// struct FSourceEffectWaveShaperSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectWaveShaperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, OutputGainDb, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectWaveShaperSettings, 0x0008);
		}

		// struct FSubmixEffectDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, DelayLength, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDelaySettings, 0x000C);
		}

		// struct FSubmixEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterAlgorithm, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, UnknownData_O8WM, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFilterSettings, 0x000C);
		}

		// struct FSubmixEffectFlexiverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFlexiverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, PreDelay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, DecayTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, RoomDampening, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, Complexity, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFlexiverbSettings, 0x0010);
		}

		// struct FTapDelayInfo
		TEST_METHOD(ScriptStruct__Synthesis__TapDelayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapLineMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, UnknownData_FM3K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, DelayLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, OutputChannel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, PanInDegrees, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapId, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTapDelayInfo, 0x0018);
		}

		// struct FSynthKnobStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthKnobStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnob, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnobOverlay, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnob, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnobOverlay, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MinValueAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MaxValueAngle, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, KnobSize, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, UnknownData_EY1U, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthKnobStyle, 0x0238);
		}

		// struct FSynthSlateStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthSlateStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, SizeType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, ColorStyle, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, UnknownData_SBXZ, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthSlateStyle, 0x0010);
		}

		// struct FSubmixEffectTapDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectTapDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, Taps, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectTapDelaySettings, 0x0018);
		}

		// struct FSynth2DSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__Synth2DSliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalThumbImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledThumbImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledBarImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BackgroundImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BarThickness, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, UnknownData_E5YT, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth2DSliderStyle, 0x02B8);
		}

		// struct FBlackboardKeySelector
		TEST_METHOD(ScriptStruct__AIModule__BlackboardKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, AllowedTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_FKXD, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_W8OW, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardKeySelector, 0x0028);
		}

		// struct FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, UnknownData_84QT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, CachedProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataBinding, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataField, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderValue, 0x0020);
		}

		// struct FAIDataProviderTypedValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderTypedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, PropertyType, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderTypedValue, 0x0028);
		}

		// struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderBoolValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, UnknownData_ALVU, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderBoolValue, 0x0030);
		}

		// struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, UnknownData_CVUK, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderFloatValue, 0x0030);
		}

		// struct FAIRequestID
		TEST_METHOD(ScriptStruct__AIModule__AIRequestID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRequestID, RequestID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRequestID, 0x0004);
		}

		// struct FAIStimulus
		TEST_METHOD(ScriptStruct__AIModule__AIStimulus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ExpirationAge, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Strength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, StimulusLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ReceiverLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_8OQP, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_PJEL, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_XCZI, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIStimulus, 0x0048);
		}

		// struct FActorPerceptionBlueprintInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionBlueprintInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, LastSensedStimuli, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, UnknownData_WTSN, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionBlueprintInfo, 0x0020);
		}

		// struct FAIDamageEvent
		TEST_METHOD(ScriptStruct__AIModule__AIDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, HitLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, UnknownData_H3U5, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, DamagedActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageEvent, 0x0030);
		}

		// struct FAINoiseEvent
		TEST_METHOD(ScriptStruct__AIModule__AINoiseEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_6MEJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, NoiseLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Loudness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, MaxRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Tag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_YYE1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAINoiseEvent, 0x0030);
		}

		// struct FAIPredictionEvent
		TEST_METHOD(ScriptStruct__AIModule__AIPredictionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, Requestor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, PredictedActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, UnknownData_ZSCE, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPredictionEvent, 0x0018);
		}

		// struct FAITeamStimulusEvent
		TEST_METHOD(ScriptStruct__AIModule__AITeamStimulusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, UnknownData_Y6QA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Broadcaster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Enemy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITeamStimulusEvent, 0x0038);
		}

		// struct FAITouchEvent
		TEST_METHOD(ScriptStruct__AIModule__AITouchEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, UnknownData_0Z2A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, TouchReceiver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, OtherActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITouchEvent, 0x0020);
		}

		// struct FAISenseAffiliationFilter
		TEST_METHOD(ScriptStruct__AIModule__AISenseAffiliationFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISenseAffiliationFilter, UnknownData_P9WB, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISenseAffiliationFilter, 0x0004);
		}

		// struct FAIMoveRequest
		TEST_METHOD(ScriptStruct__AIModule__AIMoveRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, GoalActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, UnknownData_MM9G, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIMoveRequest, 0x0040);
		}

		// struct FBTDecoratorLogic
		TEST_METHOD(ScriptStruct__AIModule__BTDecoratorLogic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Operation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, UnknownData_RV6Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Number, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTDecoratorLogic, 0x0004);
		}

		// struct FBehaviorTreeTemplateInfo
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeTemplateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Template, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, UnknownData_QVUO, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorTreeTemplateInfo, 0x0018);
		}

		// struct FBlackboardEntry
		TEST_METHOD(ScriptStruct__AIModule__BlackboardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, KeyType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, UnknownData_O6GJ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardEntry, 0x0018);
		}

		// struct FBTCompositeChild
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeChild)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildComposite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildTask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, Decorators, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, DecoratorOps, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTCompositeChild, 0x0030);
		}

		// struct FAIDynamicParam
		TEST_METHOD(ScriptStruct__AIModule__AIDynamicParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, UnknownData_OVLY, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, BBKey, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDynamicParam, 0x0038);
		}

		// struct FEQSParametrizedQueryExecutionRequest
		TEST_METHOD(ScriptStruct__AIModule__EQSParametrizedQueryExecutionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryConfig, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, EQSQueryBlackboardKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, RunMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_8GWY, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_GNJB, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEQSParametrizedQueryExecutionRequest, 0x0048);
		}

		// struct FEnvNamedValue
		TEST_METHOD(ScriptStruct__AIModule__EnvNamedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, UnknownData_Q3BC, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvNamedValue, 0x0010);
		}

		// struct FCrowdAvoidanceConfig
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, VelocityBias, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, DesiredVelocityWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CurrentVelocityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, SideBiasWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CustomPatternIdx, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDivisions, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveRings, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDepth, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceConfig, 0x001C);
		}

		// struct FCrowdAvoidanceSamplingPattern
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceSamplingPattern)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Angles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Radii, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceSamplingPattern, 0x0020);
		}

		// struct FEnvTraceData
		TEST_METHOD(ScriptStruct__AIModule__EnvTraceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, VersionNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_GQ0L, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, NavigationFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectDown, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentZ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, PostProjectionVerticalOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceChannel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, SerializedChannel, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceShape, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceMode, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_Z36Y, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvTraceData, 0x0030);
		}

		// struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderIntValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, UnknownData_FGQ5, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderIntValue, 0x0030);
		}

		// struct FEnvDirection
		TEST_METHOD(ScriptStruct__AIModule__EnvDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineFrom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, DirMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, UnknownData_G8NT, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvDirection, 0x0020);
		}

		// struct FEnvQueryInstanceCache
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryInstanceCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, Template, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, UnknownData_GOBQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryInstanceCache, 0x0178);
		}

		// struct FPawnActionStack
		TEST_METHOD(ScriptStruct__AIModule__PawnActionStack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionStack, TopAction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionStack, 0x0008);
		}

		// struct FPawnActionEvent
		TEST_METHOD(ScriptStruct__AIModule__PawnActionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, UnknownData_X2A2, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionEvent, 0x0018);
		}

		// struct FAIDataProviderStructValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderStructValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderStructValue, UnknownData_NBDZ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderStructValue, 0x0030);
		}

		// struct FAISightEvent
		TEST_METHOD(ScriptStruct__AIModule__AISightEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, UnknownData_WMJB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, SeenActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, Observer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISightEvent, 0x0018);
		}

		// struct FEnvQueryRequest
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, World, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, UnknownData_XZ45, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryRequest, 0x0068);
		}

		// struct FEnvQueryResult
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_M13T, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, ItemType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_MD8C, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, OptionIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_FY7B, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryResult, 0x0040);
		}

		// struct FGenericTeamId
		TEST_METHOD(ScriptStruct__AIModule__GenericTeamId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericTeamId, TeamId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericTeamId, 0x0001);
		}

		// struct FEnvOverlapData
		TEST_METHOD(ScriptStruct__AIModule__EnvOverlapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ShapeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapChannel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapShape, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_OQL6, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_JZZ8, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvOverlapData, 0x0020);
		}

		// struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaInputType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, bAlphaBoolEnabled, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_460X, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaBoolBlend, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaCurveName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_E7A8, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x00F0);
		}

		// struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_9D1X, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_AU64, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendFilter, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSampleDataCache, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x0128);
		}

		// struct FAnimNode_AimOffsetLookAt : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, bIsLODEnabled, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_NOFG, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_NQ8P, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketBoneReference, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_SHR1, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketLocalTransform, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketBoneReference, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_SWS3, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketLocalTransform, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x0210);
		}

		// struct FAnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, UnknownData_5C3N, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0050);
		}

		// struct FAnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_LBKF, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_GTXM, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularXAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularYAngle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularZAngle, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_AT74, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, bLinearFullyLocked, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_B1NI, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x005C);
		}

		// struct FAnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_0LOP, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0030);
		}

		// struct FAnimNode_AnimDynamics : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_3QGC, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bChain, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_LQGR, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityOverride, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bUseGravityOverride, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bLinearSpring, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bAngularSpring, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_FIFO, 0x0173);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bEnableWind, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bWindWasEnabled, 0x017D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_T3NR, 0x017E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearAccScale, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearVelScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bOverrideLinearDamping, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_9JE4, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bOverrideAngularDamping, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_CFQ5, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bOverrideAngularBias, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_41PC, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bDoUpdate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bDoEval, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_E9BH, 0x01C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bUsePlanarLimit, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_4FD7, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bUseSphericalLimits, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_EISK, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_35YT, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_0FXT, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x03A0);
		}

		// struct FAnimNode_ApplyAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Additive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, ActualAlpha, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaInputType, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, bAlphaBoolEnabled, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_ALWD, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaBoolBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaCurveName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBiasClamp, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x00F0);
		}

		// struct FAngularRangeLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AngularRangeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, Bone, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularRangeLimit, 0x0030);
		}

		// struct FAnimNode_ApplyLimits : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyLimits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularRangeLimits, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularOffsets, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyLimits, 0x0110);
		}

		// struct FBlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_3CFO, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x0038);
		}

		// struct FAnimNode_BlendBoneByChannel : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_4NIX, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_1A68, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, InternalBlendAlpha, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, bBIsRelevant, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_MGBE, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, ValidBoneEntries, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x0090);
		}

		// struct FAnimNode_BlendListBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_QPJF, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, Blends, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendWeights, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, RemainingBlendTimes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, LastActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_D8JW, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, PerBoneSampleData, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_ZTL8, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_Y2H8, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x00C8);
		}

		// struct FAnimNode_BlendListByBool : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_1BW9, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00D0);
		}

		// struct FAnimNode_BlendListByEnum : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_5QN0, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00E0);
		}

		// struct FAnimNode_BlendListByInt : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_GOX3, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00D0);
		}

		// struct FAnimNode_BlendSpaceEvaluator : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_CRXJ, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x0130);
		}

		// struct FAnimNode_BoneDrivenController : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_5CIY, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, bUseRange, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_OVAU, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_NHZ1, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ParameterName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetComponent, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_HOC1, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_HEHT, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_QVSZ, 0x0161);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0168);
		}

		// struct FSocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_XVIG, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0040);
		}

		// struct FBoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_G3UV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0060);
		}

		// struct FAnimNode_CCDIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CCDIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocationSpace, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_5HVB, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, TipBone, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RootBone, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, Precision, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, MaxIterations, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bStartFromTail, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bEnableRotationLimit, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_4CAK, 0x019A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RotationLimitPerJoints, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CCDIK, 0x01B0);
		}

		// struct FConstraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_1CGY, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x0028);
		}

		// struct FAnimNode_Constraint : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_PBHX, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x0138);
		}

		// struct FAnimNode_CopyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_L1N7, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x0128);
		}

		// struct FAnimNode_CopyBoneDelta : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x0130);
		}

		// struct FAnimNode_CopyPoseFromMesh : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bUseAttachedParent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bCopyCurves, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_EQJ8, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x00E8);
		}

		// struct FAnimNode_CurveSource : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, UnknownData_BX11, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0060);
		}

		// struct FAnimNode_Fabrik : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_26SZ, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformBone, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_1O68, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, bEnableDebugDraw, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_E41R, 0x01E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x01F0);
		}

		// struct FAnimNode_HandIKRetargeting : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_CETG, 0x0164);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0168);
		}

		// struct FAnimNode_LayeredBoneBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bHasRelevantPoses, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LODThreshold, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_6PFW, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00D8);
		}

		// struct FAnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, HingeRotationAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, UnknownData_PXS8, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, UnknownData_8OIA, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x0040);
		}

		// struct FAnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_S57K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x00B0);
		}

		// struct FAnimNode_LegIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsData, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, UnknownData_PSNI, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x0120);
		}

		// struct FIKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_L03K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0040);
		}

		// struct FIKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_5OAK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x0040);
		}

		// struct FAnimNode_LookAt : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtSocket, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_6VPV, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtAxis, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_SDIE, 0x019D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, CustomLookAtAxis, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUpAxis, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_Q5OR, 0x01BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, CustomLookUpAxis, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_GO5Z, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_3KN9, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x0220);
		}

		// struct FAnimNode_MakeDynamicAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Base, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Additive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_JUV7, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0058);
		}

		// struct FAnimNode_ModifyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_XKZ8, 0x0132);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x0138);
		}

		// struct FAnimNode_ModifyCurve : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_DQDB, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, LastCurveValues, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_B79O, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0080);
		}

		// struct FAnimNode_MultiWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_1B86, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_MWU9, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0070);
		}

		// struct FAnimNode_ObserveBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_RW4V, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Rotation, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Scale, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x0130);
		}

		// struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_MFDG, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x0090);
		}

		// struct FAnimNode_PoseBlendNode : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_SOHP, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x00B0);
		}

		// struct FAnimNode_PoseByName : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_S7BQ, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x00A0);
		}

		// struct FRBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_JLZ2, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x0010);
		}

		// struct FPoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// struct FPoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_Y922, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_GBVR, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00A8);
		}

		// struct FAnimNode_PoseDriver : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, bOnlyDriveSelectedBones, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_VGI2, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_60FT, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, TwistAxis, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, Type, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_JY6O, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RadialScaling, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_SB1X, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0160);
		}

		// struct FAnimNode_PoseSnapshot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Mode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_X8SW, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_67WZ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x00B0);
		}

		// struct FRandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_R0EQ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0058);
		}

		// struct FAnimNode_RandomPlayer : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_5PWH, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_2ZAS, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0090);
		}

		// struct FAnimNode_MeshSpaceRefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0030);
		}

		// struct FAnimNode_RefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_4580, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0038);
		}

		// struct FAnimNode_ResetRoot : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ResetRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ResetRoot, UnknownData_ZUFC, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ResetRoot, 0x0100);
		}

		// struct FAnimNode_RigidBody : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverridePhysicsAsset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideWorldGravity, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ExternalForce, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearAccScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearVelScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentAppliedLinearAccClamp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverlapChannel, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bEnableWorldGeometry, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_HX3X, 0x0136);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimulationSpace, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_JJUL, 0x0136);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_4F57, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, BaseBoneRef, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bOverrideWorldGravity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_3N94, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, CachedBoundsScale, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bTransferBoneVelocities, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bFreezeIncomingPoseOnStart, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bComponentSpaceSimulation, 0x0162);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_RUPW, 0x0163);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody, 0x0570);
		}

		// struct FAnimNode_Root : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Root)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0040);
		}

		// struct FAnimNode_RotateRootBone : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, PitchScaleBiasClamp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, YawScaleBiasClamp, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, ActualPitch, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, ActualYaw, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_9K76, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x00C0);
		}

		// struct FAnimNode_RotationMultiplier : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_O8TA, 0x0126);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x0128);
		}

		// struct FAnimNode_RotationOffsetBlendSpace : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bIsLODEnabled, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaInputType, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_Y7H6, 0x013E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, ActualAlpha, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_6X74, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaCurveName, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x01E0);
		}

		// struct FAnimNode_ScaleChainLength : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_A9I3, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_GHC7, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ActualAlpha, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, bBoneIndicesCached, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_0YXH, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x00B0);
		}

		// struct FAnimNode_SequenceEvaluator : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_P462, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bReinitialized, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_MDLU, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0070);
		}

		// struct FAnimNode_Slot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_NNVL, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0068);
		}

		// struct FSplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, UnknownData_IVL3, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0020);
		}

		// struct FAnimNode_SplineIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_1G1L, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_4G0T, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_77DL, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneSpline, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, OriginalSplineLength, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_DAZA, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, CachedBoneReferences, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, CachedBoneLengths, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, CachedOffsetRotations, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0290);
		}

		// struct FAnimNode_SpringBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bLimitDisplacement, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_LUNL, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bNoZSpring, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bTranslateX, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bTranslateY, 0x011E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bTranslateZ, 0x011F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bRotateX, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bRotateY, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bRotateZ, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_0WRI, 0x0123);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0158);
		}

		// struct FAnimNode_StateResult : public FAnimNode_Root
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_StateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateResult, 0x0040);
		}

		// struct FRotationLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMax, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationLimit, 0x0018);
		}

		// struct FAnimNode_Trail : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_T2UQ, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnwindingSize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScaleInputProcessor, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationLimits, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationOffsets, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, PlanarLimits, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, LastBoneRotationAnimAlphaBlend, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_TQ9Y, 0x021C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x0280);
		}

		// struct FReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0028);
		}

		// struct FAnimNode_TwistCorrectiveNode : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_8GHA, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, Curve, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_1UV2, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x0178);
		}

		// struct FAnimNode_TwoBoneIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_WFDB, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StretchLimits, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_7Y21, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_37W4, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorSpaceBoneName, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_M4Q1, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_XH4P, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetSpaceBoneName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_TT2U, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, bAllowTwist, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_Q19V, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, bNoTwist, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_0DFN, 0x0235);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x0240);
		}

		// struct FAnimNode_TwoWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaInputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_16CG, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bAlphaBoolEnabled, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_ZC5O, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaBoolBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaCurveName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBiasClamp, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, InternalBlendAlpha, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bAIsRelevant, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bBIsRelevant, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bResetChildOnActivation, 0x00F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_LYR7, 0x00F7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x00F8);
		}

		// struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_YGB0, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x0790);
		}

		// struct FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// struct FRBFTarget : public FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, ScaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_IY2T, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x0088);
		}

		// struct FEventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_MSLU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00B8);
		}

		// struct FWidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// struct FDynamicPropertyPath : public FCachedPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0028);
		}

		// struct FAnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// struct FSlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_NPTK, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// struct FShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0003);
		}

		// struct FMovieScene2DTransformMask
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformMask, 0x0004);
		}

		// struct FSlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// struct FNamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0010);
		}

		// struct FPaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_3CDN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// struct FWidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_G70F, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0028);
		}

		// struct FDelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_GUNS, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0050);
		}

		// struct FWidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_FF0P, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, CustomDelegate, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x0028);
		}

		// struct FMovieScene2DTransformSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Translation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Rotation, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Scale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Shear, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, BlendType, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, UnknownData_NNO6, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Mask, 0x04AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformSectionTemplate, 0x04B0);
		}

		// struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_EIRY, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x02D0);
		}

		// struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0060);
		}

		// struct FRichTextStyleRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichTextStyleRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextStyleRow, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextStyleRow, 0x01F0);
		}

		// struct FRichImageRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichImageRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichImageRow, Brush, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichImageRow, 0x0090);
		}

		// struct FProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_SUYD, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// struct FProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x004C);
		}

		// struct FProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_F5O6, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// struct FLandscapeProxyMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProxyMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, UnknownData_YOSE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProxyMaterialOverride, 0x0010);
		}

		// struct FWeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_R43M, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// struct FLandscapeComponentMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeComponentMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, UnknownData_3G9F, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeComponentMaterialOverride, 0x0010);
		}

		// struct FGrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_R744, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLOD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_F26R, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, LightingChannels, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bCastDynamicShadow, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bKeepInstanceBufferCPUCopy, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_O5QH, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0048);
		}

		// struct FLandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_PLF7, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// struct FLandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0040);
		}

		// struct FLandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_4AP8, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// struct FGrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Input, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_P59E, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0028);
		}

		// struct FLayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_DI4W, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_0IEL, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_IMHV, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_NVI6, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0058);
		}

		// struct FLandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0028);
		}

		// struct FGizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_HV79, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// struct FLandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0010);
		}

		// struct FLandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_5JUP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// struct FLandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// struct FLandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_T0XG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// struct FLandscapeWeightmapUsage
		TEST_METHOD(ScriptStruct__Landscape__LandscapeWeightmapUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeWeightmapUsage, ChannelUsage, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeWeightmapUsage, 0x0020);
		}

		// struct FForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_WVM6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// struct FForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_3H1L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// struct FForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_P4X4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// struct FLandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_6XVW, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_HDND, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_RRTM, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// struct FImageWriteOptions
		TEST_METHOD(ScriptStruct__ImageWriteQueue__ImageWriteOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_OH8Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, OnComplete, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, CompressionQuality, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bOverwriteFile, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bAsync, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_OJU3, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageWriteOptions, 0x0060);
		}

		// struct FSubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_ESMC, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_ENWH, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0028);
		}

		// struct FSubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_84K5, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// struct FSubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// struct FSubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DryLevel, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0034);
		}

		// struct FBlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_DNSO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x00B8);
		}

		// struct FPIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// struct FPlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, Platform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, bAllowCrossplay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_5TR5, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0050);
		}

		// struct FPartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_1WR9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0040);
		}

		// struct FReplicatedVehicleState
		TEST_METHOD(ScriptStruct__PhysXVehicles__ReplicatedVehicleState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, SteeringInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, ThrottleInput, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, BrakeInput, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, HandbrakeInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, CurrentGear, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedVehicleState, 0x0014);
		}

		// struct FVehicleInputRate
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleInputRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, RiseRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, FallRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleInputRate, 0x0008);
		}

		// struct FTireConfigMaterialFriction
		TEST_METHOD(ScriptStruct__PhysXVehicles__TireConfigMaterialFriction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, UnknownData_7PNV, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireConfigMaterialFriction, 0x0010);
		}

		// struct FVehicleDifferential4WData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleDifferential4WData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, DifferentialType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, UnknownData_WOSR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontRearSplit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontLeftRightSplit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearLeftRightSplit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, CentreBias, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearBias, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDifferential4WData, 0x001C);
		}

		// struct FVehicleGearData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleGearData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, Ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleGearData, 0x000C);
		}

		// struct FVehicleTransmissionData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleTransmissionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, bUseGearAutoBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_F9O9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearSwitchTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearAutoBoxLatency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, FinalRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, NeutralGearUpRatio, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ClutchStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_NHRF, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTransmissionData, 0x0030);
		}

		// struct FAnimNode_WheelHandler : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__PhysXVehicles__AnimNode_WheelHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WheelHandler, UnknownData_M805, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_WheelHandler, 0x0108);
		}

		// struct FVehicleAnimInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleAnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleAnimInstanceProxy, UnknownData_GGOW, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleAnimInstanceProxy, 0x0580);
		}

		// struct FWheelSetup
		TEST_METHOD(ScriptStruct__PhysXVehicles__WheelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, WheelClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, AdditionalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, bDisableSteering, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, UnknownData_VTBJ, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelSetup, 0x0020);
		}

		// struct FVehicleEngineData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleEngineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MaxRPM, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MOI, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateFullThrottle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchEngaged, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchDisengaged, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, UnknownData_4MHK, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineData, 0x0090);
		}

		// struct FStructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_VAMI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_QU7H, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_843G, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// struct FStructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, UnknownData_3ZDJ, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, Bitfield, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0008);
		}

		// struct FStructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPtr, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x0010);
		}

		// struct FStructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x00F0);
		}

		// struct FStructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_42WK, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0040);
		}

		// struct FStructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, String, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_EJL5, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Text, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_23PF, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x0060);
		}

		// struct FStructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Maps, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x01D8);
		}

		// struct FAxis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_8TT3, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// struct FConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_KUSG, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// struct FConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_IJM0, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// struct FFilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// struct FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_DFKS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_1XAI, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// struct FAimConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_OGSK, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUpTarget, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0040);
		}

		// struct FTransformConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_R838, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// struct FConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// struct FTransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_G34Q, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_3PHX, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0028);
		}

		// struct FConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_YAXP, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_ARJW, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// struct FTransformFilter
		TEST_METHOD(ScriptStruct__AnimationCore__TransformFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, TranslationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, RotationFilter, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, ScaleFilter, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformFilter, 0x0009);
		}

		// struct FEulerTransform
		TEST_METHOD(ScriptStruct__AnimationCore__EulerTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Scale, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEulerTransform, 0x0024);
		}

		// struct FNodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// struct FNodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0010);
		}

		// struct FNodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// struct FNodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_RJ2R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// struct FLevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_SUEA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// struct FLevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_DTWF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// struct FLevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0038);
		}

		// struct FLevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// struct FLevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, AnimSequenceInstances, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x00A0);
		}

		// struct FLevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_VLKR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x000C);
		}

		// struct FLevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotSourceTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTimecode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x0088);
		}

		// struct FBoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_SHV3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// struct FLevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_A4FR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// struct FAssetData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_J6A3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0050);
		}

		// struct FARFilter
		TEST_METHOD(ScriptStruct__AssetRegistry__ARFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_9GVU, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_MHCV, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00E8);
		}

		// struct FTagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0018);
		}

		// struct FAssetBundleEntry
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0028);
		}

		// struct FAssetBundleData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// struct FMeshElementAttributeValue
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeValue, UnknownData_5Y94, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeValue, 0x0050);
		}

		// struct FSubdividedWireEdge
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedWireEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex0PositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex1PositionIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, UnknownData_KK6T, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedWireEdge, 0x000C);
		}

		// struct FPolygonGroupForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonGroupID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupForPolygon, 0x0008);
		}

		// struct FVertexIndexAndInstanceID
		TEST_METHOD(ScriptStruct__EditableMesh__VertexIndexAndInstanceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, ContourIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, VertexInstanceID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexIndexAndInstanceID, 0x0008);
		}

		// struct FVertexInstancesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstancesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstancesForPolygonHole, VertexIndicesAndInstanceIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstancesForPolygonHole, 0x0010);
		}

		// struct FChangeVertexInstancesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__ChangeVertexInstancesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, UnknownData_JZKE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PerimeterVertexIndicesAndInstanceIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, VertexIndicesAndInstanceIDsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChangeVertexInstancesForPolygon, 0x0028);
		}

		// struct FMeshElementAttributeData
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, UnknownData_GVYQ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeData, 0x0060);
		}

		// struct FMeshElementAttributeList
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeList, Attributes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeList, 0x0010);
		}

		// struct FEdgeToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__EdgeToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, ConnectedPolygons, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, EdgeAttributes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, OriginalEdgeID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, UnknownData_PEQA, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeToCreate, 0x0030);
		}

		// struct FPolygonGroupToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, PolygonGroupAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, OriginalPolygonGroupID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, UnknownData_M32X, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupToCreate, 0x0018);
		}

		// struct FVertexAndAttributes
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAndAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, PolygonVertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAndAttributes, 0x0018);
		}

		// struct FPolygonHoleVertices
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonHoleVertices)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonHoleVertices, HoleVertices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonHoleVertices, 0x0010);
		}

		// struct FPolygonToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_V8DH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PerimeterVertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonHoles, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, OriginalPolygonID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonEdgeHardness, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_2GDS, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToCreate, 0x0030);
		}

		// struct FVertexInstanceToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstanceToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_8CXY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexInstanceAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, OriginalVertexInstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_QVI3, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceToCreate, 0x0020);
		}

		// struct FVertexToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, VertexAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, OriginalVertexID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, UnknownData_EPKY, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToCreate, 0x0018);
		}

		// struct FSubdividedQuadVertex
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuadVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexPositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexBinormalSign, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuadVertex, 0x0034);
		}

		// struct FSubdividedQuad
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuad, 0x00D0);
		}

		// struct FSubdivisionLimitSection
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitSection, SubdividedQuads, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitSection, 0x0010);
		}

		// struct FSubdivisionLimitData
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, VertexPositions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, Sections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, SubdividedWireEdges, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitData, 0x0030);
		}

		// struct FVertexToMove
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, NewVertexPosition, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToMove, 0x0010);
		}

		// struct FAttributesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, UnknownData_0JWK, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForEdge, 0x0018);
		}

		// struct FVerticesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__VerticesForEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVerticesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVerticesForEdge, NewVertexID0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVerticesForEdge, NewVertexID1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVerticesForEdge, 0x000C);
		}

		// struct FVertexAttributesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygonHole, VertexAttributeList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygonHole, 0x0010);
		}

		// struct FVertexAttributesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, UnknownData_1MCI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PerimeterVertexAttributeLists, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, VertexAttributeListsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygon, 0x0028);
		}

		// struct FAttributesForVertexInstance
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertexInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, UnknownData_OWP1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertexInstance, 0x0018);
		}

		// struct FAttributesForVertex
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, UnknownData_O2D1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertex, 0x0018);
		}

		// struct FVertexPair
		TEST_METHOD(ScriptStruct__EditableMesh__VertexPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexPair, 0x0008);
		}

		// struct FPolygonToSplit
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToSplit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, UnknownData_Q9E7, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, VertexPairsToSplitAt, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToSplit, 0x0018);
		}

		// struct FRenderingPolygonGroup
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygonGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, UnknownData_HTF6, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygonGroup, 0x0048);
		}

		// struct FTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__EditableMesh__TriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleID, 0x0004);
		}

		// struct FRenderingPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, UnknownData_1TR5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygon, 0x0018);
		}

		// struct FSteamLobbyDataEntry
		TEST_METHOD(ScriptStruct__Steamworks__SteamLobbyDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyDataEntry, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyDataEntry, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamLobbyDataEntry, 0x0020);
		}

		// struct FSteamServerInfo
		TEST_METHOD(ScriptStruct__Steamworks__SteamServerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerInfo, MapName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerInfo, GameTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerInfo, Ping, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerInfo, UnknownData_00ML, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerInfo, ConnectAddress, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerInfo, MaxSlots, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerInfo, Slots, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerInfo, BotSlots, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerInfo, bNeedPassword, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerInfo, bSecure, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerInfo, UnknownData_KUX7, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamServerInfo, 0x0058);
		}

		// struct FSteamServerListKeyValue
		TEST_METHOD(ScriptStruct__Steamworks__SteamServerListKeyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerListKeyValue, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerListKeyValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamServerListKeyValue, 0x0010);
		}

		// struct FSteamLobbyInfo
		TEST_METHOD(ScriptStruct__Steamworks__SteamLobbyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyInfo, UnknownData_P2D8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyInfo, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyInfo, bFriend, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyInfo, UnknownData_M34I, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyInfo, MetaData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyInfo, UnknownData_HI40, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamLobbyInfo, 0x0038);
		}

		// struct FSteamLobbyMember
		TEST_METHOD(ScriptStruct__Steamworks__SteamLobbyMember)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyMember, UserId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyMember, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyMember, Index, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyMember, bOwner, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyMember, UnknownData_CWRR, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyMember, Attributes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyMember, AvatarTexture, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLobbyMember, UnknownData_IO5U, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamLobbyMember, 0x0088);
		}

		// struct FPropertyPathSegment
		TEST_METHOD(ScriptStruct__PropertyPath__PropertyPathSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_2UWX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Field, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0020);
		}

		// struct FCachedPropertyPath
		TEST_METHOD(ScriptStruct__PropertyPath__CachedPropertyPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, Segments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_KQ70, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, CachedFunction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_IC46, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPropertyPath, 0x0028);
		}

		// struct FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCache, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, PlayRate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_X2K9, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheParams, 0x0028);
		}

		// struct FMovieSceneGeometryCacheSectionTemplateParameters : public FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, UnknownData_WYAE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionStartTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionEndTime, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplateParameters, 0x0038);
		}

		// struct FMovieSceneGeometryCacheSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplate, 0x0058);
		}

		// struct FGameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTag, TagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTag, 0x0008);
		}

		// struct FGameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_91YA, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// struct FGameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// struct FGameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_ZUIB, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceRestrictedTagList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0020);
		}

		// struct FGameplayTagTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0020);
		}

		// struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedGameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, bAllowNonRestrictedChildren, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, UnknownData_SZ6O, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedGameplayTagTableRow, 0x0028);
		}

		// struct FGameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// struct FGameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0010);
		}

		// struct FRestrictedConfigInfo
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedConfigInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, RestrictedConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, Owners, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedConfigInfo, 0x0020);
		}

		// struct FGameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_YSMY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// struct FGameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_BYDD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0010);
		}

		// struct FGameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_HAL0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0050);
		}

		// struct FAnalyticsEventAttr
		TEST_METHOD(ScriptStruct__AnalyticsBlueprintLibrary__AnalyticsEventAttr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalyticsEventAttr, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalyticsEventAttr, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalyticsEventAttr, 0x0020);
		}

		// struct FActorSequenceObjectReference
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_L9EX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, ActorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_VIQ2, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, PathToComponent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReference, 0x0028);
		}

		// struct FActorSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferences, 0x0010);
		}

		// struct FActorSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferenceMap, 0x0020);
		}

		// struct FSessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_INXQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// struct FSessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_PQRI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// struct FSessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_Z61U, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// struct FSessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_8CJN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, IsConsoleBuild, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_TRFX, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_S0L6, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0098);
		}

		// struct FSessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// struct FVirtualKeyboardOptions
		TEST_METHOD(ScriptStruct__Slate__VirtualKeyboardOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualKeyboardOptions, bEnableAutocorrect, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualKeyboardOptions, 0x0001);
		}

		// struct FInputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_N7BV, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// struct FAnchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// struct FGeometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_7XEH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// struct FMargin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// struct FSlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_W4LR, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// struct FSlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_ATW4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_46EF, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_A1PJ, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0088);
		}

		// struct FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_BUSQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0018);
		}

		// struct FPointerEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_AQLR, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0070);
		}

		// struct FCharacterEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_6NFV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0020);
		}

		// struct FKeyEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_NMRE, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0038);
		}

		// struct FNavigationEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_TH8F, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0020);
		}

		// struct FAnalogInputEvent : public FKeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_OF4H, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0040);
		}

		// struct FFontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_JJ0U, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_GNQL, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0028);
		}

		// struct FSlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_OO5Q, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_1M2B, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0058);
		}

		// struct FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_V9L1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// struct FTableRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x06B8);
		}

		// struct FSlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_5879, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// struct FButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0278);
		}

		// struct FComboButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x03A0);
		}

		// struct FComboBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x03D8);
		}

		// struct FEditableTextStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0220);
		}

		// struct FScrollBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x04D0);
		}

		// struct FEditableTextBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x07F8);
		}

		// struct FTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x01E8);
		}

		// struct FSpinBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x02E8);
		}

		// struct FFontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_7ZDQ, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, SubFaceIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// struct FTypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0028);
		}

		// struct FTypeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// struct FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFallbackFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, ScalingFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, UnknownData_WN50, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFallbackFont, 0x0018);
		}

		// struct FCompositeSubFont : public FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Cultures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0038);
		}

		// struct FCompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, FallbackTypeface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0038);
		}

		// struct FMotionEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_AU7D, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0048);
		}

		// struct FCaptureLostEvent
		TEST_METHOD(ScriptStruct__SlateCore__CaptureLostEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureLostEvent, UnknownData_QZD9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureLostEvent, 0x0008);
		}

		// struct FFocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_AACZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// struct FWindowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0F50);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x0FD8);
		}

		// struct FScrollBorderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x0118);
		}

		// struct FScrollBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x0228);
		}

		// struct FDockTabStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_X8GK, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0700);
		}

		// struct FSplitterStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x0118);
		}

		// struct FTableColumnHeaderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x04D0);
		}

		// struct FHeaderRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0B70);
		}

		// struct FInlineTextImageStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_04ZF, 0x0092);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0098);
		}

		// struct FSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredBarImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredThumbImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_8T19, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x0340);
		}

		// struct FVolumeControlStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x05F0);
		}

		// struct FSearchBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_Q14K, 0x0A89);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0A90);
		}

		// struct FExpandableAreaStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_UVKC, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0120);
		}

		// struct FProgressBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x01A0);
		}

		// struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x09E8);
		}

		// struct FHyperlinkStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x0478);
		}

		// struct FCheckBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_EHQH, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x0580);
		}

		// struct FPaperFlipbookKeyFrame
		TEST_METHOD(ScriptStruct__Paper2D__PaperFlipbookKeyFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, Sprite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, FrameRun, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, UnknownData_5LG7, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperFlipbookKeyFrame, 0x0010);
		}

		// struct FSpriteInstanceData
		TEST_METHOD(ScriptStruct__Paper2D__SpriteInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, SourceSprite, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, VertexColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, MaterialIndex, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteInstanceData, 0x0050);
		}

		// struct FPaperTerrainMaterialRule
		TEST_METHOD(ScriptStruct__Paper2D__PaperTerrainMaterialRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, StartCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, EndCap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MinimumAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MaximumAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, bEnableCollision, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_3LJV, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, CollisionOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, DrawOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_3CTC, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTerrainMaterialRule, 0x0038);
		}

		// struct FPaperTileInfo
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, TileSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, PackedTileIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, UnknownData_PE4U, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileInfo, 0x0010);
		}

		// struct FIntMargin
		TEST_METHOD(ScriptStruct__Paper2D__IntMargin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntMargin, 0x0010);
		}

		// struct FPaperTileSetTerrain
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileSetTerrain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, TerrainName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, CenterTileIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, UnknownData_4LBC, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileSetTerrain, 0x0018);
		}

		// struct FSpriteGeometryShape
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, ShapeType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_5GKT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Vertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, bNegativeWinding, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_WC1S, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryShape, 0x0030);
		}

		// struct FSpriteGeometryCollection
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, Shapes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, GeometryType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_ITXK, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, bAvoidVertexMerging, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_3Y1R, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, AlphaThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, DetailAmount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, SimplifyEpsilon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_WQL2, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryCollection, 0x0030);
		}

		// struct FPaperTileMetadata
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UserDataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, CollisionData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, TerrainMembership, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UnknownData_W8IN, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileMetadata, 0x0040);
		}

		// struct FPaperSpriteAtlasSlot
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteAtlasSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, SpriteRef, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, AtlasIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, X, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Y, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Width, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Height, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, UnknownData_79W7, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteAtlasSlot, 0x0040);
		}

		// struct FSpriteDrawCallRecord
		TEST_METHOD(ScriptStruct__Paper2D__SpriteDrawCallRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Destination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_1HAO, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, BaseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_9AA3, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Color, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_DH5X, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteDrawCallRecord, 0x00D0);
		}

		// struct FSpriteAssetInitParameters
		TEST_METHOD(ScriptStruct__Paper2D__SpriteAssetInitParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteAssetInitParameters, UnknownData_P9AU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteAssetInitParameters, 0x0040);
		}

		// struct FPaperSpriteSocket
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, LocalTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, UnknownData_BLLX, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteSocket, 0x0040);
		}

		// struct FSupportedAreaData
		TEST_METHOD(ScriptStruct__NavigationSystem__SupportedAreaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, UnknownData_75L4, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedAreaData, 0x0020);
		}

		// struct FNavCollisionBox
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Extent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionBox, 0x0018);
		}

		// struct FNavCollisionCylinder
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Height, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionCylinder, 0x0014);
		}

		// struct FNavGraphNode
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, UnknownData_365E, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphNode, 0x0018);
		}

		// struct FNavigationFilterArea
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, AreaClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, TravelCostOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, EnteringCostOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, UnknownData_KOZC, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterArea, 0x0018);
		}

		// struct FNavigationFilterFlags
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterFlags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterFlags, UnknownData_DBZD, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterFlags, 0x0004);
		}

		// struct FNavGraphEdge
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphEdge, UnknownData_624G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphEdge, 0x0018);
		}

		// struct FXRDeviceId
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRDeviceId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, DeviceID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, UnknownData_CWFG, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRDeviceId, 0x0010);
		}

		// struct FAutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_235R, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// struct FGameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0028);
		}

		// struct FClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// struct FClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_UKRD, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0018);
		}

		// struct FClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// struct FClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0030);
		}

		// struct FMRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_9LOF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// struct FGeometryCacheMeshData
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshData, UnknownData_1K7Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshData, 0x00A8);
		}

		// struct FTrackRenderData
		TEST_METHOD(ScriptStruct__GeometryCache__TrackRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackRenderData, UnknownData_9EP0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackRenderData, 0x0070);
		}

		// struct FGeometryCacheVertexInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheVertexInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheVertexInfo, UnknownData_TTVT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheVertexInfo, 0x0008);
		}

		// struct FGeometryCacheMeshBatchInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshBatchInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshBatchInfo, UnknownData_2KZI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshBatchInfo, 0x000C);
		}

		// struct FClothConstraintSetup
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup, 0x0010);
		}

		// struct FClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothVertBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x0034);
		}

		// struct FClothConfig
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, UnknownData_OF79, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, GravityOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, bUseGravityOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, UnknownData_UVM8, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, TetherStiffness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, TetherLimit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, CollisionThickness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AnimDriveSpringStiffness, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AnimDriveDamperStiffness, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig, 0x00D4);
		}

		// struct FClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothPhysicalMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, AnimDriveMultipliers, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x00A8);
		}

		// struct FClothLODData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothLODData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, CollisionData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, UnknownData_85NI, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODData, 0x00F8);
		}

		// struct FClothParameterMask_PhysMesh
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothParameterMask_PhysMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_LWYA, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_IULM, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_A6NS, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_PhysMesh, 0x0030);
		}

		// struct FCameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_QVKJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_37KO, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_KYD7, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0030);
		}

		// struct FCameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// struct FCameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, DiaphragmBladeCount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0018);
		}

		// struct FNamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// struct FNamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_7WU6, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// struct FCameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_4RTV, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0018);
		}

		// struct FCameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_NBY9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_T2AU, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_HG7J, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_V2QB, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0038);
		}

		// struct FBakedDataInfo
		TEST_METHOD(ScriptStruct__SteamAudio__BakedDataInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedDataInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedDataInfo, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedDataInfo, UnknownData_AEBN, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedDataInfo, 0x0010);
		}

		// struct FSubmixEffectReverbPluginSettings
		TEST_METHOD(ScriptStruct__SteamAudio__SubmixEffectReverbPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbPluginSettings, UnknownData_HH1G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbPluginSettings, 0x0001);
		}

		// struct FAirdropDetails
		TEST_METHOD(ScriptStruct__Pavlov__AirdropDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAirdropDetails, TotalTravelTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAirdropDetails, PlaneStartLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAirdropDetails, PlaneEndLocation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAirdropDetails, 0x001C);
		}

		// struct FBayonetDamage
		TEST_METHOD(ScriptStruct__Pavlov__BayonetDamage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBayonetDamage, StabbedPawn, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBayonetDamage, Damage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBayonetDamage, bSlashed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBayonetDamage, UnknownData_ULKW, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBayonetDamage, HitBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBayonetDamage, BodyHitLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBayonetDamage, HitDirection, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBayonetDamage, 0x0030);
		}

		// struct FAttachProxyInfo
		TEST_METHOD(ScriptStruct__Pavlov__AttachProxyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachProxyInfo, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachProxyInfo, UnknownData_68CK, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachProxyInfo, LocalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachProxyInfo, BoneName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachProxyInfo, UnknownData_A9Z9, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttachProxyInfo, 0x0050);
		}

		// struct FAIPersonality : public FTableRowBase
		TEST_METHOD(ScriptStruct__Pavlov__AIPersonality)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPersonality, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPersonality, Courage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPersonality, Reaction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPersonality, Strategy, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPersonality, Skill, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPersonality, 0x0028);
		}

		// struct FBuyRestrictions
		TEST_METHOD(ScriptStruct__Pavlov__BuyRestrictions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyRestrictions, MaxPurchasesPerTeam, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyRestrictions, MaxPurchasesPerPlayer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyRestrictions, Team0Purchases, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyRestrictions, Team1Purchases, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuyRestrictions, 0x0140);
		}

		// struct FDamageTrackInfo
		TEST_METHOD(ScriptStruct__Pavlov__DamageTrackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageTrackInfo, Instigator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageTrackInfo, Damage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageTrackInfo, OriginLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageTrackInfo, ImpactLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageTrackInfo, bLastHit, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageTrackInfo, bBullet, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageTrackInfo, UnknownData_JJ86, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageTrackInfo, DamageCauser, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageTrackInfo, bHeadshot, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageTrackInfo, UnknownData_NWDV, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageTrackInfo, 0x0038);
		}

		// struct FBuyMenuEquipment
		TEST_METHOD(ScriptStruct__Pavlov__BuyMenuEquipment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyMenuEquipment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyMenuEquipment, IconTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyMenuEquipment, Cost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyMenuEquipment, bDisabled, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyMenuEquipment, bIsAbleToBuy, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyMenuEquipment, bIsAbleToAttach, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyMenuEquipment, UnknownData_4FTJ, 0x0027);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuyMenuEquipment, 0x0028);
		}

		// struct FConditionStatement
		TEST_METHOD(ScriptStruct__Pavlov__ConditionStatement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionStatement, ConditionType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionStatement, ConditionOperator, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionStatement, UnknownData_RC4A, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionStatement, CompareValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConditionStatement, 0x0008);
		}

		// struct FBuyMenuSlot
		TEST_METHOD(ScriptStruct__Pavlov__BuyMenuSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyMenuSlot, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyMenuSlot, Category, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyMenuSlot, BuyCondition, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuyMenuSlot, 0x0018);
		}

		// struct FBuyMenuContainer
		TEST_METHOD(ScriptStruct__Pavlov__BuyMenuContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuyMenuContainer, BuyWheelSlots, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuyMenuContainer, 0x0010);
		}

		// struct FUIPlayerInfoModel
		TEST_METHOD(ScriptStruct__Pavlov__UIPlayerInfoModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPlayerInfoModel, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPlayerInfoModel, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPlayerInfoModel, AvatarImage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPlayerInfoModel, bSpeaking, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPlayerInfoModel, bMuted, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPlayerInfoModel, bLocal, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPlayerInfoModel, UnknownData_4X7K, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPlayerInfoModel, TeamId, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPlayerInfoModel, Score, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPlayerInfoModel, bCanBeKicked, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPlayerInfoModel, bBot, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIPlayerInfoModel, UnknownData_S6XY, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUIPlayerInfoModel, 0x0040);
		}

		// struct FContentViewGlobals
		TEST_METHOD(ScriptStruct__Pavlov__ContentViewGlobals)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentViewGlobals, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentViewGlobals, SideInterface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentViewGlobals, Players, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentViewGlobals, PlayingOnline, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentViewGlobals, LobbyActive, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentViewGlobals, bCanSwitchTeam, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentViewGlobals, bCanSuicide, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentViewGlobals, bCanVote, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentViewGlobals, bCanCallVote, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentViewGlobals, bAllMuted, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentViewGlobals, UnknownData_AJL0, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FContentViewGlobals, 0x0038);
		}

		// struct FUILobbyMemberModel
		TEST_METHOD(ScriptStruct__Pavlov__UILobbyMemberModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyMemberModel, bTaken, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyMemberModel, UnknownData_3RG9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyMemberModel, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyMemberModel, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyMemberModel, TeamId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyMemberModel, bTalking, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyMemberModel, bMuted, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyMemberModel, UnknownData_A471, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyMemberModel, UserId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyMemberModel, Avatar, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyMemberModel, bOwner, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyMemberModel, bSelf, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyMemberModel, bReady, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyMemberModel, UnknownData_PF9D, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUILobbyMemberModel, 0x0048);
		}

		// struct FServerSettings
		TEST_METHOD(ScriptStruct__Pavlov__ServerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSettings, MatchType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSettings, UnknownData_WWZE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSettings, MatchLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSettings, bCompetitive, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSettings, bHardcore, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSettings, WeaponFilter, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSettings, UnknownData_NHS6, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSettings, Team0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSettings, Team1, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSettings, 0x0030);
		}

		// struct FModalCommitParams
		TEST_METHOD(ScriptStruct__Pavlov__ModalCommitParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalCommitParams, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalCommitParams, UnknownData_EZFC, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalCommitParams, ValueStr, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModalCommitParams, UserObject, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModalCommitParams, 0x0020);
		}

		// struct FUILobbyModel
		TEST_METHOD(ScriptStruct__Pavlov__UILobbyModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, bBusy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, bFindingServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, UnknownData_EEK2, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, MapThumbnail, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, bLocalOwner, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, bFriendsOnly, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, bWantsToStart, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, bBots, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, bCoop, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, UnknownData_WIGS, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, Members, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, Pin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, MapId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, MapLabel, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, GameMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, Region, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, TeamId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, MaxMembers, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, bSupportsMatchLengthOverride, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, bSupportsCompetitive, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, UnknownData_V8FW, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUILobbyModel, Settings, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUILobbyModel, 0x00C0);
		}

		// struct FDamageEffectHit
		TEST_METHOD(ScriptStruct__Pavlov__DamageEffectHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEffectHit, HitVector, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEffectHit, HitTime, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEffectHit, 0x0010);
		}

		// struct FRotatedMap
		TEST_METHOD(ScriptStruct__Pavlov__RotatedMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotatedMap, MapId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotatedMap, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotatedMap, 0x0020);
		}

		// struct FServerDetails
		TEST_METHOD(ScriptStruct__Pavlov__ServerDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, Hash, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, Ip, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, UnknownData_CNX9, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, Name, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, Description, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, GameMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, MapLabel, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, MapId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, Slots, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, MaxSlots, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, bPasswordProtected, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, bSecured, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, UnknownData_W93E, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, Tags, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, Ping, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDetails, UnknownData_0DBG, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDetails, 0x00A0);
		}

		// struct FGestureSetup
		TEST_METHOD(ScriptStruct__Pavlov__GestureSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGestureSetup, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGestureSetup, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGestureSetup, UnknownData_KQ68, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGestureSetup, Threshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGestureSetup, UnknownData_QLY7, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGestureSetup, 0x0028);
		}

		// struct FKillInfo
		TEST_METHOD(ScriptStruct__Pavlov__KillInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillInfo, BulletOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillInfo, BulletImpact, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillInfo, bByBullet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillInfo, UnknownData_P4N9, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillInfo, Killer, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillInfo, LastHit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillInfo, Assists, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKillInfo, 0x0070);
		}

		// struct FShotConcurrencyQuality
		TEST_METHOD(ScriptStruct__Pavlov__ShotConcurrencyQuality)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShotConcurrencyQuality, Default, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShotConcurrencyQuality, High, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShotConcurrencyQuality, Medium, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShotConcurrencyQuality, Low, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShotConcurrencyQuality, Quest, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShotConcurrencyQuality, 0x0028);
		}

		// struct FGunAttachmentSetup
		TEST_METHOD(ScriptStruct__Pavlov__GunAttachmentSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGunAttachmentSetup, SuppresorClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGunAttachmentSetup, SightClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGunAttachmentSetup, PicatinnyOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGunAttachmentSetup, UnknownData_F2ZT, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGunAttachmentSetup, GripClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGunAttachmentSetup, AccessoryClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGunAttachmentSetup, CantedClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGunAttachmentSetup, 0x0030);
		}

		// struct FReplayInfo
		TEST_METHOD(ScriptStruct__Pavlov__ReplayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplayInfo, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplayInfo, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplayInfo, GameMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplayInfo, bLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplayInfo, UnknownData_FGI6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplayInfo, Elapsed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplayInfo, Users, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplayInfo, 0x0050);
		}

		// struct FHitBox
		TEST_METHOD(ScriptStruct__Pavlov__HitBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitBox, RotationOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitBox, Extent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitBox, UnknownData_BIKH, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitBox, Bone, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitBox, BoneMirror, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitBox, BoxComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitBox, UnknownData_YWJC, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitBox, 0x0080);
		}

		// struct FHitBoxHistory
		TEST_METHOD(ScriptStruct__Pavlov__HitBoxHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitBoxHistory, UnknownData_WUMX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitBoxHistory, Instances, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitBoxHistory, 0x0018);
		}

		// struct FEOSStat
		TEST_METHOD(ScriptStruct__Pavlov__EOSStat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEOSStat, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEOSStat, UserId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEOSStat, Score, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEOSStat, UnknownData_PNC0, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEOSStat, 0x0028);
		}

		// struct FStatOption
		TEST_METHOD(ScriptStruct__Pavlov__StatOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatOption, UnknownData_IK7Z, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatOption, EOSStat, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatOption, 0x0030);
		}

		// struct FEquipmentCost : public FTableRowBase
		TEST_METHOD(ScriptStruct__Pavlov__EquipmentCost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentCost, Cost, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentCost, UnknownData_DUA6, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquipmentCost, 0x0010);
		}

		// struct FVehicleInfo : public FTableRowBase
		TEST_METHOD(ScriptStruct__Pavlov__VehicleInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInfo, VehicleClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleInfo, 0x0030);
		}

		// struct FHitboxInfo : public FTableRowBase
		TEST_METHOD(ScriptStruct__Pavlov__HitboxInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitboxInfo, DamageMul, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitboxInfo, Slows, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitboxInfo, Demoralizes, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitboxInfo, UnknownData_J42H, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitboxInfo, HitSound, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitboxInfo, 0x0038);
		}

		// struct FUISoundMixingChannelModel
		TEST_METHOD(ScriptStruct__Pavlov__UISoundMixingChannelModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUISoundMixingChannelModel, Label, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUISoundMixingChannelModel, Volume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUISoundMixingChannelModel, Index, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUISoundMixingChannelModel, 0x0018);
		}

		// struct FUIMiscSettingsModel
		TEST_METHOD(ScriptStruct__Pavlov__UIMiscSettingsModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMiscSettingsModel, MixingChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMiscSettingsModel, CaptureDevices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMiscSettingsModel, RenderScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMiscSettingsModel, TextureQuality, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMiscSettingsModel, AntialiasQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMiscSettingsModel, EffectsQuality, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMiscSettingsModel, AudioQuality, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMiscSettingsModel, UnknownData_KV36, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUIMiscSettingsModel, 0x0038);
		}

		// struct FStatData
		TEST_METHOD(ScriptStruct__Pavlov__StatData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatData, StatType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatData, UnknownData_YXFW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatData, Amount, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatData, 0x0008);
		}

		// struct FPlayerStats
		TEST_METHOD(ScriptStruct__Pavlov__PlayerStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStats, UniqueID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStats, PlayerName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStats, TeamId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStats, UnknownData_H7DS, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStats, Stats, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerStats, 0x0038);
		}

		// struct FAllPlayerStats
		TEST_METHOD(ScriptStruct__Pavlov__AllPlayerStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAllPlayerStats, AllStats, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAllPlayerStats, 0x0010);
		}

		// struct FWheelSegment
		TEST_METHOD(ScriptStruct__Pavlov__WheelSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSegment, Label, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSegment, ID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSegment, bEnabled, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSegment, UnknownData_I70D, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSegment, ContentClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelSegment, 0x0030);
		}

		// struct FLobbyStatusMessage
		TEST_METHOD(ScriptStruct__Pavlov__LobbyStatusMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyStatusMessage, Message, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyStatusMessage, bDownloading, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyStatusMessage, UnknownData_3V3I, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyStatusMessage, Progress, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyStatusMessage, 0x0018);
		}

		// struct FUIViewModel
		TEST_METHOD(ScriptStruct__Pavlov__UIViewModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIViewModel, bIsOculus, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIViewModel, bIsShack, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUIViewModel, 0x0002);
		}

		// struct FVoiceAudioBuffer
		TEST_METHOD(ScriptStruct__Pavlov__VoiceAudioBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceAudioBuffer, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceAudioBuffer, 0x0010);
		}

		// struct FZombieBalanceData : public FTableRowBase
		TEST_METHOD(ScriptStruct__Pavlov__ZombieBalanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieBalanceData, Damage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieBalanceData, WoundRate, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieBalanceData, UnknownData_KIXR, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZombieBalanceData, 0x0010);
		}

		// struct FLoadoutItem
		TEST_METHOD(ScriptStruct__Pavlov__LoadoutItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutItem, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutItem, bInHand, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutItem, bInRightHand, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutItem, InventorySlot, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutItem, UnknownData_P18B, 0x0013);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoadoutItem, 0x0018);
		}

		// struct FLoadout
		TEST_METHOD(ScriptStruct__Pavlov__Loadout)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadout, LoadoutItems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadout, LoadoutCondition, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoadout, 0x0018);
		}

		// struct FLoadoutProperties
		TEST_METHOD(ScriptStruct__Pavlov__LoadoutProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutProperties, Loadouts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoadoutProperties, 0x0050);
		}

		// struct FUIMapModel
		TEST_METHOD(ScriptStruct__Pavlov__UIMapModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMapModel, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMapModel, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMapModel, Thumbnail, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMapModel, Rating, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMapModel, bSelected, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMapModel, bInstalled, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMapModel, bFavorite, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMapModel, bCustom, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMapModel, bDownloading, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMapModel, UnknownData_VG4Q, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIMapModel, DownloadProgress, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUIMapModel, 0x0040);
		}

		// struct FPartyInfo
		TEST_METHOD(ScriptStruct__Pavlov__PartyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyInfo, Label, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyInfo, Network, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyInfo, EntityId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyInfo, 0x0030);
		}

		// struct FMatchSettings
		TEST_METHOD(ScriptStruct__Pavlov__MatchSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchSettings, GameModes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchSettings, Maps, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchSettings, bPrivate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchSettings, UnknownData_1JBW, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchSettings, 0x0028);
		}

		// struct FPartyMember
		TEST_METHOD(ScriptStruct__Pavlov__PartyMember)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMember, EntityId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMember, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMember, JoinTimestamp, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMember, bLocal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMember, bLeader, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMember, bHasMetadata, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMember, bTalking, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMember, UnknownData_8FZS, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyMember, 0x0030);
		}

		// struct FLobbyTalker
		TEST_METHOD(ScriptStruct__Pavlov__LobbyTalker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyTalker, UnknownData_XXBN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyTalker, AudioComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyTalker, TalkTimer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyTalker, UnknownData_8Q6L, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyTalker, 0x0018);
		}

		// struct FLobbySearchAttributeFilter
		TEST_METHOD(ScriptStruct__Pavlov__LobbySearchAttributeFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbySearchAttributeFilter, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbySearchAttributeFilter, Value, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbySearchAttributeFilter, Operator, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbySearchAttributeFilter, UnknownData_331A, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbySearchAttributeFilter, 0x0028);
		}

		// struct FAvatarTextureInstance
		TEST_METHOD(ScriptStruct__Pavlov__AvatarTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarTextureInstance, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarTextureInstance, bLoaded, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarTextureInstance, UnknownData_1H7S, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAvatarTextureInstance, 0x0010);
		}

		// struct FFriendRichPresence
		TEST_METHOD(ScriptStruct__Pavlov__FriendRichPresence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendRichPresence, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendRichPresence, PlatformId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendRichPresence, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendRichPresence, DisplayStatus, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendRichPresence, ServerId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFriendRichPresence, 0x0050);
		}

		// struct FOutOfBoundsInfo
		TEST_METHOD(ScriptStruct__Pavlov__OutOfBoundsInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutOfBoundsInfo, GuideToLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutOfBoundsInfo, UnknownData_86BU, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutOfBoundsInfo, OutOfBoundsVolume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOutOfBoundsInfo, 0x0018);
		}

		// struct FPavlovAdvancedMap
		TEST_METHOD(ScriptStruct__Pavlov__PavlovAdvancedMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovAdvancedMap, Map, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovAdvancedMap, bPublic, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovAdvancedMap, bFavorite, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovAdvancedMap, UnknownData_CHFI, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovAdvancedMap, Score, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPavlovAdvancedMap, 0x0010);
		}

		// struct FServerConnectParams
		TEST_METHOD(ScriptStruct__Pavlov__ServerConnectParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConnectParams, ConnectURL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConnectParams, MapId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConnectParams, ConnectDelay, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConnectParams, UnknownData_5TAY, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConnectParams, Pin, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConnectParams, bReconnect, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConnectParams, UnknownData_GIN5, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerConnectParams, 0x0040);
		}

		// struct FEquipmentData : public FTableRowBase
		TEST_METHOD(ScriptStruct__Pavlov__EquipmentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, MagazineCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, Cost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, KillBonus, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, BaseDamage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, ArmourDamage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, ArmourPenetration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, HelmetDamage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, HelmetBleed, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, Penetration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, bPassiveDamage, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, UnknownData_1MTH, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, Icon, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, ItemClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, Weight, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, FalloffModifier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, MinFalloffDist, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentData, MaxFalloffDist, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquipmentData, 0x0050);
		}

		// struct FPreloadedSkins
		TEST_METHOD(ScriptStruct__Pavlov__PreloadedSkins)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreloadedSkins, SkinFamilyClassMap, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreloadedSkins, 0x0050);
		}

		// struct FKillfeedEntry
		TEST_METHOD(ScriptStruct__Pavlov__KillfeedEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, Killer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, Victim, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, DamageCauser, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, bHeadshot, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, UnknownData_NIEL, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, KillerName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, KillerTeamId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, UnknownData_FAJX, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, KillerId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, VictimName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, VictimTeamId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, UnknownData_ZA2D, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, VictimId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, EntryLifespan, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, bLocalPlayer, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillfeedEntry, UnknownData_YD9T, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKillfeedEntry, 0x0078);
		}

		// struct FFavoriteServer
		TEST_METHOD(ScriptStruct__Pavlov__FavoriteServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoriteServer, ServerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoriteServer, ServerIdentifier, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFavoriteServer, 0x0020);
		}

		// struct FEquipmentDefinition
		TEST_METHOD(ScriptStruct__Pavlov__EquipmentDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentDefinition, Primary, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentDefinition, Secondary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentDefinition, Knife, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentDefinition, Nades, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentDefinition, Other, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentDefinition, Inventory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentDefinition, bByBuyMenu, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentDefinition, bBundle, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentDefinition, UnknownData_WS6V, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquipmentDefinition, 0x0048);
		}

		// struct FHandFingerState
		TEST_METHOD(ScriptStruct__Pavlov__HandFingerState)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHandFingerState, 0x0001);
		}

		// struct FFingerTracking
		TEST_METHOD(ScriptStruct__Pavlov__FingerTracking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFingerTracking, LeftHand, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFingerTracking, RightHand, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFingerTracking, 0x0003);
		}

		// struct FWoundInfo
		TEST_METHOD(ScriptStruct__Pavlov__WoundInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundInfo, HitLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundInfo, HitDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundInfo, BoneName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundInfo, bLastHit, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundInfo, UnknownData_G8Z8, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundInfo, Scale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundInfo, WoundRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundInfo, UnknownData_F3W2, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWoundInfo, 0x0030);
		}

		// struct FPlayerAvatar
		TEST_METHOD(ScriptStruct__Pavlov__PlayerAvatar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerAvatar, AvatarSkinClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerAvatar, CustomMesh, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerAvatar, 0x0010);
		}

		// struct FImpactDamage
		TEST_METHOD(ScriptStruct__Pavlov__ImpactDamage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDamage, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDamage, UnknownData_C01F, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDamage, BoneName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDamage, Direction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDamage, ImpulseForce, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDamage, WoundRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDamage, UnknownData_J5Y9, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDamage, WoundScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDamage, Instigator, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImpactDamage, 0x0038);
		}

		// struct FGiveItemInventoryParams
		TEST_METHOD(ScriptStruct__Pavlov__GiveItemInventoryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGiveItemInventoryParams, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGiveItemInventoryParams, ItemClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGiveItemInventoryParams, Slot, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGiveItemInventoryParams, bWithAttachments, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGiveItemInventoryParams, bLoaded, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGiveItemInventoryParams, UnknownData_YP44, 0x0013);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGiveItemInventoryParams, 0x0018);
		}

		// struct FGiveItemParams
		TEST_METHOD(ScriptStruct__Pavlov__GiveItemParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGiveItemParams, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGiveItemParams, ItemClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGiveItemParams, bDominant, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGiveItemParams, bWithAttachments, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGiveItemParams, bLoaded, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGiveItemParams, UnknownData_LN0P, 0x0013);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGiveItemParams, 0x0018);
		}

		// struct FClientZombieBulletHit
		TEST_METHOD(ScriptStruct__Pavlov__ClientZombieBulletHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientZombieBulletHit, Zombie, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientZombieBulletHit, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientZombieBulletHit, TotalDamage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientZombieBulletHit, UnknownData_6HTI, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientZombieBulletHit, BoneIndex, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientZombieBulletHit, GunClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientZombieBulletHit, 0x0020);
		}

		// struct FClientBulletHit
		TEST_METHOD(ScriptStruct__Pavlov__ClientBulletHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientBulletHit, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientBulletHit, Hit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientBulletHit, bHeadshot, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientBulletHit, bPenetrated, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientBulletHit, UnknownData_JQW9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientBulletHit, BulletClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientBulletHit, GunClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientBulletHit, Origin, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientBulletHit, UnknownData_R4AN, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientBulletHit, BoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientBulletHit, Timestamp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientBulletHit, UnknownData_GBDM, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientBulletHit, 0x0048);
		}

		// struct FRconCommand
		TEST_METHOD(ScriptStruct__Pavlov__RconCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconCommand, RconCommand, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconCommand, UnknownData_Q3DZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconCommand, ActOn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRconCommand, Option, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRconCommand, 0x0028);
		}

		// struct FReplicatedWheelState
		TEST_METHOD(ScriptStruct__Pavlov__ReplicatedWheelState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedWheelState, BrakeTorque, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedWheelState, DriveTorque, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedWheelState, 0x0008);
		}

		// struct FLobbySearchOptions
		TEST_METHOD(ScriptStruct__Pavlov__LobbySearchOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbySearchOptions, MaxResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbySearchOptions, UnknownData_I0BD, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbySearchOptions, SearchByUserId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbySearchOptions, AttributeFilters, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbySearchOptions, 0x0028);
		}

		// struct FPushLoadoutEquipment
		TEST_METHOD(ScriptStruct__Pavlov__PushLoadoutEquipment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, LoadoutId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, PrimaryHandWeaponClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, PrimaryBackWeaponClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, SecondaryWeaponClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, bSpawnWithDefaultAttachments, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, UnknownData_RWG3, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, GrenadeClasses, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, KnifeSlot, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, bSpawnMeds, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, bSpawnSyringe, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, SpawnWithMine, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, Health, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, Armour, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, bHelmet, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, UnknownData_FFLI, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, MaxPlayersWithLoadout, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutEquipment, MaxPlayerMultiplier, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPushLoadoutEquipment, 0x0050);
		}

		// struct FPushMeshLazyLoad
		TEST_METHOD(ScriptStruct__Pavlov__PushMeshLazyLoad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushMeshLazyLoad, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushMeshLazyLoad, LazyLoadMesh, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPushMeshLazyLoad, 0x0030);
		}

		// struct FPushMeshLoaded
		TEST_METHOD(ScriptStruct__Pavlov__PushMeshLoaded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushMeshLoaded, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushMeshLoaded, LoadedMesh, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPushMeshLoaded, 0x0010);
		}

		// struct FPushLoadoutCount
		TEST_METHOD(ScriptStruct__Pavlov__PushLoadoutCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutCount, NumOfLoadouts, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushLoadoutCount, MaxLoadouts, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPushLoadoutCount, 0x0008);
		}

		// struct FLastPushDialog
		TEST_METHOD(ScriptStruct__Pavlov__LastPushDialog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLastPushDialog, LastDialogType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLastPushDialog, UnknownData_GG7L, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLastPushDialog, LastDialogComp, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLastPushDialog, 0x0010);
		}

		// struct FPushChant
		TEST_METHOD(ScriptStruct__Pavlov__PushChant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushChant, InitialChant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushChant, ResponseChant, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushChant, ResponseChantDelay, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushChant, UnknownData_P8KS, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPushChant, ResponseChantChorus, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPushChant, 0x0020);
		}

		// struct FSoundMixingChannel
		TEST_METHOD(ScriptStruct__Pavlov__SoundMixingChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundMixingChannel, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundMixingChannel, Label, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundMixingChannel, SoundMix, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundMixingChannel, Volume, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundMixingChannel, UnknownData_ID97, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundMixingChannel, 0x0030);
		}

		// struct FUICreateModalParams
		TEST_METHOD(ScriptStruct__Pavlov__UICreateModalParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUICreateModalParams, ModalClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUICreateModalParams, ViewClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUICreateModalParams, ContextValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUICreateModalParams, UnknownData_6JUL, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUICreateModalParams, ContextValueStr, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUICreateModalParams, ViewContent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUICreateModalParams, bCreateView, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUICreateModalParams, UnknownData_6Y62, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUICreateModalParams, 0x0040);
		}

		// struct FPavlovVoicePacket
		TEST_METHOD(ScriptStruct__Pavlov__PavlovVoicePacket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovVoicePacket, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPavlovVoicePacket, 0x0010);
		}

		// struct FPavlovServerInfo
		TEST_METHOD(ScriptStruct__Pavlov__PavlovServerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, UnknownData_BT34, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, LobbyIdString, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, bPinProtected, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, UnknownData_9VNP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, Map, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, MapLabel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, GameMode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, SlotLimit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, Slots, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, bPlaying, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, bFriendsOnly, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, bFriendLobby, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, UnknownData_JS75, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPavlovServerInfo, Settings, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPavlovServerInfo, 0x00A0);
		}

		// struct FSpectatorViews
		TEST_METHOD(ScriptStruct__Pavlov__SpectatorViews)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorViews, MapName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorViews, Views, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpectatorViews, 0x0018);
		}

		// struct FTimestampTeleport
		TEST_METHOD(ScriptStruct__Pavlov__TimestampTeleport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimestampTeleport, TeleportLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimestampTeleport, TeleportRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimestampTeleport, Timestamp, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimestampTeleport, 0x0020);
		}

		// struct FServerPingInfo
		TEST_METHOD(ScriptStruct__Pavlov__ServerPingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerPingInfo, UnknownData_X32I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerPingInfo, 0x0020);
		}

		// struct FLobbyDetails
		TEST_METHOD(ScriptStruct__Pavlov__LobbyDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyDetails, LobbyId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyDetails, OwnerUserId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyDetails, OwnerName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyDetails, PermissionLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyDetails, UnknownData_WDZV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyDetails, AvailableSlots, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyDetails, MaxSlots, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyDetails, bFriendsOnly, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyDetails, UnknownData_XLE8, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyDetails, Attributes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyDetails, 0x0090);
		}

		// struct FServerStatusInfo
		TEST_METHOD(ScriptStruct__Pavlov__ServerStatusInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStatusInfo, MapId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStatusInfo, MapVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStatusInfo, UnknownData_XCK0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStatusInfo, GameMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStatusInfo, DepotURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStatusInfo, PlayerCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStatusInfo, MaxPlayerCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStatusInfo, PlayerNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStatusInfo, bCanJoin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStatusInfo, bRotating, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStatusInfo, UnknownData_638U, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerStatusInfo, 0x0058);
		}

		// struct FServerContainerInfo
		TEST_METHOD(ScriptStruct__Pavlov__ServerContainerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, ServerType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, UnknownData_KV9O, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, ID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, Ip, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, Port, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, UnknownData_KZO9, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, bPasswordProtected, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, UnknownData_23ED, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, MapId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, MapLabel, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, GameMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, Slots, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, MaxSlots, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, bFriendsPlaying, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, bFavorite, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, UnknownData_PFJA, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, ServerSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, Tags, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, Ping, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, UnknownData_GM78, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, Region, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerContainerInfo, Pin, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerContainerInfo, 0x00F0);
		}

		// struct FServerStatusMsg
		TEST_METHOD(ScriptStruct__Pavlov__ServerStatusMsg)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStatusMsg, Data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerStatusMsg, Address, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerStatusMsg, 0x0020);
		}

		// struct FUIFriendsModel
		TEST_METHOD(ScriptStruct__Pavlov__UIFriendsModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIFriendsModel, Friends, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUIFriendsModel, 0x0010);
		}

		// struct FKnifeDamage : public FTableRowBase
		TEST_METHOD(ScriptStruct__Pavlov__KnifeDamage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKnifeDamage, BodyPartDamage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKnifeDamage, UnknownData_OMWY, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKnifeDamage, 0x0010);
		}

		// struct FLootMesh : public FTableRowBase
		TEST_METHOD(ScriptStruct__Pavlov__LootMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLootMesh, LootMesh, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLootMesh, 0x0030);
		}

		// struct FServerRegion
		TEST_METHOD(ScriptStruct__Pavlov__ServerRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegion, RegionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegion, PingHost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegion, Latency, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegion, UnknownData_AIL6, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRegion, 0x0028);
		}

		// struct FLeaderboardQuery
		TEST_METHOD(ScriptStruct__Pavlov__LeaderboardQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardQuery, UnknownData_RQHL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardQuery, LeaderboardId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardQuery, MaxResults, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardQuery, UnknownData_7AEB, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardQuery, 0x0020);
		}

		// struct FPreBakedWound : public FTableRowBase
		TEST_METHOD(ScriptStruct__Pavlov__PreBakedWound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreBakedWound, SimulateBone, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreBakedWound, BloodMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreBakedWound, AuxClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreBakedWound, Location, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreBakedWound, UProjection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreBakedWound, VProjection, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreBakedWound, 0x0050);
		}

		// struct FEquipmentSnapshot
		TEST_METHOD(ScriptStruct__Pavlov__EquipmentSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentSnapshot, InventorySlots, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentSnapshot, InventorySlotsAttachments, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentSnapshot, LeftController, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentSnapshot, LeftAttachments, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentSnapshot, RightController, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquipmentSnapshot, RightAttachments, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquipmentSnapshot, 0x0090);
		}

		// struct FClientKnifeDamage
		TEST_METHOD(ScriptStruct__Pavlov__ClientKnifeDamage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientKnifeDamage, Victim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientKnifeDamage, TotalDamage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientKnifeDamage, UnknownData_1YOF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientKnifeDamage, Knife, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientKnifeDamage, HitBone, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientKnifeDamage, LocalOffset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientKnifeDamage, 0x0050);
		}

		// struct FScoreboardSlot
		TEST_METHOD(ScriptStruct__Pavlov__ScoreboardSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, bEmpty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, UnknownData_28IN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, Avatar, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, Kills, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, Deaths, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, Score, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, Cash, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, bTalking, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, bBombCarrier, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, bLocal, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, bMuted, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, bDead, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, bBot, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, bDev, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, UnknownData_F13S, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, Ping, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreboardSlot, UnknownData_60UQ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScoreboardSlot, 0x0048);
		}

		// struct FCombinedServerList
		TEST_METHOD(ScriptStruct__Pavlov__CombinedServerList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombinedServerList, ServerDetails, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombinedServerList, LobbyDetails, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombinedServerList, bLobby, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombinedServerList, UnknownData_7OB9, 0x0141);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCombinedServerList, 0x0148);
		}

		// struct FUIServerBrowserEntryModel
		TEST_METHOD(ScriptStruct__Pavlov__UIServerBrowserEntryModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIServerBrowserEntryModel, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIServerBrowserEntryModel, ServerName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIServerBrowserEntryModel, GameMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIServerBrowserEntryModel, Map, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIServerBrowserEntryModel, Slots, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIServerBrowserEntryModel, SlotsMax, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIServerBrowserEntryModel, Region, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIServerBrowserEntryModel, Latency, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIServerBrowserEntryModel, bHasPin, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIServerBrowserEntryModel, bLobby, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIServerBrowserEntryModel, bFavorite, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIServerBrowserEntryModel, UnknownData_OCB6, 0x005F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUIServerBrowserEntryModel, 0x0060);
		}

		// struct FLobbySearchResult
		TEST_METHOD(ScriptStruct__Pavlov__LobbySearchResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbySearchResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbySearchResult, UnknownData_VYWN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbySearchResult, ResultCode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbySearchResult, LobbyList, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbySearchResult, 0x0018);
		}

		// struct FVoicePacketBunch
		TEST_METHOD(ScriptStruct__Pavlov__VoicePacketBunch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoicePacketBunch, Players, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoicePacketBunch, Packets, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoicePacketBunch, 0x0020);
		}

		// struct FWorkshopItem
		TEST_METHOD(ScriptStruct__Pavlov__WorkshopItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorkshopItem, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorkshopItem, Title, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorkshopItem, Description, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorkshopItem, bSubscribed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorkshopItem, UnknownData_9BZS, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorkshopItem, Score, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorkshopItem, Preview, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorkshopItem, 0x0038);
		}

		// struct FWoundBoneState
		TEST_METHOD(ScriptStruct__Pavlov__WoundBoneState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundBoneState, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundBoneState, WoundRatio, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundBoneState, UnknownData_BUQ5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundBoneState, MajorHitIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundBoneState, CurrentSeverity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundBoneState, UnknownData_JVJR, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWoundBoneState, 0x0020);
		}

		// struct FWoundMaterialSet
		TEST_METHOD(ScriptStruct__Pavlov__WoundMaterialSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundMaterialSet, Simple, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundMaterialSet, Complex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundMaterialSet, SimpleInstance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundMaterialSet, ComplexInstance, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWoundMaterialSet, 0x0020);
		}

		// struct FWoundMeshInstance
		TEST_METHOD(ScriptStruct__Pavlov__WoundMeshInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundMeshInstance, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundMeshInstance, MeshComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundMeshInstance, MaterialSets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWoundMeshInstance, WoundComponent, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWoundMeshInstance, 0x0068);
		}

		// struct FMemberFX
		TEST_METHOD(ScriptStruct__Pavlov__MemberFX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberFX, SurfaceFX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberFX, DismemberSurfaceFX, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberFX, Bones, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberFX, 0x0020);
		}

		// struct FZombieHitInfo
		TEST_METHOD(ScriptStruct__Pavlov__ZombieHitInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieHitInfo, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieHitInfo, Location, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieHitInfo, TotalDamage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieHitInfo, Distance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieHitInfo, WoundRate, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieHitInfo, UnknownData_S263, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieHitInfo, GunClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieHitInfo, BoneIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieHitInfo, bValid, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieHitInfo, UnknownData_EY2L, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZombieHitInfo, Instigator, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZombieHitInfo, 0x0038);
		}

		// struct FWaypointInfo
		TEST_METHOD(ScriptStruct__Pavlov__WaypointInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaypointInfo, Waypoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaypointInfo, Distance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaypointInfo, Location, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaypointInfo, 0x0018);
		}

		// struct FLeaderboardRecord
		TEST_METHOD(ScriptStruct__Pavlov__LeaderboardRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardRecord, Rank, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardRecord, Score, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardRecord, UserDisplayName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardRecord, 0x0018);
		}

		// struct FLeaderboardData
		TEST_METHOD(ScriptStruct__Pavlov__LeaderboardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardData, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardData, UnknownData_LP7P, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardData, ReturnCode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardData, LeaderboardId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardData, LeaderboardRecords, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardData, 0x0028);
		}

		// struct FSightZeroing : public FTableRowBase
		TEST_METHOD(ScriptStruct__Pavlov__SightZeroing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSightZeroing, ZeroDefault, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSightZeroing, ZeroAt25m, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSightZeroing, ZeroAt50m, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSightZeroing, ZeroAt100m, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSightZeroing, 0x0018);
		}

		// struct FAvatarInfo : public FTableRowBase
		TEST_METHOD(ScriptStruct__Pavlov__AvatarInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarInfo, AvatarComponentClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAvatarInfo, 0x0010);
		}

		// struct FUIFiltersModel
		TEST_METHOD(ScriptStruct__Pavlov__UIFiltersModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIFiltersModel, GM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIFiltersModel, Tags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIFiltersModel, Regions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIFiltersModel, Server, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIFiltersModel, bHideEmpty, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIFiltersModel, bHideFull, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIFiltersModel, bHideLocked, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIFiltersModel, bOnlyFavorites, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUIFiltersModel, UnknownData_GOTA, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUIFiltersModel, 0x0038);
		}

		// struct FStatReturn
		TEST_METHOD(ScriptStruct__Pavlov__StatReturn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatReturn, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatReturn, UnknownData_4H10, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatReturn, ResultCode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatReturn, EOSStat, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatReturn, 0x0030);
		}

		// struct FSoundVariation
		TEST_METHOD(ScriptStruct__SoundUtilities__SoundVariation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, SoundWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, ProbabilityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, VolumeRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, PitchRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, UnknownData_ZA36, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundVariation, 0x0020);
		}

		// struct FOverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, EndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}

		// struct FNetAnalyticsDataConfig
		TEST_METHOD(ScriptStruct__PacketHandler__NetAnalyticsDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, bEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, UnknownData_J726, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetAnalyticsDataConfig, 0x0010);
		}

		// struct FMediaPlayerTrackOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerTrackOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Audio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Caption, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Script, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Subtitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Text, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Video, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerTrackOptions, 0x001C);
		}

		// struct FMediaPlayerOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Tracks, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerOptions, 0x001C);
		}
	};
}
